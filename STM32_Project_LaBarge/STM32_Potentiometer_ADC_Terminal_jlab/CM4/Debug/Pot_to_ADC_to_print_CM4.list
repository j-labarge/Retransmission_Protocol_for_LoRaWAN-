
Pot_to_ADC_to_print_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049e8  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  08004b28  08004b28  00014b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cb4  08004cb4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08004cb4  08004cb4  00014cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004cbc  08004cbc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004cbc  08004cbc  00014cbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004cc0  08004cc0  00014cc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004cc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  20000074  08004d38  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a0  08004d38  000201a0  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010fba  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000250d  00000000  00000000  00031058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c8  00000000  00000000  00033568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010f0  00000000  00000000  00034730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001df1e  00000000  00000000  00035820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001171b  00000000  00000000  0005373e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bb51e  00000000  00000000  00064e59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00120377  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005218  00000000  00000000  001203c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000074 	.word	0x20000074
 800015c:	00000000 	.word	0x00000000
 8000160:	08004b10 	.word	0x08004b10

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000078 	.word	0x20000078
 800017c:	08004b10 	.word	0x08004b10

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b974 	b.w	8000520 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	4688      	mov	r8, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14d      	bne.n	80002fc <__udivmoddi4+0xac>
 8000260:	428a      	cmp	r2, r1
 8000262:	4694      	mov	ip, r2
 8000264:	d968      	bls.n	8000338 <__udivmoddi4+0xe8>
 8000266:	fab2 f282 	clz	r2, r2
 800026a:	b152      	cbz	r2, 8000282 <__udivmoddi4+0x32>
 800026c:	fa01 f302 	lsl.w	r3, r1, r2
 8000270:	f1c2 0120 	rsb	r1, r2, #32
 8000274:	fa20 f101 	lsr.w	r1, r0, r1
 8000278:	fa0c fc02 	lsl.w	ip, ip, r2
 800027c:	ea41 0803 	orr.w	r8, r1, r3
 8000280:	4094      	lsls	r4, r2
 8000282:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8000286:	0c21      	lsrs	r1, r4, #16
 8000288:	fbb8 fef5 	udiv	lr, r8, r5
 800028c:	fa1f f78c 	uxth.w	r7, ip
 8000290:	fb05 831e 	mls	r3, r5, lr, r8
 8000294:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000298:	fb0e f107 	mul.w	r1, lr, r7
 800029c:	4299      	cmp	r1, r3
 800029e:	d90b      	bls.n	80002b8 <__udivmoddi4+0x68>
 80002a0:	eb1c 0303 	adds.w	r3, ip, r3
 80002a4:	f10e 30ff 	add.w	r0, lr, #4294967295
 80002a8:	f080 811e 	bcs.w	80004e8 <__udivmoddi4+0x298>
 80002ac:	4299      	cmp	r1, r3
 80002ae:	f240 811b 	bls.w	80004e8 <__udivmoddi4+0x298>
 80002b2:	f1ae 0e02 	sub.w	lr, lr, #2
 80002b6:	4463      	add	r3, ip
 80002b8:	1a5b      	subs	r3, r3, r1
 80002ba:	b2a4      	uxth	r4, r4
 80002bc:	fbb3 f0f5 	udiv	r0, r3, r5
 80002c0:	fb05 3310 	mls	r3, r5, r0, r3
 80002c4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c8:	fb00 f707 	mul.w	r7, r0, r7
 80002cc:	42a7      	cmp	r7, r4
 80002ce:	d90a      	bls.n	80002e6 <__udivmoddi4+0x96>
 80002d0:	eb1c 0404 	adds.w	r4, ip, r4
 80002d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002d8:	f080 8108 	bcs.w	80004ec <__udivmoddi4+0x29c>
 80002dc:	42a7      	cmp	r7, r4
 80002de:	f240 8105 	bls.w	80004ec <__udivmoddi4+0x29c>
 80002e2:	4464      	add	r4, ip
 80002e4:	3802      	subs	r0, #2
 80002e6:	1be4      	subs	r4, r4, r7
 80002e8:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80002ec:	2100      	movs	r1, #0
 80002ee:	b11e      	cbz	r6, 80002f8 <__udivmoddi4+0xa8>
 80002f0:	40d4      	lsrs	r4, r2
 80002f2:	2300      	movs	r3, #0
 80002f4:	e9c6 4300 	strd	r4, r3, [r6]
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d908      	bls.n	8000312 <__udivmoddi4+0xc2>
 8000300:	2e00      	cmp	r6, #0
 8000302:	f000 80ee 	beq.w	80004e2 <__udivmoddi4+0x292>
 8000306:	2100      	movs	r1, #0
 8000308:	e9c6 0500 	strd	r0, r5, [r6]
 800030c:	4608      	mov	r0, r1
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f183 	clz	r1, r3
 8000316:	2900      	cmp	r1, #0
 8000318:	d14a      	bne.n	80003b0 <__udivmoddi4+0x160>
 800031a:	42ab      	cmp	r3, r5
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd4>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80f9 	bhi.w	8000516 <__udivmoddi4+0x2c6>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb65 0303 	sbc.w	r3, r5, r3
 800032a:	2001      	movs	r0, #1
 800032c:	4698      	mov	r8, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d0e2      	beq.n	80002f8 <__udivmoddi4+0xa8>
 8000332:	e9c6 4800 	strd	r4, r8, [r6]
 8000336:	e7df      	b.n	80002f8 <__udivmoddi4+0xa8>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xec>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 8091 	bne.w	8000468 <__udivmoddi4+0x218>
 8000346:	eba1 050c 	sub.w	r5, r1, ip
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f fe8c 	uxth.w	lr, ip
 8000352:	2101      	movs	r1, #1
 8000354:	fbb5 f3f7 	udiv	r3, r5, r7
 8000358:	fb07 5013 	mls	r0, r7, r3, r5
 800035c:	0c25      	lsrs	r5, r4, #16
 800035e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000362:	fb0e f003 	mul.w	r0, lr, r3
 8000366:	42a8      	cmp	r0, r5
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x12c>
 800036a:	eb1c 0505 	adds.w	r5, ip, r5
 800036e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x12a>
 8000374:	42a8      	cmp	r0, r5
 8000376:	f200 80cb 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 800037a:	4643      	mov	r3, r8
 800037c:	1a2d      	subs	r5, r5, r0
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb5 f0f7 	udiv	r0, r5, r7
 8000384:	fb07 5510 	mls	r5, r7, r0, r5
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb0e fe00 	mul.w	lr, lr, r0
 8000390:	45a6      	cmp	lr, r4
 8000392:	d908      	bls.n	80003a6 <__udivmoddi4+0x156>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 35ff 	add.w	r5, r0, #4294967295
 800039c:	d202      	bcs.n	80003a4 <__udivmoddi4+0x154>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f200 80bb 	bhi.w	800051a <__udivmoddi4+0x2ca>
 80003a4:	4628      	mov	r0, r5
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ae:	e79e      	b.n	80002ee <__udivmoddi4+0x9e>
 80003b0:	f1c1 0720 	rsb	r7, r1, #32
 80003b4:	408b      	lsls	r3, r1
 80003b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa20 f407 	lsr.w	r4, r0, r7
 80003c2:	fa05 f301 	lsl.w	r3, r5, r1
 80003c6:	431c      	orrs	r4, r3
 80003c8:	40fd      	lsrs	r5, r7
 80003ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ce:	fa00 f301 	lsl.w	r3, r0, r1
 80003d2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003d6:	0c20      	lsrs	r0, r4, #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fb09 5518 	mls	r5, r9, r8, r5
 80003e0:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 80003e4:	fb08 f00e 	mul.w	r0, r8, lr
 80003e8:	42a8      	cmp	r0, r5
 80003ea:	fa02 f201 	lsl.w	r2, r2, r1
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b8>
 80003f0:	eb1c 0505 	adds.w	r5, ip, r5
 80003f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f8:	f080 8088 	bcs.w	800050c <__udivmoddi4+0x2bc>
 80003fc:	42a8      	cmp	r0, r5
 80003fe:	f240 8085 	bls.w	800050c <__udivmoddi4+0x2bc>
 8000402:	f1a8 0802 	sub.w	r8, r8, #2
 8000406:	4465      	add	r5, ip
 8000408:	1a2d      	subs	r5, r5, r0
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb5 f0f9 	udiv	r0, r5, r9
 8000410:	fb09 5510 	mls	r5, r9, r0, r5
 8000414:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000418:	fb00 fe0e 	mul.w	lr, r0, lr
 800041c:	45ae      	cmp	lr, r5
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1e2>
 8000420:	eb1c 0505 	adds.w	r5, ip, r5
 8000424:	f100 34ff 	add.w	r4, r0, #4294967295
 8000428:	d26c      	bcs.n	8000504 <__udivmoddi4+0x2b4>
 800042a:	45ae      	cmp	lr, r5
 800042c:	d96a      	bls.n	8000504 <__udivmoddi4+0x2b4>
 800042e:	3802      	subs	r0, #2
 8000430:	4465      	add	r5, ip
 8000432:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000436:	fba0 9402 	umull	r9, r4, r0, r2
 800043a:	eba5 050e 	sub.w	r5, r5, lr
 800043e:	42a5      	cmp	r5, r4
 8000440:	46c8      	mov	r8, r9
 8000442:	46a6      	mov	lr, r4
 8000444:	d356      	bcc.n	80004f4 <__udivmoddi4+0x2a4>
 8000446:	d053      	beq.n	80004f0 <__udivmoddi4+0x2a0>
 8000448:	b15e      	cbz	r6, 8000462 <__udivmoddi4+0x212>
 800044a:	ebb3 0208 	subs.w	r2, r3, r8
 800044e:	eb65 050e 	sbc.w	r5, r5, lr
 8000452:	fa05 f707 	lsl.w	r7, r5, r7
 8000456:	fa22 f301 	lsr.w	r3, r2, r1
 800045a:	40cd      	lsrs	r5, r1
 800045c:	431f      	orrs	r7, r3
 800045e:	e9c6 7500 	strd	r7, r5, [r6]
 8000462:	2100      	movs	r1, #0
 8000464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000468:	f1c2 0320 	rsb	r3, r2, #32
 800046c:	fa20 f103 	lsr.w	r1, r0, r3
 8000470:	fa0c fc02 	lsl.w	ip, ip, r2
 8000474:	fa25 f303 	lsr.w	r3, r5, r3
 8000478:	4095      	lsls	r5, r2
 800047a:	430d      	orrs	r5, r1
 800047c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000480:	fa1f fe8c 	uxth.w	lr, ip
 8000484:	fbb3 f1f7 	udiv	r1, r3, r7
 8000488:	fb07 3011 	mls	r0, r7, r1, r3
 800048c:	0c2b      	lsrs	r3, r5, #16
 800048e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8000492:	fb01 f00e 	mul.w	r0, r1, lr
 8000496:	4298      	cmp	r0, r3
 8000498:	fa04 f402 	lsl.w	r4, r4, r2
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x260>
 800049e:	eb1c 0303 	adds.w	r3, ip, r3
 80004a2:	f101 38ff 	add.w	r8, r1, #4294967295
 80004a6:	d22f      	bcs.n	8000508 <__udivmoddi4+0x2b8>
 80004a8:	4298      	cmp	r0, r3
 80004aa:	d92d      	bls.n	8000508 <__udivmoddi4+0x2b8>
 80004ac:	3902      	subs	r1, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	1a1b      	subs	r3, r3, r0
 80004b2:	b2ad      	uxth	r5, r5
 80004b4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004b8:	fb07 3310 	mls	r3, r7, r0, r3
 80004bc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004c0:	fb00 f30e 	mul.w	r3, r0, lr
 80004c4:	42ab      	cmp	r3, r5
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x28a>
 80004c8:	eb1c 0505 	adds.w	r5, ip, r5
 80004cc:	f100 38ff 	add.w	r8, r0, #4294967295
 80004d0:	d216      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004d2:	42ab      	cmp	r3, r5
 80004d4:	d914      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004d6:	3802      	subs	r0, #2
 80004d8:	4465      	add	r5, ip
 80004da:	1aed      	subs	r5, r5, r3
 80004dc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e0:	e738      	b.n	8000354 <__udivmoddi4+0x104>
 80004e2:	4631      	mov	r1, r6
 80004e4:	4630      	mov	r0, r6
 80004e6:	e707      	b.n	80002f8 <__udivmoddi4+0xa8>
 80004e8:	4686      	mov	lr, r0
 80004ea:	e6e5      	b.n	80002b8 <__udivmoddi4+0x68>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6fa      	b.n	80002e6 <__udivmoddi4+0x96>
 80004f0:	454b      	cmp	r3, r9
 80004f2:	d2a9      	bcs.n	8000448 <__udivmoddi4+0x1f8>
 80004f4:	ebb9 0802 	subs.w	r8, r9, r2
 80004f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004fc:	3801      	subs	r0, #1
 80004fe:	e7a3      	b.n	8000448 <__udivmoddi4+0x1f8>
 8000500:	4640      	mov	r0, r8
 8000502:	e7ea      	b.n	80004da <__udivmoddi4+0x28a>
 8000504:	4620      	mov	r0, r4
 8000506:	e794      	b.n	8000432 <__udivmoddi4+0x1e2>
 8000508:	4641      	mov	r1, r8
 800050a:	e7d1      	b.n	80004b0 <__udivmoddi4+0x260>
 800050c:	46d0      	mov	r8, sl
 800050e:	e77b      	b.n	8000408 <__udivmoddi4+0x1b8>
 8000510:	3b02      	subs	r3, #2
 8000512:	4465      	add	r5, ip
 8000514:	e732      	b.n	800037c <__udivmoddi4+0x12c>
 8000516:	4608      	mov	r0, r1
 8000518:	e709      	b.n	800032e <__udivmoddi4+0xde>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e742      	b.n	80003a6 <__udivmoddi4+0x156>

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000528:	bf00      	nop
 800052a:	46bd      	mov	sp, r7
 800052c:	bc80      	pop	{r7}
 800052e:	4770      	bx	lr

08000530 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000538:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800053c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000540:	f023 0218 	bic.w	r2, r3, #24
 8000544:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	4313      	orrs	r3, r2
 800054c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000550:	bf00      	nop
 8000552:	370c      	adds	r7, #12
 8000554:	46bd      	mov	sp, r7
 8000556:	bc80      	pop	{r7}
 8000558:	4770      	bx	lr

0800055a <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800055a:	b480      	push	{r7}
 800055c:	b085      	sub	sp, #20
 800055e:	af00      	add	r7, sp, #0
 8000560:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000562:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000566:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000568:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	4313      	orrs	r3, r2
 8000570:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000572:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000576:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	4013      	ands	r3, r2
 800057c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800057e:	68fb      	ldr	r3, [r7, #12]
}
 8000580:	bf00      	nop
 8000582:	3714      	adds	r7, #20
 8000584:	46bd      	mov	sp, r7
 8000586:	bc80      	pop	{r7}
 8000588:	4770      	bx	lr
	...

0800058c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000590:	f000 faf6 	bl	8000b80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000594:	f000 f828 	bl	80005e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
  //BSP_LED_Init(LED3);
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000598:	f000 f91a 	bl	80007d0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800059c:	f000 f8cc 	bl	8000738 <MX_USART2_UART_Init>
  MX_ADC_Init();
 80005a0:	f000 f87c 	bl	800069c <MX_ADC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Boot CPU2 */
  HAL_PWREx_ReleaseCore(PWR_CORE_CPU2);
 80005a4:	2001      	movs	r0, #1
 80005a6:	f001 f9b9 	bl	800191c <HAL_PWREx_ReleaseCore>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_ADC_Start(&hadc);
 80005aa:	480c      	ldr	r0, [pc, #48]	; (80005dc <main+0x50>)
 80005ac:	f000 fddc 	bl	8001168 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc, 100);
 80005b0:	2164      	movs	r1, #100	; 0x64
 80005b2:	480a      	ldr	r0, [pc, #40]	; (80005dc <main+0x50>)
 80005b4:	f000 fe1e 	bl	80011f4 <HAL_ADC_PollForConversion>
	  value = (int) HAL_ADC_GetValue(&hadc);
 80005b8:	4808      	ldr	r0, [pc, #32]	; (80005dc <main+0x50>)
 80005ba:	f000 feb2 	bl	8001322 <HAL_ADC_GetValue>
 80005be:	4603      	mov	r3, r0
 80005c0:	461a      	mov	r2, r3
 80005c2:	4b07      	ldr	r3, [pc, #28]	; (80005e0 <main+0x54>)
 80005c4:	601a      	str	r2, [r3, #0]
	  HAL_Delay(200);
 80005c6:	20c8      	movs	r0, #200	; 0xc8
 80005c8:	f000 fb50 	bl	8000c6c <HAL_Delay>
	  printf("ADC Value: %i\n\r", value);
 80005cc:	4b04      	ldr	r3, [pc, #16]	; (80005e0 <main+0x54>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4619      	mov	r1, r3
 80005d2:	4804      	ldr	r0, [pc, #16]	; (80005e4 <main+0x58>)
 80005d4:	f003 fb16 	bl	8003c04 <iprintf>
	  HAL_ADC_Start(&hadc);
 80005d8:	e7e7      	b.n	80005aa <main+0x1e>
 80005da:	bf00      	nop
 80005dc:	20000090 	.word	0x20000090
 80005e0:	20000004 	.word	0x20000004
 80005e4:	08004b28 	.word	0x08004b28

080005e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b09a      	sub	sp, #104	; 0x68
 80005ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ee:	f107 0320 	add.w	r3, r7, #32
 80005f2:	2248      	movs	r2, #72	; 0x48
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f003 fafc 	bl	8003bf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fc:	1d3b      	adds	r3, r7, #4
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	609a      	str	r2, [r3, #8]
 8000606:	60da      	str	r2, [r3, #12]
 8000608:	611a      	str	r2, [r3, #16]
 800060a:	615a      	str	r2, [r3, #20]
 800060c:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800060e:	f001 f95d 	bl	80018cc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000612:	2000      	movs	r0, #0
 8000614:	f7ff ff8c 	bl	8000530 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000618:	4b1f      	ldr	r3, [pc, #124]	; (8000698 <SystemClock_Config+0xb0>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000620:	4a1d      	ldr	r2, [pc, #116]	; (8000698 <SystemClock_Config+0xb0>)
 8000622:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000626:	6013      	str	r3, [r2, #0]
 8000628:	4b1b      	ldr	r3, [pc, #108]	; (8000698 <SystemClock_Config+0xb0>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000630:	603b      	str	r3, [r7, #0]
 8000632:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000634:	2324      	movs	r3, #36	; 0x24
 8000636:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000638:	2381      	movs	r3, #129	; 0x81
 800063a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800063c:	2301      	movs	r3, #1
 800063e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000640:	2300      	movs	r3, #0
 8000642:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000644:	2360      	movs	r3, #96	; 0x60
 8000646:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000648:	2300      	movs	r3, #0
 800064a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064c:	f107 0320 	add.w	r3, r7, #32
 8000650:	4618      	mov	r0, r3
 8000652:	f001 fc25 	bl	8001ea0 <HAL_RCC_OscConfig>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800065c:	f000 f8d8 	bl	8000810 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK2
 8000660:	236f      	movs	r3, #111	; 0x6f
 8000662:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000664:	2300      	movs	r3, #0
 8000666:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000668:	2300      	movs	r3, #0
 800066a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800066c:	2300      	movs	r3, #0
 800066e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000670:	2300      	movs	r3, #0
 8000672:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000674:	2300      	movs	r3, #0
 8000676:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000678:	2300      	movs	r3, #0
 800067a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800067c:	1d3b      	adds	r3, r7, #4
 800067e:	2100      	movs	r1, #0
 8000680:	4618      	mov	r0, r3
 8000682:	f001 ff8f 	bl	80025a4 <HAL_RCC_ClockConfig>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 800068c:	f000 f8c0 	bl	8000810 <Error_Handler>
  }
}
 8000690:	bf00      	nop
 8000692:	3768      	adds	r7, #104	; 0x68
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	58000400 	.word	0x58000400

0800069c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 80006a0:	4b23      	ldr	r3, [pc, #140]	; (8000730 <MX_ADC_Init+0x94>)
 80006a2:	4a24      	ldr	r2, [pc, #144]	; (8000734 <MX_ADC_Init+0x98>)
 80006a4:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80006a6:	4b22      	ldr	r3, [pc, #136]	; (8000730 <MX_ADC_Init+0x94>)
 80006a8:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 80006ac:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80006ae:	4b20      	ldr	r3, [pc, #128]	; (8000730 <MX_ADC_Init+0x94>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006b4:	4b1e      	ldr	r3, [pc, #120]	; (8000730 <MX_ADC_Init+0x94>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006ba:	4b1d      	ldr	r3, [pc, #116]	; (8000730 <MX_ADC_Init+0x94>)
 80006bc:	2200      	movs	r2, #0
 80006be:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006c0:	4b1b      	ldr	r3, [pc, #108]	; (8000730 <MX_ADC_Init+0x94>)
 80006c2:	2204      	movs	r2, #4
 80006c4:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80006c6:	4b1a      	ldr	r3, [pc, #104]	; (8000730 <MX_ADC_Init+0x94>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80006cc:	4b18      	ldr	r3, [pc, #96]	; (8000730 <MX_ADC_Init+0x94>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80006d2:	4b17      	ldr	r3, [pc, #92]	; (8000730 <MX_ADC_Init+0x94>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 80006d8:	4b15      	ldr	r3, [pc, #84]	; (8000730 <MX_ADC_Init+0x94>)
 80006da:	2201      	movs	r2, #1
 80006dc:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 80006de:	4b14      	ldr	r3, [pc, #80]	; (8000730 <MX_ADC_Init+0x94>)
 80006e0:	2201      	movs	r2, #1
 80006e2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006e6:	4b12      	ldr	r3, [pc, #72]	; (8000730 <MX_ADC_Init+0x94>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006ec:	4b10      	ldr	r3, [pc, #64]	; (8000730 <MX_ADC_Init+0x94>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 80006f2:	4b0f      	ldr	r3, [pc, #60]	; (8000730 <MX_ADC_Init+0x94>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006fa:	4b0d      	ldr	r3, [pc, #52]	; (8000730 <MX_ADC_Init+0x94>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000700:	4b0b      	ldr	r3, [pc, #44]	; (8000730 <MX_ADC_Init+0x94>)
 8000702:	2200      	movs	r2, #0
 8000704:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000706:	4b0a      	ldr	r3, [pc, #40]	; (8000730 <MX_ADC_Init+0x94>)
 8000708:	2200      	movs	r2, #0
 800070a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 800070c:	4b08      	ldr	r3, [pc, #32]	; (8000730 <MX_ADC_Init+0x94>)
 800070e:	2200      	movs	r2, #0
 8000710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000714:	4b06      	ldr	r3, [pc, #24]	; (8000730 <MX_ADC_Init+0x94>)
 8000716:	2200      	movs	r2, #0
 8000718:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800071a:	4805      	ldr	r0, [pc, #20]	; (8000730 <MX_ADC_Init+0x94>)
 800071c:	f000 fb90 	bl	8000e40 <HAL_ADC_Init>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_ADC_Init+0x8e>
  {
    Error_Handler();
 8000726:	f000 f873 	bl	8000810 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	20000090 	.word	0x20000090
 8000734:	40012400 	.word	0x40012400

08000738 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800073c:	4b22      	ldr	r3, [pc, #136]	; (80007c8 <MX_USART2_UART_Init+0x90>)
 800073e:	4a23      	ldr	r2, [pc, #140]	; (80007cc <MX_USART2_UART_Init+0x94>)
 8000740:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000742:	4b21      	ldr	r3, [pc, #132]	; (80007c8 <MX_USART2_UART_Init+0x90>)
 8000744:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000748:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800074a:	4b1f      	ldr	r3, [pc, #124]	; (80007c8 <MX_USART2_UART_Init+0x90>)
 800074c:	2200      	movs	r2, #0
 800074e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000750:	4b1d      	ldr	r3, [pc, #116]	; (80007c8 <MX_USART2_UART_Init+0x90>)
 8000752:	2200      	movs	r2, #0
 8000754:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000756:	4b1c      	ldr	r3, [pc, #112]	; (80007c8 <MX_USART2_UART_Init+0x90>)
 8000758:	2200      	movs	r2, #0
 800075a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800075c:	4b1a      	ldr	r3, [pc, #104]	; (80007c8 <MX_USART2_UART_Init+0x90>)
 800075e:	220c      	movs	r2, #12
 8000760:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000762:	4b19      	ldr	r3, [pc, #100]	; (80007c8 <MX_USART2_UART_Init+0x90>)
 8000764:	2200      	movs	r2, #0
 8000766:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000768:	4b17      	ldr	r3, [pc, #92]	; (80007c8 <MX_USART2_UART_Init+0x90>)
 800076a:	2200      	movs	r2, #0
 800076c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800076e:	4b16      	ldr	r3, [pc, #88]	; (80007c8 <MX_USART2_UART_Init+0x90>)
 8000770:	2200      	movs	r2, #0
 8000772:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000774:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <MX_USART2_UART_Init+0x90>)
 8000776:	2200      	movs	r2, #0
 8000778:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800077a:	4b13      	ldr	r3, [pc, #76]	; (80007c8 <MX_USART2_UART_Init+0x90>)
 800077c:	2200      	movs	r2, #0
 800077e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000780:	4811      	ldr	r0, [pc, #68]	; (80007c8 <MX_USART2_UART_Init+0x90>)
 8000782:	f002 fc0a 	bl	8002f9a <HAL_UART_Init>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800078c:	f000 f840 	bl	8000810 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000790:	2100      	movs	r1, #0
 8000792:	480d      	ldr	r0, [pc, #52]	; (80007c8 <MX_USART2_UART_Init+0x90>)
 8000794:	f003 f93b 	bl	8003a0e <HAL_UARTEx_SetTxFifoThreshold>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800079e:	f000 f837 	bl	8000810 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007a2:	2100      	movs	r1, #0
 80007a4:	4808      	ldr	r0, [pc, #32]	; (80007c8 <MX_USART2_UART_Init+0x90>)
 80007a6:	f003 f970 	bl	8003a8a <HAL_UARTEx_SetRxFifoThreshold>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80007b0:	f000 f82e 	bl	8000810 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80007b4:	4804      	ldr	r0, [pc, #16]	; (80007c8 <MX_USART2_UART_Init+0x90>)
 80007b6:	f003 f8f2 	bl	800399e <HAL_UARTEx_DisableFifoMode>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80007c0:	f000 f826 	bl	8000810 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007c4:	bf00      	nop
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	200000f4 	.word	0x200000f4
 80007cc:	40004400 	.word	0x40004400

080007d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d4:	2001      	movs	r0, #1
 80007d6:	f7ff fec0 	bl	800055a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007da:	2004      	movs	r0, #4
 80007dc:	f7ff febd 	bl	800055a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e0:	2002      	movs	r0, #2
 80007e2:	f7ff feba 	bl	800055a <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
	...

080007ec <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80007f4:	1d39      	adds	r1, r7, #4
 80007f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007fa:	2201      	movs	r2, #1
 80007fc:	4803      	ldr	r0, [pc, #12]	; (800080c <__io_putchar+0x20>)
 80007fe:	f002 fc1c 	bl	800303a <HAL_UART_Transmit>

  return ch;
 8000802:	687b      	ldr	r3, [r7, #4]
}
 8000804:	4618      	mov	r0, r3
 8000806:	3708      	adds	r7, #8
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	200000f4 	.word	0x200000f4

08000810 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000814:	b672      	cpsid	i
}
 8000816:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  //BSP_LED_On(LED3);
  while (1)
 8000818:	e7fe      	b.n	8000818 <Error_Handler+0x8>

0800081a <LL_AHB2_GRP1_EnableClock>:
{
 800081a:	b480      	push	{r7}
 800081c:	b085      	sub	sp, #20
 800081e:	af00      	add	r7, sp, #0
 8000820:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000822:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000826:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000828:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	4313      	orrs	r3, r2
 8000830:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000832:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000836:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	4013      	ands	r3, r2
 800083c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800083e:	68fb      	ldr	r3, [r7, #12]
}
 8000840:	bf00      	nop
 8000842:	3714      	adds	r7, #20
 8000844:	46bd      	mov	sp, r7
 8000846:	bc80      	pop	{r7}
 8000848:	4770      	bx	lr

0800084a <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800084a:	b480      	push	{r7}
 800084c:	b085      	sub	sp, #20
 800084e:	af00      	add	r7, sp, #0
 8000850:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000852:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000856:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000858:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	4313      	orrs	r3, r2
 8000860:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000862:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000866:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	4013      	ands	r3, r2
 800086c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800086e:	68fb      	ldr	r3, [r7, #12]
}
 8000870:	bf00      	nop
 8000872:	3714      	adds	r7, #20
 8000874:	46bd      	mov	sp, r7
 8000876:	bc80      	pop	{r7}
 8000878:	4770      	bx	lr

0800087a <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800087a:	b480      	push	{r7}
 800087c:	b085      	sub	sp, #20
 800087e:	af00      	add	r7, sp, #0
 8000880:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000882:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000886:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000888:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	4313      	orrs	r3, r2
 8000890:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000892:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000896:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	4013      	ands	r3, r2
 800089c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800089e:	68fb      	ldr	r3, [r7, #12]
}
 80008a0:	bf00      	nop
 80008a2:	3714      	adds	r7, #20
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bc80      	pop	{r7}
 80008a8:	4770      	bx	lr

080008aa <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008aa:	b480      	push	{r7}
 80008ac:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ae:	bf00      	nop
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bc80      	pop	{r7}
 80008b4:	4770      	bx	lr
	...

080008b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b088      	sub	sp, #32
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c0:	f107 030c 	add.w	r3, r7, #12
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	605a      	str	r2, [r3, #4]
 80008ca:	609a      	str	r2, [r3, #8]
 80008cc:	60da      	str	r2, [r3, #12]
 80008ce:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a0d      	ldr	r2, [pc, #52]	; (800090c <HAL_ADC_MspInit+0x54>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d113      	bne.n	8000902 <HAL_ADC_MspInit+0x4a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80008da:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008de:	f7ff ffcc 	bl	800087a <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e2:	2002      	movs	r0, #2
 80008e4:	f7ff ff99 	bl	800081a <LL_AHB2_GRP1_EnableClock>
    /**ADC GPIO Configuration
    PB13     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80008e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008ec:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008ee:	2303      	movs	r3, #3
 80008f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f6:	f107 030c 	add.w	r3, r7, #12
 80008fa:	4619      	mov	r1, r3
 80008fc:	4804      	ldr	r0, [pc, #16]	; (8000910 <HAL_ADC_MspInit+0x58>)
 80008fe:	f000 fe85 	bl	800160c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }

}
 8000902:	bf00      	nop
 8000904:	3720      	adds	r7, #32
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40012400 	.word	0x40012400
 8000910:	48000400 	.word	0x48000400

08000914 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b096      	sub	sp, #88	; 0x58
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
 8000924:	605a      	str	r2, [r3, #4]
 8000926:	609a      	str	r2, [r3, #8]
 8000928:	60da      	str	r2, [r3, #12]
 800092a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800092c:	f107 030c 	add.w	r3, r7, #12
 8000930:	2238      	movs	r2, #56	; 0x38
 8000932:	2100      	movs	r1, #0
 8000934:	4618      	mov	r0, r3
 8000936:	f003 f95d 	bl	8003bf4 <memset>
  if(huart->Instance==USART2)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4a17      	ldr	r2, [pc, #92]	; (800099c <HAL_UART_MspInit+0x88>)
 8000940:	4293      	cmp	r3, r2
 8000942:	d126      	bne.n	8000992 <HAL_UART_MspInit+0x7e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000944:	2302      	movs	r3, #2
 8000946:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000948:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 800094c:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800094e:	f107 030c 	add.w	r3, r7, #12
 8000952:	4618      	mov	r0, r3
 8000954:	f002 f9e6 	bl	8002d24 <HAL_RCCEx_PeriphCLKConfig>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800095e:	f7ff ff57 	bl	8000810 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000962:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000966:	f7ff ff70 	bl	800084a <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800096a:	2001      	movs	r0, #1
 800096c:	f7ff ff55 	bl	800081a <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8000970:	230c      	movs	r3, #12
 8000972:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000974:	2302      	movs	r3, #2
 8000976:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097c:	2300      	movs	r3, #0
 800097e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000980:	2307      	movs	r3, #7
 8000982:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000984:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000988:	4619      	mov	r1, r3
 800098a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800098e:	f000 fe3d 	bl	800160c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000992:	bf00      	nop
 8000994:	3758      	adds	r7, #88	; 0x58
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40004400 	.word	0x40004400

080009a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009a4:	e7fe      	b.n	80009a4 <NMI_Handler+0x4>

080009a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009a6:	b480      	push	{r7}
 80009a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009aa:	e7fe      	b.n	80009aa <HardFault_Handler+0x4>

080009ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <MemManage_Handler+0x4>

080009b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009b6:	e7fe      	b.n	80009b6 <BusFault_Handler+0x4>

080009b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009bc:	e7fe      	b.n	80009bc <UsageFault_Handler+0x4>

080009be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009c2:	bf00      	nop
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bc80      	pop	{r7}
 80009c8:	4770      	bx	lr

080009ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bc80      	pop	{r7}
 80009d4:	4770      	bx	lr

080009d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009da:	bf00      	nop
 80009dc:	46bd      	mov	sp, r7
 80009de:	bc80      	pop	{r7}
 80009e0:	4770      	bx	lr

080009e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009e2:	b580      	push	{r7, lr}
 80009e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009e6:	f000 f925 	bl	8000c34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}

080009ee <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009ee:	b580      	push	{r7, lr}
 80009f0:	b086      	sub	sp, #24
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	60f8      	str	r0, [r7, #12]
 80009f6:	60b9      	str	r1, [r7, #8]
 80009f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009fa:	2300      	movs	r3, #0
 80009fc:	617b      	str	r3, [r7, #20]
 80009fe:	e00a      	b.n	8000a16 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a00:	f3af 8000 	nop.w
 8000a04:	4601      	mov	r1, r0
 8000a06:	68bb      	ldr	r3, [r7, #8]
 8000a08:	1c5a      	adds	r2, r3, #1
 8000a0a:	60ba      	str	r2, [r7, #8]
 8000a0c:	b2ca      	uxtb	r2, r1
 8000a0e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	3301      	adds	r3, #1
 8000a14:	617b      	str	r3, [r7, #20]
 8000a16:	697a      	ldr	r2, [r7, #20]
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	429a      	cmp	r2, r3
 8000a1c:	dbf0      	blt.n	8000a00 <_read+0x12>
  }

  return len;
 8000a1e:	687b      	ldr	r3, [r7, #4]
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	3718      	adds	r7, #24
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b086      	sub	sp, #24
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	60f8      	str	r0, [r7, #12]
 8000a30:	60b9      	str	r1, [r7, #8]
 8000a32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a34:	2300      	movs	r3, #0
 8000a36:	617b      	str	r3, [r7, #20]
 8000a38:	e009      	b.n	8000a4e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a3a:	68bb      	ldr	r3, [r7, #8]
 8000a3c:	1c5a      	adds	r2, r3, #1
 8000a3e:	60ba      	str	r2, [r7, #8]
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	4618      	mov	r0, r3
 8000a44:	f7ff fed2 	bl	80007ec <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	3301      	adds	r3, #1
 8000a4c:	617b      	str	r3, [r7, #20]
 8000a4e:	697a      	ldr	r2, [r7, #20]
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	429a      	cmp	r2, r3
 8000a54:	dbf1      	blt.n	8000a3a <_write+0x12>
  }
  return len;
 8000a56:	687b      	ldr	r3, [r7, #4]
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	3718      	adds	r7, #24
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <_close>:

int _close(int file)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bc80      	pop	{r7}
 8000a74:	4770      	bx	lr

08000a76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a76:	b480      	push	{r7}
 8000a78:	b083      	sub	sp, #12
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	6078      	str	r0, [r7, #4]
 8000a7e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a86:	605a      	str	r2, [r3, #4]
  return 0;
 8000a88:	2300      	movs	r3, #0
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	370c      	adds	r7, #12
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bc80      	pop	{r7}
 8000a92:	4770      	bx	lr

08000a94 <_isatty>:

int _isatty(int file)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a9c:	2301      	movs	r3, #1
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	370c      	adds	r7, #12
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bc80      	pop	{r7}
 8000aa6:	4770      	bx	lr

08000aa8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b085      	sub	sp, #20
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	60f8      	str	r0, [r7, #12]
 8000ab0:	60b9      	str	r1, [r7, #8]
 8000ab2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ab4:	2300      	movs	r3, #0
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3714      	adds	r7, #20
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bc80      	pop	{r7}
 8000abe:	4770      	bx	lr

08000ac0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b086      	sub	sp, #24
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ac8:	4a14      	ldr	r2, [pc, #80]	; (8000b1c <_sbrk+0x5c>)
 8000aca:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <_sbrk+0x60>)
 8000acc:	1ad3      	subs	r3, r2, r3
 8000ace:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ad4:	4b13      	ldr	r3, [pc, #76]	; (8000b24 <_sbrk+0x64>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d102      	bne.n	8000ae2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000adc:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <_sbrk+0x64>)
 8000ade:	4a12      	ldr	r2, [pc, #72]	; (8000b28 <_sbrk+0x68>)
 8000ae0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ae2:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <_sbrk+0x64>)
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4413      	add	r3, r2
 8000aea:	693a      	ldr	r2, [r7, #16]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d207      	bcs.n	8000b00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000af0:	f003 f856 	bl	8003ba0 <__errno>
 8000af4:	4603      	mov	r3, r0
 8000af6:	220c      	movs	r2, #12
 8000af8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000afa:	f04f 33ff 	mov.w	r3, #4294967295
 8000afe:	e009      	b.n	8000b14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b00:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <_sbrk+0x64>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b06:	4b07      	ldr	r3, [pc, #28]	; (8000b24 <_sbrk+0x64>)
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	4a05      	ldr	r2, [pc, #20]	; (8000b24 <_sbrk+0x64>)
 8000b10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b12:	68fb      	ldr	r3, [r7, #12]
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	3718      	adds	r7, #24
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	20008000 	.word	0x20008000
 8000b20:	00000400 	.word	0x00000400
 8000b24:	20000188 	.word	0x20000188
 8000b28:	200001a0 	.word	0x200001a0

08000b2c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b2c:	480d      	ldr	r0, [pc, #52]	; (8000b64 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b2e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b30:	f7ff fcf8 	bl	8000524 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b34:	480c      	ldr	r0, [pc, #48]	; (8000b68 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b36:	490d      	ldr	r1, [pc, #52]	; (8000b6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b38:	4a0d      	ldr	r2, [pc, #52]	; (8000b70 <LoopForever+0xe>)
  movs r3, #0
 8000b3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b3c:	e002      	b.n	8000b44 <LoopCopyDataInit>

08000b3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b42:	3304      	adds	r3, #4

08000b44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b48:	d3f9      	bcc.n	8000b3e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b4a:	4a0a      	ldr	r2, [pc, #40]	; (8000b74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b4c:	4c0a      	ldr	r4, [pc, #40]	; (8000b78 <LoopForever+0x16>)
  movs r3, #0
 8000b4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b50:	e001      	b.n	8000b56 <LoopFillZerobss>

08000b52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b54:	3204      	adds	r2, #4

08000b56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b58:	d3fb      	bcc.n	8000b52 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b5a:	f003 f827 	bl	8003bac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b5e:	f7ff fd15 	bl	800058c <main>

08000b62 <LoopForever>:

LoopForever:
    b LoopForever
 8000b62:	e7fe      	b.n	8000b62 <LoopForever>
  ldr   r0, =_estack
 8000b64:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000b68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b6c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000b70:	08004cc4 	.word	0x08004cc4
  ldr r2, =_sbss
 8000b74:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000b78:	200001a0 	.word	0x200001a0

08000b7c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b7c:	e7fe      	b.n	8000b7c <ADC_IRQHandler>
	...

08000b80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b86:	2300      	movs	r3, #0
 8000b88:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b8a:	2003      	movs	r0, #3
 8000b8c:	f000 fd0c 	bl	80015a8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000b90:	f001 feea 	bl	8002968 <HAL_RCC_GetHCLKFreq>
 8000b94:	4603      	mov	r3, r0
 8000b96:	4a09      	ldr	r2, [pc, #36]	; (8000bbc <HAL_Init+0x3c>)
 8000b98:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b9a:	2000      	movs	r0, #0
 8000b9c:	f000 f810 	bl	8000bc0 <HAL_InitTick>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d002      	beq.n	8000bac <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	71fb      	strb	r3, [r7, #7]
 8000baa:	e001      	b.n	8000bb0 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bac:	f7ff fe7d 	bl	80008aa <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bb0:	79fb      	ldrb	r3, [r7, #7]
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	20000000 	.word	0x20000000

08000bc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000bcc:	4b17      	ldr	r3, [pc, #92]	; (8000c2c <HAL_InitTick+0x6c>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d024      	beq.n	8000c1e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000bd4:	f001 fec8 	bl	8002968 <HAL_RCC_GetHCLKFreq>
 8000bd8:	4602      	mov	r2, r0
 8000bda:	4b14      	ldr	r3, [pc, #80]	; (8000c2c <HAL_InitTick+0x6c>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	4619      	mov	r1, r3
 8000be0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000be4:	fbb3 f3f1 	udiv	r3, r3, r1
 8000be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bec:	4618      	mov	r0, r3
 8000bee:	f000 fd00 	bl	80015f2 <HAL_SYSTICK_Config>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d10f      	bne.n	8000c18 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2b0f      	cmp	r3, #15
 8000bfc:	d809      	bhi.n	8000c12 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	6879      	ldr	r1, [r7, #4]
 8000c02:	f04f 30ff 	mov.w	r0, #4294967295
 8000c06:	f000 fcda 	bl	80015be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c0a:	4a09      	ldr	r2, [pc, #36]	; (8000c30 <HAL_InitTick+0x70>)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	6013      	str	r3, [r2, #0]
 8000c10:	e007      	b.n	8000c22 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000c12:	2301      	movs	r3, #1
 8000c14:	73fb      	strb	r3, [r7, #15]
 8000c16:	e004      	b.n	8000c22 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	73fb      	strb	r3, [r7, #15]
 8000c1c:	e001      	b.n	8000c22 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c22:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	3710      	adds	r7, #16
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	2000000c 	.word	0x2000000c
 8000c30:	20000008 	.word	0x20000008

08000c34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c38:	4b05      	ldr	r3, [pc, #20]	; (8000c50 <HAL_IncTick+0x1c>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	4b05      	ldr	r3, [pc, #20]	; (8000c54 <HAL_IncTick+0x20>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4413      	add	r3, r2
 8000c44:	4a03      	ldr	r2, [pc, #12]	; (8000c54 <HAL_IncTick+0x20>)
 8000c46:	6013      	str	r3, [r2, #0]
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bc80      	pop	{r7}
 8000c4e:	4770      	bx	lr
 8000c50:	2000000c 	.word	0x2000000c
 8000c54:	2000018c 	.word	0x2000018c

08000c58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c5c:	4b02      	ldr	r3, [pc, #8]	; (8000c68 <HAL_GetTick+0x10>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bc80      	pop	{r7}
 8000c66:	4770      	bx	lr
 8000c68:	2000018c 	.word	0x2000018c

08000c6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c74:	f7ff fff0 	bl	8000c58 <HAL_GetTick>
 8000c78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c84:	d005      	beq.n	8000c92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c86:	4b0a      	ldr	r3, [pc, #40]	; (8000cb0 <HAL_Delay+0x44>)
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	4413      	add	r3, r2
 8000c90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c92:	bf00      	nop
 8000c94:	f7ff ffe0 	bl	8000c58 <HAL_GetTick>
 8000c98:	4602      	mov	r2, r0
 8000c9a:	68bb      	ldr	r3, [r7, #8]
 8000c9c:	1ad3      	subs	r3, r2, r3
 8000c9e:	68fa      	ldr	r2, [r7, #12]
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	d8f7      	bhi.n	8000c94 <HAL_Delay+0x28>
  {
  }
}
 8000ca4:	bf00      	nop
 8000ca6:	bf00      	nop
 8000ca8:	3710      	adds	r7, #16
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	2000000c 	.word	0x2000000c

08000cb4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	370c      	adds	r7, #12
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bc80      	pop	{r7}
 8000ccc:	4770      	bx	lr

08000cce <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	b085      	sub	sp, #20
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	60f8      	str	r0, [r7, #12]
 8000cd6:	60b9      	str	r1, [r7, #8]
 8000cd8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	695a      	ldr	r2, [r3, #20]
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	f003 0304 	and.w	r3, r3, #4
 8000ce4:	2107      	movs	r1, #7
 8000ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cea:	43db      	mvns	r3, r3
 8000cec:	401a      	ands	r2, r3
 8000cee:	68bb      	ldr	r3, [r7, #8]
 8000cf0:	f003 0304 	and.w	r3, r3, #4
 8000cf4:	6879      	ldr	r1, [r7, #4]
 8000cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfa:	431a      	orrs	r2, r3
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000d00:	bf00      	nop
 8000d02:	3714      	adds	r7, #20
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bc80      	pop	{r7}
 8000d08:	4770      	bx	lr

08000d0a <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	b083      	sub	sp, #12
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
 8000d12:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	695a      	ldr	r2, [r3, #20]
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	f003 0304 	and.w	r3, r3, #4
 8000d1e:	2107      	movs	r1, #7
 8000d20:	fa01 f303 	lsl.w	r3, r1, r3
 8000d24:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000d2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	370c      	adds	r7, #12
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bc80      	pop	{r7}
 8000d38:	4770      	bx	lr

08000d3a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	b083      	sub	sp, #12
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	68db      	ldr	r3, [r3, #12]
 8000d46:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d101      	bne.n	8000d52 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000d4e:	2301      	movs	r3, #1
 8000d50:	e000      	b.n	8000d54 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000d52:	2300      	movs	r3, #0
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	370c      	adds	r7, #12
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bc80      	pop	{r7}
 8000d5c:	4770      	bx	lr

08000d5e <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	b083      	sub	sp, #12
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	689b      	ldr	r3, [r3, #8]
 8000d6a:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000d6e:	f023 0317 	bic.w	r3, r3, #23
 8000d72:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000d7a:	bf00      	nop
 8000d7c:	370c      	adds	r7, #12
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bc80      	pop	{r7}
 8000d82:	4770      	bx	lr

08000d84 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	689b      	ldr	r3, [r3, #8]
 8000d90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000d98:	d101      	bne.n	8000d9e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e000      	b.n	8000da0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000d9e:	2300      	movs	r3, #0
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bc80      	pop	{r7}
 8000da8:	4770      	bx	lr

08000daa <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000daa:	b480      	push	{r7}
 8000dac:	b083      	sub	sp, #12
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	689b      	ldr	r3, [r3, #8]
 8000db6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000dba:	f023 0317 	bic.w	r3, r3, #23
 8000dbe:	f043 0201 	orr.w	r2, r3, #1
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000dc6:	bf00      	nop
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bc80      	pop	{r7}
 8000dce:	4770      	bx	lr

08000dd0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	689b      	ldr	r3, [r3, #8]
 8000ddc:	f003 0301 	and.w	r3, r3, #1
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d101      	bne.n	8000de8 <LL_ADC_IsEnabled+0x18>
 8000de4:	2301      	movs	r3, #1
 8000de6:	e000      	b.n	8000dea <LL_ADC_IsEnabled+0x1a>
 8000de8:	2300      	movs	r3, #0
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bc80      	pop	{r7}
 8000df2:	4770      	bx	lr

08000df4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	689b      	ldr	r3, [r3, #8]
 8000e00:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000e04:	f023 0317 	bic.w	r3, r3, #23
 8000e08:	f043 0204 	orr.w	r2, r3, #4
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000e10:	bf00      	nop
 8000e12:	370c      	adds	r7, #12
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bc80      	pop	{r7}
 8000e18:	4770      	bx	lr

08000e1a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	b083      	sub	sp, #12
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	689b      	ldr	r3, [r3, #8]
 8000e26:	f003 0304 	and.w	r3, r3, #4
 8000e2a:	2b04      	cmp	r3, #4
 8000e2c:	d101      	bne.n	8000e32 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e000      	b.n	8000e34 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000e32:	2300      	movs	r3, #0
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bc80      	pop	{r7}
 8000e3c:	4770      	bx	lr
	...

08000e40 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b088      	sub	sp, #32
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d101      	bne.n	8000e62 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e17e      	b.n	8001160 <HAL_ADC_Init+0x320>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	691b      	ldr	r3, [r3, #16]
 8000e66:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d109      	bne.n	8000e84 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e70:	6878      	ldr	r0, [r7, #4]
 8000e72:	f7ff fd21 	bl	80008b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2200      	movs	r2, #0
 8000e7a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2200      	movs	r2, #0
 8000e80:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff ff7b 	bl	8000d84 <LL_ADC_IsInternalRegulatorEnabled>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d115      	bne.n	8000ec0 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff ff60 	bl	8000d5e <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000e9e:	4b9e      	ldr	r3, [pc, #632]	; (8001118 <HAL_ADC_Init+0x2d8>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	099b      	lsrs	r3, r3, #6
 8000ea4:	4a9d      	ldr	r2, [pc, #628]	; (800111c <HAL_ADC_Init+0x2dc>)
 8000ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8000eaa:	099b      	lsrs	r3, r3, #6
 8000eac:	3301      	adds	r3, #1
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000eb2:	e002      	b.n	8000eba <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	3b01      	subs	r3, #1
 8000eb8:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d1f9      	bne.n	8000eb4 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff ff5d 	bl	8000d84 <LL_ADC_IsInternalRegulatorEnabled>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d10d      	bne.n	8000eec <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ed4:	f043 0210 	orr.w	r2, r3, #16
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ee0:	f043 0201 	orr.w	r2, r3, #1
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff ff92 	bl	8000e1a <LL_ADC_REG_IsConversionOngoing>
 8000ef6:	6138      	str	r0, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000efc:	f003 0310 	and.w	r3, r3, #16
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	f040 8124 	bne.w	800114e <HAL_ADC_Init+0x30e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	f040 8120 	bne.w	800114e <HAL_ADC_Init+0x30e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f12:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000f16:	f043 0202 	orr.w	r2, r3, #2
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff ff54 	bl	8000dd0 <LL_ADC_IsEnabled>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	f040 80a7 	bne.w	800107e <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	7e1b      	ldrb	r3, [r3, #24]
 8000f38:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000f3a:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	7e5b      	ldrb	r3, [r3, #25]
 8000f40:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000f42:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	7e9b      	ldrb	r3, [r3, #26]
 8000f48:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000f4a:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000f4c:	687a      	ldr	r2, [r7, #4]
 8000f4e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000f50:	2a00      	cmp	r2, #0
 8000f52:	d002      	beq.n	8000f5a <HAL_ADC_Init+0x11a>
 8000f54:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f58:	e000      	b.n	8000f5c <HAL_ADC_Init+0x11c>
 8000f5a:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000f5c:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000f62:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	691b      	ldr	r3, [r3, #16]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	da04      	bge.n	8000f76 <HAL_ADC_Init+0x136>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	691b      	ldr	r3, [r3, #16]
 8000f70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000f74:	e001      	b.n	8000f7a <HAL_ADC_Init+0x13a>
 8000f76:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 8000f7a:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000f82:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000f84:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d114      	bne.n	8000fc0 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	7e9b      	ldrb	r3, [r3, #26]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d104      	bne.n	8000fa8 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000f9e:	69bb      	ldr	r3, [r7, #24]
 8000fa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fa4:	61bb      	str	r3, [r7, #24]
 8000fa6:	e00b      	b.n	8000fc0 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fac:	f043 0220 	orr.w	r2, r3, #32
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fb8:	f043 0201 	orr.w	r2, r3, #1
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d009      	beq.n	8000fdc <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fcc:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	68db      	ldr	r3, [r3, #12]
 8000fe2:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 8000fe6:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	6812      	ldr	r2, [r2, #0]
 8000fee:	69b9      	ldr	r1, [r7, #24]
 8000ff0:	430b      	orrs	r3, r1
 8000ff2:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001000:	4313      	orrs	r3, r2
 8001002:	697a      	ldr	r2, [r7, #20]
 8001004:	4313      	orrs	r3, r2
 8001006:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800100e:	2b01      	cmp	r3, #1
 8001010:	d111      	bne.n	8001036 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800101e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8001024:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800102a:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	4313      	orrs	r3, r2
 8001030:	f043 0301 	orr.w	r3, r3, #1
 8001034:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	691a      	ldr	r2, [r3, #16]
 800103c:	4b38      	ldr	r3, [pc, #224]	; (8001120 <HAL_ADC_Init+0x2e0>)
 800103e:	4013      	ands	r3, r2
 8001040:	687a      	ldr	r2, [r7, #4]
 8001042:	6812      	ldr	r2, [r2, #0]
 8001044:	6979      	ldr	r1, [r7, #20]
 8001046:	430b      	orrs	r3, r1
 8001048:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001052:	d014      	beq.n	800107e <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001058:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800105c:	d00f      	beq.n	800107e <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001062:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001066:	d00a      	beq.n	800107e <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8001068:	4b2e      	ldr	r3, [pc, #184]	; (8001124 <HAL_ADC_Init+0x2e4>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001078:	492a      	ldr	r1, [pc, #168]	; (8001124 <HAL_ADC_Init+0x2e4>)
 800107a:	4313      	orrs	r3, r2
 800107c:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6818      	ldr	r0, [r3, #0]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001086:	461a      	mov	r2, r3
 8001088:	2100      	movs	r1, #0
 800108a:	f7ff fe20 	bl	8000cce <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6818      	ldr	r0, [r3, #0]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001096:	461a      	mov	r2, r3
 8001098:	4923      	ldr	r1, [pc, #140]	; (8001128 <HAL_ADC_Init+0x2e8>)
 800109a:	f7ff fe18 	bl	8000cce <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	691b      	ldr	r3, [r3, #16]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d108      	bne.n	80010b8 <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f062 020f 	orn	r2, r2, #15
 80010b4:	629a      	str	r2, [r3, #40]	; 0x28
 80010b6:	e017      	b.n	80010e8 <HAL_ADC_Init+0x2a8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	691b      	ldr	r3, [r3, #16]
 80010bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80010c0:	d112      	bne.n	80010e8 <HAL_ADC_Init+0x2a8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	69db      	ldr	r3, [r3, #28]
 80010cc:	3b01      	subs	r3, #1
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	f003 031c 	and.w	r3, r3, #28
 80010d4:	f06f 020f 	mvn.w	r2, #15
 80010d8:	fa02 f103 	lsl.w	r1, r2, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	430a      	orrs	r2, r1
 80010e6:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2100      	movs	r1, #0
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff fe0b 	bl	8000d0a <LL_ADC_GetSamplingTimeCommonChannels>
 80010f4:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80010fa:	429a      	cmp	r2, r3
 80010fc:	d116      	bne.n	800112c <HAL_ADC_Init+0x2ec>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2200      	movs	r2, #0
 8001102:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001108:	f023 0303 	bic.w	r3, r3, #3
 800110c:	f043 0201 	orr.w	r2, r3, #1
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001114:	e023      	b.n	800115e <HAL_ADC_Init+0x31e>
 8001116:	bf00      	nop
 8001118:	20000000 	.word	0x20000000
 800111c:	053e2d63 	.word	0x053e2d63
 8001120:	1ffffc02 	.word	0x1ffffc02
 8001124:	40012708 	.word	0x40012708
 8001128:	03ffff04 	.word	0x03ffff04
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001130:	f023 0312 	bic.w	r3, r3, #18
 8001134:	f043 0210 	orr.w	r2, r3, #16
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001140:	f043 0201 	orr.w	r2, r3, #1
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8001148:	2301      	movs	r3, #1
 800114a:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800114c:	e007      	b.n	800115e <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001152:	f043 0210 	orr.w	r2, r3, #16
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 800115e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001160:	4618      	mov	r0, r3
 8001162:	3720      	adds	r7, #32
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}

08001168 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff fe50 	bl	8000e1a <LL_ADC_REG_IsConversionOngoing>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d132      	bne.n	80011e6 <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001186:	2b01      	cmp	r3, #1
 8001188:	d101      	bne.n	800118e <HAL_ADC_Start+0x26>
 800118a:	2302      	movs	r3, #2
 800118c:	e02e      	b.n	80011ec <HAL_ADC_Start+0x84>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2201      	movs	r2, #1
 8001192:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f000 f8d0 	bl	800133c <ADC_Enable>
 800119c:	4603      	mov	r3, r0
 800119e:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80011a0:	7bfb      	ldrb	r3, [r7, #15]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d11a      	bne.n	80011dc <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011aa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80011ae:	f023 0301 	bic.w	r3, r3, #1
 80011b2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2200      	movs	r2, #0
 80011be:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	221c      	movs	r2, #28
 80011c6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2200      	movs	r2, #0
 80011cc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff fe0d 	bl	8000df4 <LL_ADC_REG_StartConversion>
 80011da:	e006      	b.n	80011ea <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2200      	movs	r2, #0
 80011e0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80011e4:	e001      	b.n	80011ea <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80011e6:	2302      	movs	r3, #2
 80011e8:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 80011ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3710      	adds	r7, #16
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	695b      	ldr	r3, [r3, #20]
 8001202:	2b08      	cmp	r3, #8
 8001204:	d102      	bne.n	800120c <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8001206:	2308      	movs	r3, #8
 8001208:	60fb      	str	r3, [r7, #12]
 800120a:	e010      	b.n	800122e <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	68db      	ldr	r3, [r3, #12]
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	2b00      	cmp	r3, #0
 8001218:	d007      	beq.n	800122a <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800121e:	f043 0220 	orr.w	r2, r3, #32
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e077      	b.n	800131a <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 800122a:	2304      	movs	r3, #4
 800122c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800122e:	f7ff fd13 	bl	8000c58 <HAL_GetTick>
 8001232:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8001234:	e021      	b.n	800127a <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800123c:	d01d      	beq.n	800127a <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800123e:	f7ff fd0b 	bl	8000c58 <HAL_GetTick>
 8001242:	4602      	mov	r2, r0
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	683a      	ldr	r2, [r7, #0]
 800124a:	429a      	cmp	r2, r3
 800124c:	d302      	bcc.n	8001254 <HAL_ADC_PollForConversion+0x60>
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d112      	bne.n	800127a <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	4013      	ands	r3, r2
 800125e:	2b00      	cmp	r3, #0
 8001260:	d10b      	bne.n	800127a <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001266:	f043 0204 	orr.w	r2, r3, #4
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2200      	movs	r2, #0
 8001272:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 8001276:	2303      	movs	r3, #3
 8001278:	e04f      	b.n	800131a <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	4013      	ands	r3, r2
 8001284:	2b00      	cmp	r3, #0
 8001286:	d0d6      	beq.n	8001236 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800128c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff fd4e 	bl	8000d3a <LL_ADC_REG_IsTriggerSourceSWStart>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d031      	beq.n	8001308 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	7e9b      	ldrb	r3, [r3, #26]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d12d      	bne.n	8001308 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 0308 	and.w	r3, r3, #8
 80012b6:	2b08      	cmp	r3, #8
 80012b8:	d126      	bne.n	8001308 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff fdab 	bl	8000e1a <LL_ADC_REG_IsConversionOngoing>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d112      	bne.n	80012f0 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	685a      	ldr	r2, [r3, #4]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f022 020c 	bic.w	r2, r2, #12
 80012d8:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012e2:	f023 0301 	bic.w	r3, r3, #1
 80012e6:	f043 0201 	orr.w	r2, r3, #1
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	659a      	str	r2, [r3, #88]	; 0x58
 80012ee:	e00b      	b.n	8001308 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012f4:	f043 0220 	orr.w	r2, r3, #32
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001300:	f043 0201 	orr.w	r2, r3, #1
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	7e1b      	ldrb	r3, [r3, #24]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d103      	bne.n	8001318 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	220c      	movs	r2, #12
 8001316:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	3710      	adds	r7, #16
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001322:	b480      	push	{r7}
 8001324:	b083      	sub	sp, #12
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001330:	4618      	mov	r0, r3
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	bc80      	pop	{r7}
 8001338:	4770      	bx	lr
	...

0800133c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001344:	2300      	movs	r3, #0
 8001346:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff fd3f 	bl	8000dd0 <LL_ADC_IsEnabled>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d169      	bne.n	800142c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	689a      	ldr	r2, [r3, #8]
 800135e:	4b36      	ldr	r3, [pc, #216]	; (8001438 <ADC_Enable+0xfc>)
 8001360:	4013      	ands	r3, r2
 8001362:	2b00      	cmp	r3, #0
 8001364:	d00d      	beq.n	8001382 <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800136a:	f043 0210 	orr.w	r2, r3, #16
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001376:	f043 0201 	orr.w	r2, r3, #1
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e055      	b.n	800142e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff fd0f 	bl	8000daa <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 800138c:	482b      	ldr	r0, [pc, #172]	; (800143c <ADC_Enable+0x100>)
 800138e:	f7ff fc91 	bl	8000cb4 <LL_ADC_GetCommonPathInternalCh>
 8001392:	4603      	mov	r3, r0
 8001394:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001398:	2b00      	cmp	r3, #0
 800139a:	d00f      	beq.n	80013bc <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800139c:	4b28      	ldr	r3, [pc, #160]	; (8001440 <ADC_Enable+0x104>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	099b      	lsrs	r3, r3, #6
 80013a2:	4a28      	ldr	r2, [pc, #160]	; (8001444 <ADC_Enable+0x108>)
 80013a4:	fba2 2303 	umull	r2, r3, r2, r3
 80013a8:	099b      	lsrs	r3, r3, #6
 80013aa:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 80013ac:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80013ae:	e002      	b.n	80013b6 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	3b01      	subs	r3, #1
 80013b4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d1f9      	bne.n	80013b0 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	7e5b      	ldrb	r3, [r3, #25]
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d033      	beq.n	800142c <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80013c4:	f7ff fc48 	bl	8000c58 <HAL_GetTick>
 80013c8:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80013ca:	e028      	b.n	800141e <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff fcfd 	bl	8000dd0 <LL_ADC_IsEnabled>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d104      	bne.n	80013e6 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff fce2 	bl	8000daa <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80013e6:	f7ff fc37 	bl	8000c58 <HAL_GetTick>
 80013ea:	4602      	mov	r2, r0
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d914      	bls.n	800141e <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0301 	and.w	r3, r3, #1
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d00d      	beq.n	800141e <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001406:	f043 0210 	orr.w	r2, r3, #16
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001412:	f043 0201 	orr.w	r2, r3, #1
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e007      	b.n	800142e <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 0301 	and.w	r3, r3, #1
 8001428:	2b01      	cmp	r3, #1
 800142a:	d1cf      	bne.n	80013cc <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800142c:	2300      	movs	r3, #0
}
 800142e:	4618      	mov	r0, r3
 8001430:	3710      	adds	r7, #16
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	80000017 	.word	0x80000017
 800143c:	40012708 	.word	0x40012708
 8001440:	20000000 	.word	0x20000000
 8001444:	053e2d63 	.word	0x053e2d63

08001448 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001448:	b480      	push	{r7}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	f003 0307 	and.w	r3, r3, #7
 8001456:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001458:	4b0c      	ldr	r3, [pc, #48]	; (800148c <__NVIC_SetPriorityGrouping+0x44>)
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800145e:	68ba      	ldr	r2, [r7, #8]
 8001460:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001464:	4013      	ands	r3, r2
 8001466:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001470:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001474:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001478:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800147a:	4a04      	ldr	r2, [pc, #16]	; (800148c <__NVIC_SetPriorityGrouping+0x44>)
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	60d3      	str	r3, [r2, #12]
}
 8001480:	bf00      	nop
 8001482:	3714      	adds	r7, #20
 8001484:	46bd      	mov	sp, r7
 8001486:	bc80      	pop	{r7}
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	e000ed00 	.word	0xe000ed00

08001490 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001494:	4b04      	ldr	r3, [pc, #16]	; (80014a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	0a1b      	lsrs	r3, r3, #8
 800149a:	f003 0307 	and.w	r3, r3, #7
}
 800149e:	4618      	mov	r0, r3
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bc80      	pop	{r7}
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	e000ed00 	.word	0xe000ed00

080014ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	6039      	str	r1, [r7, #0]
 80014b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	db0a      	blt.n	80014d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	b2da      	uxtb	r2, r3
 80014c4:	490c      	ldr	r1, [pc, #48]	; (80014f8 <__NVIC_SetPriority+0x4c>)
 80014c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ca:	0112      	lsls	r2, r2, #4
 80014cc:	b2d2      	uxtb	r2, r2
 80014ce:	440b      	add	r3, r1
 80014d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014d4:	e00a      	b.n	80014ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	b2da      	uxtb	r2, r3
 80014da:	4908      	ldr	r1, [pc, #32]	; (80014fc <__NVIC_SetPriority+0x50>)
 80014dc:	79fb      	ldrb	r3, [r7, #7]
 80014de:	f003 030f 	and.w	r3, r3, #15
 80014e2:	3b04      	subs	r3, #4
 80014e4:	0112      	lsls	r2, r2, #4
 80014e6:	b2d2      	uxtb	r2, r2
 80014e8:	440b      	add	r3, r1
 80014ea:	761a      	strb	r2, [r3, #24]
}
 80014ec:	bf00      	nop
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bc80      	pop	{r7}
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	e000e100 	.word	0xe000e100
 80014fc:	e000ed00 	.word	0xe000ed00

08001500 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001500:	b480      	push	{r7}
 8001502:	b089      	sub	sp, #36	; 0x24
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	f003 0307 	and.w	r3, r3, #7
 8001512:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	f1c3 0307 	rsb	r3, r3, #7
 800151a:	2b04      	cmp	r3, #4
 800151c:	bf28      	it	cs
 800151e:	2304      	movcs	r3, #4
 8001520:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	3304      	adds	r3, #4
 8001526:	2b06      	cmp	r3, #6
 8001528:	d902      	bls.n	8001530 <NVIC_EncodePriority+0x30>
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	3b03      	subs	r3, #3
 800152e:	e000      	b.n	8001532 <NVIC_EncodePriority+0x32>
 8001530:	2300      	movs	r3, #0
 8001532:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001534:	f04f 32ff 	mov.w	r2, #4294967295
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
 800153e:	43da      	mvns	r2, r3
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	401a      	ands	r2, r3
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001548:	f04f 31ff 	mov.w	r1, #4294967295
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	fa01 f303 	lsl.w	r3, r1, r3
 8001552:	43d9      	mvns	r1, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001558:	4313      	orrs	r3, r2
         );
}
 800155a:	4618      	mov	r0, r3
 800155c:	3724      	adds	r7, #36	; 0x24
 800155e:	46bd      	mov	sp, r7
 8001560:	bc80      	pop	{r7}
 8001562:	4770      	bx	lr

08001564 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	3b01      	subs	r3, #1
 8001570:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001574:	d301      	bcc.n	800157a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001576:	2301      	movs	r3, #1
 8001578:	e00f      	b.n	800159a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800157a:	4a0a      	ldr	r2, [pc, #40]	; (80015a4 <SysTick_Config+0x40>)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	3b01      	subs	r3, #1
 8001580:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001582:	210f      	movs	r1, #15
 8001584:	f04f 30ff 	mov.w	r0, #4294967295
 8001588:	f7ff ff90 	bl	80014ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800158c:	4b05      	ldr	r3, [pc, #20]	; (80015a4 <SysTick_Config+0x40>)
 800158e:	2200      	movs	r2, #0
 8001590:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001592:	4b04      	ldr	r3, [pc, #16]	; (80015a4 <SysTick_Config+0x40>)
 8001594:	2207      	movs	r2, #7
 8001596:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	e000e010 	.word	0xe000e010

080015a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f7ff ff49 	bl	8001448 <__NVIC_SetPriorityGrouping>
}
 80015b6:	bf00      	nop
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015be:	b580      	push	{r7, lr}
 80015c0:	b086      	sub	sp, #24
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	4603      	mov	r3, r0
 80015c6:	60b9      	str	r1, [r7, #8]
 80015c8:	607a      	str	r2, [r7, #4]
 80015ca:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015cc:	f7ff ff60 	bl	8001490 <__NVIC_GetPriorityGrouping>
 80015d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	68b9      	ldr	r1, [r7, #8]
 80015d6:	6978      	ldr	r0, [r7, #20]
 80015d8:	f7ff ff92 	bl	8001500 <NVIC_EncodePriority>
 80015dc:	4602      	mov	r2, r0
 80015de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015e2:	4611      	mov	r1, r2
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff ff61 	bl	80014ac <__NVIC_SetPriority>
}
 80015ea:	bf00      	nop
 80015ec:	3718      	adds	r7, #24
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b082      	sub	sp, #8
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f7ff ffb2 	bl	8001564 <SysTick_Config>
 8001600:	4603      	mov	r3, r0
}
 8001602:	4618      	mov	r0, r3
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
	...

0800160c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800160c:	b480      	push	{r7}
 800160e:	b087      	sub	sp, #28
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001616:	2300      	movs	r3, #0
 8001618:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800161a:	e140      	b.n	800189e <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	2101      	movs	r1, #1
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	fa01 f303 	lsl.w	r3, r1, r3
 8001628:	4013      	ands	r3, r2
 800162a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	2b00      	cmp	r3, #0
 8001630:	f000 8132 	beq.w	8001898 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f003 0303 	and.w	r3, r3, #3
 800163c:	2b01      	cmp	r3, #1
 800163e:	d005      	beq.n	800164c <HAL_GPIO_Init+0x40>
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f003 0303 	and.w	r3, r3, #3
 8001648:	2b02      	cmp	r3, #2
 800164a:	d130      	bne.n	80016ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	2203      	movs	r2, #3
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	43db      	mvns	r3, r3
 800165e:	693a      	ldr	r2, [r7, #16]
 8001660:	4013      	ands	r3, r2
 8001662:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	68da      	ldr	r2, [r3, #12]
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	693a      	ldr	r2, [r7, #16]
 8001672:	4313      	orrs	r3, r2
 8001674:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	693a      	ldr	r2, [r7, #16]
 800167a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001682:	2201      	movs	r2, #1
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	fa02 f303 	lsl.w	r3, r2, r3
 800168a:	43db      	mvns	r3, r3
 800168c:	693a      	ldr	r2, [r7, #16]
 800168e:	4013      	ands	r3, r2
 8001690:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	091b      	lsrs	r3, r3, #4
 8001698:	f003 0201 	and.w	r2, r3, #1
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	fa02 f303 	lsl.w	r3, r2, r3
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f003 0303 	and.w	r3, r3, #3
 80016b6:	2b03      	cmp	r3, #3
 80016b8:	d017      	beq.n	80016ea <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	68db      	ldr	r3, [r3, #12]
 80016be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	2203      	movs	r2, #3
 80016c6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ca:	43db      	mvns	r3, r3
 80016cc:	693a      	ldr	r2, [r7, #16]
 80016ce:	4013      	ands	r3, r2
 80016d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	689a      	ldr	r2, [r3, #8]
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	fa02 f303 	lsl.w	r3, r2, r3
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f003 0303 	and.w	r3, r3, #3
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d123      	bne.n	800173e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	08da      	lsrs	r2, r3, #3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	3208      	adds	r2, #8
 80016fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001702:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	f003 0307 	and.w	r3, r3, #7
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	220f      	movs	r2, #15
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	43db      	mvns	r3, r3
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	4013      	ands	r3, r2
 8001718:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	691a      	ldr	r2, [r3, #16]
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	f003 0307 	and.w	r3, r3, #7
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	fa02 f303 	lsl.w	r3, r2, r3
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	4313      	orrs	r3, r2
 800172e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	08da      	lsrs	r2, r3, #3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	3208      	adds	r2, #8
 8001738:	6939      	ldr	r1, [r7, #16]
 800173a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	2203      	movs	r2, #3
 800174a:	fa02 f303 	lsl.w	r3, r2, r3
 800174e:	43db      	mvns	r3, r3
 8001750:	693a      	ldr	r2, [r7, #16]
 8001752:	4013      	ands	r3, r2
 8001754:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f003 0203 	and.w	r2, r3, #3
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	4313      	orrs	r3, r2
 800176a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800177a:	2b00      	cmp	r3, #0
 800177c:	f000 808c 	beq.w	8001898 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001780:	4a4e      	ldr	r2, [pc, #312]	; (80018bc <HAL_GPIO_Init+0x2b0>)
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	089b      	lsrs	r3, r3, #2
 8001786:	3302      	adds	r3, #2
 8001788:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800178c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	f003 0303 	and.w	r3, r3, #3
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	2207      	movs	r2, #7
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	43db      	mvns	r3, r3
 800179e:	693a      	ldr	r2, [r7, #16]
 80017a0:	4013      	ands	r3, r2
 80017a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80017aa:	d00d      	beq.n	80017c8 <HAL_GPIO_Init+0x1bc>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	4a44      	ldr	r2, [pc, #272]	; (80018c0 <HAL_GPIO_Init+0x2b4>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d007      	beq.n	80017c4 <HAL_GPIO_Init+0x1b8>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	4a43      	ldr	r2, [pc, #268]	; (80018c4 <HAL_GPIO_Init+0x2b8>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d101      	bne.n	80017c0 <HAL_GPIO_Init+0x1b4>
 80017bc:	2302      	movs	r3, #2
 80017be:	e004      	b.n	80017ca <HAL_GPIO_Init+0x1be>
 80017c0:	2307      	movs	r3, #7
 80017c2:	e002      	b.n	80017ca <HAL_GPIO_Init+0x1be>
 80017c4:	2301      	movs	r3, #1
 80017c6:	e000      	b.n	80017ca <HAL_GPIO_Init+0x1be>
 80017c8:	2300      	movs	r3, #0
 80017ca:	697a      	ldr	r2, [r7, #20]
 80017cc:	f002 0203 	and.w	r2, r2, #3
 80017d0:	0092      	lsls	r2, r2, #2
 80017d2:	4093      	lsls	r3, r2
 80017d4:	693a      	ldr	r2, [r7, #16]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017da:	4938      	ldr	r1, [pc, #224]	; (80018bc <HAL_GPIO_Init+0x2b0>)
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	089b      	lsrs	r3, r3, #2
 80017e0:	3302      	adds	r3, #2
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017e8:	4b37      	ldr	r3, [pc, #220]	; (80018c8 <HAL_GPIO_Init+0x2bc>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	43db      	mvns	r3, r3
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	4013      	ands	r3, r2
 80017f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d003      	beq.n	800180c <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	4313      	orrs	r3, r2
 800180a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800180c:	4a2e      	ldr	r2, [pc, #184]	; (80018c8 <HAL_GPIO_Init+0x2bc>)
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001812:	4b2d      	ldr	r3, [pc, #180]	; (80018c8 <HAL_GPIO_Init+0x2bc>)
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	43db      	mvns	r3, r3
 800181c:	693a      	ldr	r2, [r7, #16]
 800181e:	4013      	ands	r3, r2
 8001820:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d003      	beq.n	8001836 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	4313      	orrs	r3, r2
 8001834:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001836:	4a24      	ldr	r2, [pc, #144]	; (80018c8 <HAL_GPIO_Init+0x2bc>)
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 800183c:	4b22      	ldr	r3, [pc, #136]	; (80018c8 <HAL_GPIO_Init+0x2bc>)
 800183e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001842:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	43db      	mvns	r3, r3
 8001848:	693a      	ldr	r2, [r7, #16]
 800184a:	4013      	ands	r3, r2
 800184c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d003      	beq.n	8001862 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	4313      	orrs	r3, r2
 8001860:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8001862:	4a19      	ldr	r2, [pc, #100]	; (80018c8 <HAL_GPIO_Init+0x2bc>)
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800186a:	4b17      	ldr	r3, [pc, #92]	; (80018c8 <HAL_GPIO_Init+0x2bc>)
 800186c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001870:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	43db      	mvns	r3, r3
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	4013      	ands	r3, r2
 800187a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d003      	beq.n	8001890 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001888:	693a      	ldr	r2, [r7, #16]
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	4313      	orrs	r3, r2
 800188e:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8001890:	4a0d      	ldr	r2, [pc, #52]	; (80018c8 <HAL_GPIO_Init+0x2bc>)
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	3301      	adds	r3, #1
 800189c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	fa22 f303 	lsr.w	r3, r2, r3
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	f47f aeb7 	bne.w	800161c <HAL_GPIO_Init+0x10>
  }
}
 80018ae:	bf00      	nop
 80018b0:	bf00      	nop
 80018b2:	371c      	adds	r7, #28
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bc80      	pop	{r7}
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	40010000 	.word	0x40010000
 80018c0:	48000400 	.word	0x48000400
 80018c4:	48000800 	.word	0x48000800
 80018c8:	58000800 	.word	0x58000800

080018cc <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018d0:	4b04      	ldr	r3, [pc, #16]	; (80018e4 <HAL_PWR_EnableBkUpAccess+0x18>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a03      	ldr	r2, [pc, #12]	; (80018e4 <HAL_PWR_EnableBkUpAccess+0x18>)
 80018d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018da:	6013      	str	r3, [r2, #0]
}
 80018dc:	bf00      	nop
 80018de:	46bd      	mov	sp, r7
 80018e0:	bc80      	pop	{r7}
 80018e2:	4770      	bx	lr
 80018e4:	58000400 	.word	0x58000400

080018e8 <LL_PWR_EnableBootC2>:
  *         refer to function @ref LL_PWR_IsActiveFlag_C2BOOTS().
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 80018ec:	4b04      	ldr	r3, [pc, #16]	; (8001900 <LL_PWR_EnableBootC2+0x18>)
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	4a03      	ldr	r2, [pc, #12]	; (8001900 <LL_PWR_EnableBootC2+0x18>)
 80018f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018f6:	60d3      	str	r3, [r2, #12]
}
 80018f8:	bf00      	nop
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bc80      	pop	{r7}
 80018fe:	4770      	bx	lr
 8001900:	58000400 	.word	0x58000400

08001904 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001908:	4b03      	ldr	r3, [pc, #12]	; (8001918 <HAL_PWREx_GetVoltageRange+0x14>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001910:	4618      	mov	r0, r3
 8001912:	46bd      	mov	sp, r7
 8001914:	bc80      	pop	{r7}
 8001916:	4770      	bx	lr
 8001918:	58000400 	.word	0x58000400

0800191c <HAL_PWREx_ReleaseCore>:
  *             This parameter can be one of the following values:
  *             @arg PWR_CORE_CPU2: Release the CPU2 from holding.
  * @retval None
  */
void HAL_PWREx_ReleaseCore(uint32_t CPU)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_CORE_HOLD_RELEASE(CPU));

  LL_PWR_EnableBootC2();
 8001924:	f7ff ffe0 	bl	80018e8 <LL_PWR_EnableBootC2>
}
 8001928:	bf00      	nop
 800192a:	3708      	adds	r7, #8
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <LL_PWR_IsEnabledBkUpAccess>:
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8001934:	4b06      	ldr	r3, [pc, #24]	; (8001950 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800193c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001940:	d101      	bne.n	8001946 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8001942:	2301      	movs	r3, #1
 8001944:	e000      	b.n	8001948 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8001946:	2300      	movs	r3, #0
}
 8001948:	4618      	mov	r0, r3
 800194a:	46bd      	mov	sp, r7
 800194c:	bc80      	pop	{r7}
 800194e:	4770      	bx	lr
 8001950:	58000400 	.word	0x58000400

08001954 <LL_RCC_HSE_EnableTcxo>:
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001958:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001962:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001966:	6013      	str	r3, [r2, #0]
}
 8001968:	bf00      	nop
 800196a:	46bd      	mov	sp, r7
 800196c:	bc80      	pop	{r7}
 800196e:	4770      	bx	lr

08001970 <LL_RCC_HSE_DisableTcxo>:
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001974:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800197e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001982:	6013      	str	r3, [r2, #0]
}
 8001984:	bf00      	nop
 8001986:	46bd      	mov	sp, r7
 8001988:	bc80      	pop	{r7}
 800198a:	4770      	bx	lr

0800198c <LL_RCC_HSE_IsEnabledDiv2>:
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001990:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800199a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800199e:	d101      	bne.n	80019a4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80019a0:	2301      	movs	r3, #1
 80019a2:	e000      	b.n	80019a6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bc80      	pop	{r7}
 80019ac:	4770      	bx	lr

080019ae <LL_RCC_HSE_Enable>:
{
 80019ae:	b480      	push	{r7}
 80019b0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80019b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019c0:	6013      	str	r3, [r2, #0]
}
 80019c2:	bf00      	nop
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bc80      	pop	{r7}
 80019c8:	4770      	bx	lr

080019ca <LL_RCC_HSE_Disable>:
{
 80019ca:	b480      	push	{r7}
 80019cc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80019ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019dc:	6013      	str	r3, [r2, #0]
}
 80019de:	bf00      	nop
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bc80      	pop	{r7}
 80019e4:	4770      	bx	lr

080019e6 <LL_RCC_HSE_IsReady>:
{
 80019e6:	b480      	push	{r7}
 80019e8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80019ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80019f8:	d101      	bne.n	80019fe <LL_RCC_HSE_IsReady+0x18>
 80019fa:	2301      	movs	r3, #1
 80019fc:	e000      	b.n	8001a00 <LL_RCC_HSE_IsReady+0x1a>
 80019fe:	2300      	movs	r3, #0
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bc80      	pop	{r7}
 8001a06:	4770      	bx	lr

08001a08 <LL_RCC_HSI_Enable>:
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001a0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a1a:	6013      	str	r3, [r2, #0]
}
 8001a1c:	bf00      	nop
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bc80      	pop	{r7}
 8001a22:	4770      	bx	lr

08001a24 <LL_RCC_HSI_Disable>:
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001a28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a32:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a36:	6013      	str	r3, [r2, #0]
}
 8001a38:	bf00      	nop
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bc80      	pop	{r7}
 8001a3e:	4770      	bx	lr

08001a40 <LL_RCC_HSI_IsReady>:
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001a44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a52:	d101      	bne.n	8001a58 <LL_RCC_HSI_IsReady+0x18>
 8001a54:	2301      	movs	r3, #1
 8001a56:	e000      	b.n	8001a5a <LL_RCC_HSI_IsReady+0x1a>
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bc80      	pop	{r7}
 8001a60:	4770      	bx	lr

08001a62 <LL_RCC_HSI_SetCalibTrimming>:
{
 8001a62:	b480      	push	{r7}
 8001a64:	b083      	sub	sp, #12
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001a6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	061b      	lsls	r3, r3, #24
 8001a78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	604b      	str	r3, [r1, #4]
}
 8001a80:	bf00      	nop
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bc80      	pop	{r7}
 8001a88:	4770      	bx	lr

08001a8a <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001a8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d101      	bne.n	8001aa2 <LL_RCC_LSE_IsReady+0x18>
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e000      	b.n	8001aa4 <LL_RCC_LSE_IsReady+0x1a>
 8001aa2:	2300      	movs	r3, #0
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bc80      	pop	{r7}
 8001aaa:	4770      	bx	lr

08001aac <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8001ab0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ab4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ab8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001abc:	f043 0301 	orr.w	r3, r3, #1
 8001ac0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001ac4:	bf00      	nop
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bc80      	pop	{r7}
 8001aca:	4770      	bx	lr

08001acc <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8001ad0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ad4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ad8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001adc:	f023 0301 	bic.w	r3, r3, #1
 8001ae0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001ae4:	bf00      	nop
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bc80      	pop	{r7}
 8001aea:	4770      	bx	lr

08001aec <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8001af0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001af4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001af8:	f003 0302 	and.w	r3, r3, #2
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d101      	bne.n	8001b04 <LL_RCC_LSI_IsReady+0x18>
 8001b00:	2301      	movs	r3, #1
 8001b02:	e000      	b.n	8001b06 <LL_RCC_LSI_IsReady+0x1a>
 8001b04:	2300      	movs	r3, #0
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bc80      	pop	{r7}
 8001b0c:	4770      	bx	lr

08001b0e <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001b12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b1c:	f043 0301 	orr.w	r3, r3, #1
 8001b20:	6013      	str	r3, [r2, #0]
}
 8001b22:	bf00      	nop
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bc80      	pop	{r7}
 8001b28:	4770      	bx	lr

08001b2a <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001b2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b38:	f023 0301 	bic.w	r3, r3, #1
 8001b3c:	6013      	str	r3, [r2, #0]
}
 8001b3e:	bf00      	nop
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bc80      	pop	{r7}
 8001b44:	4770      	bx	lr

08001b46 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001b46:	b480      	push	{r7}
 8001b48:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001b4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0302 	and.w	r3, r3, #2
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d101      	bne.n	8001b5c <LL_RCC_MSI_IsReady+0x16>
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e000      	b.n	8001b5e <LL_RCC_MSI_IsReady+0x18>
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bc80      	pop	{r7}
 8001b64:	4770      	bx	lr

08001b66 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8001b66:	b480      	push	{r7}
 8001b68:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8001b6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0308 	and.w	r3, r3, #8
 8001b74:	2b08      	cmp	r3, #8
 8001b76:	d101      	bne.n	8001b7c <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e000      	b.n	8001b7e <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bc80      	pop	{r7}
 8001b84:	4770      	bx	lr

08001b86 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001b86:	b480      	push	{r7}
 8001b88:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8001b8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bc80      	pop	{r7}
 8001b9a:	4770      	bx	lr

08001b9c <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8001ba0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ba4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ba8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bc80      	pop	{r7}
 8001bb2:	4770      	bx	lr

08001bb4 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001bbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	021b      	lsls	r3, r3, #8
 8001bca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	604b      	str	r3, [r1, #4]
}
 8001bd2:	bf00      	nop
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bc80      	pop	{r7}
 8001bda:	4770      	bx	lr

08001bdc <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001be4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	f023 0203 	bic.w	r2, r3, #3
 8001bee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	608b      	str	r3, [r1, #8]
}
 8001bf8:	bf00      	nop
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bc80      	pop	{r7}
 8001c00:	4770      	bx	lr

08001c02 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001c02:	b480      	push	{r7}
 8001c04:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001c06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	f003 030c 	and.w	r3, r3, #12
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bc80      	pop	{r7}
 8001c16:	4770      	bx	lr

08001c18 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001c20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	608b      	str	r3, [r1, #8]
}
 8001c34:	bf00      	nop
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bc80      	pop	{r7}
 8001c3c:	4770      	bx	lr

08001c3e <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	b083      	sub	sp, #12
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001c46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c4a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001c4e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001c5e:	bf00      	nop
 8001c60:	370c      	adds	r7, #12
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bc80      	pop	{r7}
 8001c66:	4770      	bx	lr

08001c68 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001c70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c74:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001c78:	f023 020f 	bic.w	r2, r3, #15
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	091b      	lsrs	r3, r3, #4
 8001c80:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c84:	4313      	orrs	r3, r2
 8001c86:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001c8a:	bf00      	nop
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bc80      	pop	{r7}
 8001c92:	4770      	bx	lr

08001c94 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001c9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ca6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	608b      	str	r3, [r1, #8]
}
 8001cb0:	bf00      	nop
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bc80      	pop	{r7}
 8001cb8:	4770      	bx	lr

08001cba <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b083      	sub	sp, #12
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001cc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ccc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	608b      	str	r3, [r1, #8]
}
 8001cd6:	bf00      	nop
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bc80      	pop	{r7}
 8001cde:	4770      	bx	lr

08001ce0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001ce4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bc80      	pop	{r7}
 8001cf4:	4770      	bx	lr

08001cf6 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001cfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cfe:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001d02:	011b      	lsls	r3, r3, #4
 8001d04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bc80      	pop	{r7}
 8001d0e:	4770      	bx	lr

08001d10 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001d14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bc80      	pop	{r7}
 8001d24:	4770      	bx	lr

08001d26 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001d26:	b480      	push	{r7}
 8001d28:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001d2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bc80      	pop	{r7}
 8001d3a:	4770      	bx	lr

08001d3c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001d40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d4e:	6013      	str	r3, [r2, #0]
}
 8001d50:	bf00      	nop
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bc80      	pop	{r7}
 8001d56:	4770      	bx	lr

08001d58 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001d5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d6a:	6013      	str	r3, [r2, #0]
}
 8001d6c:	bf00      	nop
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bc80      	pop	{r7}
 8001d72:	4770      	bx	lr

08001d74 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001d78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001d86:	d101      	bne.n	8001d8c <LL_RCC_PLL_IsReady+0x18>
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e000      	b.n	8001d8e <LL_RCC_PLL_IsReady+0x1a>
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bc80      	pop	{r7}
 8001d94:	4770      	bx	lr

08001d96 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001d96:	b480      	push	{r7}
 8001d98:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001d9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	0a1b      	lsrs	r3, r3, #8
 8001da2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bc80      	pop	{r7}
 8001dac:	4770      	bx	lr

08001dae <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001dae:	b480      	push	{r7}
 8001db0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001db2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bc80      	pop	{r7}
 8001dc2:	4770      	bx	lr

08001dc4 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001dc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bc80      	pop	{r7}
 8001dd8:	4770      	bx	lr

08001dda <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001dde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	f003 0303 	and.w	r3, r3, #3
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bc80      	pop	{r7}
 8001dee:	4770      	bx	lr

08001df0 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001df4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e02:	d101      	bne.n	8001e08 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001e04:	2301      	movs	r3, #1
 8001e06:	e000      	b.n	8001e0a <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bc80      	pop	{r7}
 8001e10:	4770      	bx	lr

08001e12 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001e12:	b480      	push	{r7}
 8001e14:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001e16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e1a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001e26:	d101      	bne.n	8001e2c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e000      	b.n	8001e2e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bc80      	pop	{r7}
 8001e34:	4770      	bx	lr

08001e36 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001e36:	b480      	push	{r7}
 8001e38:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001e3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e3e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001e42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e4a:	d101      	bne.n	8001e50 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e000      	b.n	8001e52 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bc80      	pop	{r7}
 8001e58:	4770      	bx	lr

08001e5a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001e5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001e6c:	d101      	bne.n	8001e72 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e000      	b.n	8001e74 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001e72:	2300      	movs	r3, #0
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bc80      	pop	{r7}
 8001e7a:	4770      	bx	lr

08001e7c <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001e80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e8a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001e8e:	d101      	bne.n	8001e94 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001e90:	2301      	movs	r3, #1
 8001e92:	e000      	b.n	8001e96 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bc80      	pop	{r7}
 8001e9c:	4770      	bx	lr
	...

08001ea0 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b088      	sub	sp, #32
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d101      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e36f      	b.n	8002592 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001eb2:	f7ff fea6 	bl	8001c02 <LL_RCC_GetSysClkSource>
 8001eb6:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001eb8:	f7ff ff8f 	bl	8001dda <LL_RCC_PLL_GetMainSource>
 8001ebc:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0320 	and.w	r3, r3, #32
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	f000 80c4 	beq.w	8002054 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d005      	beq.n	8001ede <HAL_RCC_OscConfig+0x3e>
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	2b0c      	cmp	r3, #12
 8001ed6:	d176      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d173      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a1b      	ldr	r3, [r3, #32]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d101      	bne.n	8001eea <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e353      	b.n	8002592 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001eee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0308 	and.w	r3, r3, #8
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d005      	beq.n	8001f08 <HAL_RCC_OscConfig+0x68>
 8001efc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f06:	e006      	b.n	8001f16 <HAL_RCC_OscConfig+0x76>
 8001f08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f10:	091b      	lsrs	r3, r3, #4
 8001f12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d222      	bcs.n	8001f60 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f000 fd5a 	bl	80029d8 <RCC_SetFlashLatencyFromMSIRange>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e331      	b.n	8002592 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f38:	f043 0308 	orr.w	r3, r3, #8
 8001f3c:	6013      	str	r3, [r2, #0]
 8001f3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f4c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f50:	4313      	orrs	r3, r2
 8001f52:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7ff fe2b 	bl	8001bb4 <LL_RCC_MSI_SetCalibTrimming>
 8001f5e:	e021      	b.n	8001fa4 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f6a:	f043 0308 	orr.w	r3, r3, #8
 8001f6e:	6013      	str	r3, [r2, #0]
 8001f70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f82:	4313      	orrs	r3, r2
 8001f84:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7ff fe12 	bl	8001bb4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f94:	4618      	mov	r0, r3
 8001f96:	f000 fd1f 	bl	80029d8 <RCC_SetFlashLatencyFromMSIRange>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e2f6      	b.n	8002592 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001fa4:	f000 fce0 	bl	8002968 <HAL_RCC_GetHCLKFreq>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	4aa7      	ldr	r2, [pc, #668]	; (8002248 <HAL_RCC_OscConfig+0x3a8>)
 8001fac:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8001fae:	4ba7      	ldr	r3, [pc, #668]	; (800224c <HAL_RCC_OscConfig+0x3ac>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7fe fe04 	bl	8000bc0 <HAL_InitTick>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8001fbc:	7cfb      	ldrb	r3, [r7, #19]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d047      	beq.n	8002052 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8001fc2:	7cfb      	ldrb	r3, [r7, #19]
 8001fc4:	e2e5      	b.n	8002592 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6a1b      	ldr	r3, [r3, #32]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d02c      	beq.n	8002028 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001fce:	f7ff fd9e 	bl	8001b0e <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001fd2:	f7fe fe41 	bl	8000c58 <HAL_GetTick>
 8001fd6:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001fd8:	e008      	b.n	8001fec <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fda:	f7fe fe3d 	bl	8000c58 <HAL_GetTick>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d901      	bls.n	8001fec <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e2d2      	b.n	8002592 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001fec:	f7ff fdab 	bl	8001b46 <LL_RCC_MSI_IsReady>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d0f1      	beq.n	8001fda <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ff6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002000:	f043 0308 	orr.w	r3, r3, #8
 8002004:	6013      	str	r3, [r2, #0]
 8002006:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002014:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002018:	4313      	orrs	r3, r2
 800201a:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff fdc7 	bl	8001bb4 <LL_RCC_MSI_SetCalibTrimming>
 8002026:	e015      	b.n	8002054 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002028:	f7ff fd7f 	bl	8001b2a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800202c:	f7fe fe14 	bl	8000c58 <HAL_GetTick>
 8002030:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002032:	e008      	b.n	8002046 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002034:	f7fe fe10 	bl	8000c58 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b02      	cmp	r3, #2
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e2a5      	b.n	8002592 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002046:	f7ff fd7e 	bl	8001b46 <LL_RCC_MSI_IsReady>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d1f1      	bne.n	8002034 <HAL_RCC_OscConfig+0x194>
 8002050:	e000      	b.n	8002054 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002052:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0301 	and.w	r3, r3, #1
 800205c:	2b00      	cmp	r3, #0
 800205e:	d058      	beq.n	8002112 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	2b08      	cmp	r3, #8
 8002064:	d005      	beq.n	8002072 <HAL_RCC_OscConfig+0x1d2>
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	2b0c      	cmp	r3, #12
 800206a:	d108      	bne.n	800207e <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	2b03      	cmp	r3, #3
 8002070:	d105      	bne.n	800207e <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d14b      	bne.n	8002112 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e289      	b.n	8002592 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800207e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002090:	4313      	orrs	r3, r2
 8002092:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800209c:	d102      	bne.n	80020a4 <HAL_RCC_OscConfig+0x204>
 800209e:	f7ff fc86 	bl	80019ae <LL_RCC_HSE_Enable>
 80020a2:	e00d      	b.n	80020c0 <HAL_RCC_OscConfig+0x220>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80020ac:	d104      	bne.n	80020b8 <HAL_RCC_OscConfig+0x218>
 80020ae:	f7ff fc51 	bl	8001954 <LL_RCC_HSE_EnableTcxo>
 80020b2:	f7ff fc7c 	bl	80019ae <LL_RCC_HSE_Enable>
 80020b6:	e003      	b.n	80020c0 <HAL_RCC_OscConfig+0x220>
 80020b8:	f7ff fc87 	bl	80019ca <LL_RCC_HSE_Disable>
 80020bc:	f7ff fc58 	bl	8001970 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d012      	beq.n	80020ee <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c8:	f7fe fdc6 	bl	8000c58 <HAL_GetTick>
 80020cc:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80020ce:	e008      	b.n	80020e2 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020d0:	f7fe fdc2 	bl	8000c58 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b64      	cmp	r3, #100	; 0x64
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e257      	b.n	8002592 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 80020e2:	f7ff fc80 	bl	80019e6 <LL_RCC_HSE_IsReady>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d0f1      	beq.n	80020d0 <HAL_RCC_OscConfig+0x230>
 80020ec:	e011      	b.n	8002112 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ee:	f7fe fdb3 	bl	8000c58 <HAL_GetTick>
 80020f2:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80020f4:	e008      	b.n	8002108 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020f6:	f7fe fdaf 	bl	8000c58 <HAL_GetTick>
 80020fa:	4602      	mov	r2, r0
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	2b64      	cmp	r3, #100	; 0x64
 8002102:	d901      	bls.n	8002108 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	e244      	b.n	8002592 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002108:	f7ff fc6d 	bl	80019e6 <LL_RCC_HSE_IsReady>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d1f1      	bne.n	80020f6 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d046      	beq.n	80021ac <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	2b04      	cmp	r3, #4
 8002122:	d005      	beq.n	8002130 <HAL_RCC_OscConfig+0x290>
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	2b0c      	cmp	r3, #12
 8002128:	d10e      	bne.n	8002148 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	2b02      	cmp	r3, #2
 800212e:	d10b      	bne.n	8002148 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	691b      	ldr	r3, [r3, #16]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d101      	bne.n	800213c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e22a      	b.n	8002592 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	695b      	ldr	r3, [r3, #20]
 8002140:	4618      	mov	r0, r3
 8002142:	f7ff fc8e 	bl	8001a62 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002146:	e031      	b.n	80021ac <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	691b      	ldr	r3, [r3, #16]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d019      	beq.n	8002184 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002150:	f7ff fc5a 	bl	8001a08 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002154:	f7fe fd80 	bl	8000c58 <HAL_GetTick>
 8002158:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800215a:	e008      	b.n	800216e <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800215c:	f7fe fd7c 	bl	8000c58 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b02      	cmp	r3, #2
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e211      	b.n	8002592 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 800216e:	f7ff fc67 	bl	8001a40 <LL_RCC_HSI_IsReady>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d0f1      	beq.n	800215c <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	695b      	ldr	r3, [r3, #20]
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff fc70 	bl	8001a62 <LL_RCC_HSI_SetCalibTrimming>
 8002182:	e013      	b.n	80021ac <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002184:	f7ff fc4e 	bl	8001a24 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002188:	f7fe fd66 	bl	8000c58 <HAL_GetTick>
 800218c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800218e:	e008      	b.n	80021a2 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002190:	f7fe fd62 	bl	8000c58 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b02      	cmp	r3, #2
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e1f7      	b.n	8002592 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 80021a2:	f7ff fc4d 	bl	8001a40 <LL_RCC_HSI_IsReady>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d1f1      	bne.n	8002190 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0308 	and.w	r3, r3, #8
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d06e      	beq.n	8002296 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d056      	beq.n	800226e <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 80021c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021c8:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	69da      	ldr	r2, [r3, #28]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	f003 0310 	and.w	r3, r3, #16
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d031      	beq.n	800223c <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d006      	beq.n	80021f0 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d101      	bne.n	80021f0 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e1d0      	b.n	8002592 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d013      	beq.n	8002222 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 80021fa:	f7ff fc67 	bl	8001acc <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80021fe:	f7fe fd2b 	bl	8000c58 <HAL_GetTick>
 8002202:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8002204:	e008      	b.n	8002218 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002206:	f7fe fd27 	bl	8000c58 <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	2b11      	cmp	r3, #17
 8002212:	d901      	bls.n	8002218 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e1bc      	b.n	8002592 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8002218:	f7ff fc68 	bl	8001aec <LL_RCC_LSI_IsReady>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d1f1      	bne.n	8002206 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8002222:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002226:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800222a:	f023 0210 	bic.w	r2, r3, #16
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	69db      	ldr	r3, [r3, #28]
 8002232:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002236:	4313      	orrs	r3, r2
 8002238:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800223c:	f7ff fc36 	bl	8001aac <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002240:	f7fe fd0a 	bl	8000c58 <HAL_GetTick>
 8002244:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8002246:	e00c      	b.n	8002262 <HAL_RCC_OscConfig+0x3c2>
 8002248:	20000000 	.word	0x20000000
 800224c:	20000008 	.word	0x20000008
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002250:	f7fe fd02 	bl	8000c58 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b11      	cmp	r3, #17
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e197      	b.n	8002592 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8002262:	f7ff fc43 	bl	8001aec <LL_RCC_LSI_IsReady>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d0f1      	beq.n	8002250 <HAL_RCC_OscConfig+0x3b0>
 800226c:	e013      	b.n	8002296 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800226e:	f7ff fc2d 	bl	8001acc <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002272:	f7fe fcf1 	bl	8000c58 <HAL_GetTick>
 8002276:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8002278:	e008      	b.n	800228c <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800227a:	f7fe fced 	bl	8000c58 <HAL_GetTick>
 800227e:	4602      	mov	r2, r0
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	2b11      	cmp	r3, #17
 8002286:	d901      	bls.n	800228c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e182      	b.n	8002592 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 800228c:	f7ff fc2e 	bl	8001aec <LL_RCC_LSI_IsReady>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d1f1      	bne.n	800227a <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0304 	and.w	r3, r3, #4
 800229e:	2b00      	cmp	r3, #0
 80022a0:	f000 80d8 	beq.w	8002454 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80022a4:	f7ff fb44 	bl	8001930 <LL_PWR_IsEnabledBkUpAccess>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d113      	bne.n	80022d6 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80022ae:	f7ff fb0d 	bl	80018cc <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022b2:	f7fe fcd1 	bl	8000c58 <HAL_GetTick>
 80022b6:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80022b8:	e008      	b.n	80022cc <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022ba:	f7fe fccd 	bl	8000c58 <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d901      	bls.n	80022cc <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e162      	b.n	8002592 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80022cc:	f7ff fb30 	bl	8001930 <LL_PWR_IsEnabledBkUpAccess>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d0f1      	beq.n	80022ba <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d07b      	beq.n	80023d6 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	2b85      	cmp	r3, #133	; 0x85
 80022e4:	d003      	beq.n	80022ee <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	2b05      	cmp	r3, #5
 80022ec:	d109      	bne.n	8002302 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80022ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022fa:	f043 0304 	orr.w	r3, r3, #4
 80022fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002302:	f7fe fca9 	bl	8000c58 <HAL_GetTick>
 8002306:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002308:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800230c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002310:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002314:	f043 0301 	orr.w	r3, r3, #1
 8002318:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800231c:	e00a      	b.n	8002334 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800231e:	f7fe fc9b 	bl	8000c58 <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	f241 3288 	movw	r2, #5000	; 0x1388
 800232c:	4293      	cmp	r3, r2
 800232e:	d901      	bls.n	8002334 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e12e      	b.n	8002592 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002334:	f7ff fba9 	bl	8001a8a <LL_RCC_LSE_IsReady>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d0ef      	beq.n	800231e <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	2b81      	cmp	r3, #129	; 0x81
 8002344:	d003      	beq.n	800234e <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	2b85      	cmp	r3, #133	; 0x85
 800234c:	d121      	bne.n	8002392 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800234e:	f7fe fc83 	bl	8000c58 <HAL_GetTick>
 8002352:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002354:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002358:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800235c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002360:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002364:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002368:	e00a      	b.n	8002380 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800236a:	f7fe fc75 	bl	8000c58 <HAL_GetTick>
 800236e:	4602      	mov	r2, r0
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	f241 3288 	movw	r2, #5000	; 0x1388
 8002378:	4293      	cmp	r3, r2
 800237a:	d901      	bls.n	8002380 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e108      	b.n	8002592 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002380:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002388:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800238c:	2b00      	cmp	r3, #0
 800238e:	d0ec      	beq.n	800236a <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002390:	e060      	b.n	8002454 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002392:	f7fe fc61 	bl	8000c58 <HAL_GetTick>
 8002396:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002398:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800239c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80023a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80023ac:	e00a      	b.n	80023c4 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ae:	f7fe fc53 	bl	8000c58 <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80023bc:	4293      	cmp	r3, r2
 80023be:	d901      	bls.n	80023c4 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e0e6      	b.n	8002592 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80023c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d1ec      	bne.n	80023ae <HAL_RCC_OscConfig+0x50e>
 80023d4:	e03e      	b.n	8002454 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023d6:	f7fe fc3f 	bl	8000c58 <HAL_GetTick>
 80023da:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80023dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80023ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80023f0:	e00a      	b.n	8002408 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023f2:	f7fe fc31 	bl	8000c58 <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002400:	4293      	cmp	r3, r2
 8002402:	d901      	bls.n	8002408 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e0c4      	b.n	8002592 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002408:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800240c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002410:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002414:	2b00      	cmp	r3, #0
 8002416:	d1ec      	bne.n	80023f2 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002418:	f7fe fc1e 	bl	8000c58 <HAL_GetTick>
 800241c:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800241e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002426:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800242a:	f023 0301 	bic.w	r3, r3, #1
 800242e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002432:	e00a      	b.n	800244a <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002434:	f7fe fc10 	bl	8000c58 <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002442:	4293      	cmp	r3, r2
 8002444:	d901      	bls.n	800244a <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e0a3      	b.n	8002592 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 800244a:	f7ff fb1e 	bl	8001a8a <LL_RCC_LSE_IsReady>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d1ef      	bne.n	8002434 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002458:	2b00      	cmp	r3, #0
 800245a:	f000 8099 	beq.w	8002590 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	2b0c      	cmp	r3, #12
 8002462:	d06c      	beq.n	800253e <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002468:	2b02      	cmp	r3, #2
 800246a:	d14b      	bne.n	8002504 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800246c:	f7ff fc74 	bl	8001d58 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002470:	f7fe fbf2 	bl	8000c58 <HAL_GetTick>
 8002474:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002476:	e008      	b.n	800248a <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002478:	f7fe fbee 	bl	8000c58 <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b0a      	cmp	r3, #10
 8002484:	d901      	bls.n	800248a <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e083      	b.n	8002592 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800248a:	f7ff fc73 	bl	8001d74 <LL_RCC_PLL_IsReady>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d1f1      	bne.n	8002478 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002494:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002498:	68da      	ldr	r2, [r3, #12]
 800249a:	4b40      	ldr	r3, [pc, #256]	; (800259c <HAL_RCC_OscConfig+0x6fc>)
 800249c:	4013      	ands	r3, r2
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80024a6:	4311      	orrs	r1, r2
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80024ac:	0212      	lsls	r2, r2, #8
 80024ae:	4311      	orrs	r1, r2
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80024b4:	4311      	orrs	r1, r2
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80024ba:	4311      	orrs	r1, r2
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80024c0:	430a      	orrs	r2, r1
 80024c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024c6:	4313      	orrs	r3, r2
 80024c8:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024ca:	f7ff fc37 	bl	8001d3c <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80024ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024dc:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024de:	f7fe fbbb 	bl	8000c58 <HAL_GetTick>
 80024e2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80024e4:	e008      	b.n	80024f8 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024e6:	f7fe fbb7 	bl	8000c58 <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	2b0a      	cmp	r3, #10
 80024f2:	d901      	bls.n	80024f8 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e04c      	b.n	8002592 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 80024f8:	f7ff fc3c 	bl	8001d74 <LL_RCC_PLL_IsReady>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d0f1      	beq.n	80024e6 <HAL_RCC_OscConfig+0x646>
 8002502:	e045      	b.n	8002590 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002504:	f7ff fc28 	bl	8001d58 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002508:	f7fe fba6 	bl	8000c58 <HAL_GetTick>
 800250c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800250e:	e008      	b.n	8002522 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002510:	f7fe fba2 	bl	8000c58 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b0a      	cmp	r3, #10
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e037      	b.n	8002592 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002522:	f7ff fc27 	bl	8001d74 <LL_RCC_PLL_IsReady>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d1f1      	bne.n	8002510 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800252c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002530:	68da      	ldr	r2, [r3, #12]
 8002532:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002536:	4b1a      	ldr	r3, [pc, #104]	; (80025a0 <HAL_RCC_OscConfig+0x700>)
 8002538:	4013      	ands	r3, r2
 800253a:	60cb      	str	r3, [r1, #12]
 800253c:	e028      	b.n	8002590 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002542:	2b01      	cmp	r3, #1
 8002544:	d101      	bne.n	800254a <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e023      	b.n	8002592 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800254a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	f003 0203 	and.w	r2, r3, #3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255c:	429a      	cmp	r2, r3
 800255e:	d115      	bne.n	800258c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800256a:	429a      	cmp	r2, r3
 800256c:	d10e      	bne.n	800258c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002578:	021b      	lsls	r3, r3, #8
 800257a:	429a      	cmp	r2, r3
 800257c:	d106      	bne.n	800258c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002588:	429a      	cmp	r2, r3
 800258a:	d001      	beq.n	8002590 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e000      	b.n	8002592 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3720      	adds	r7, #32
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	11c1808c 	.word	0x11c1808c
 80025a0:	eefefffc 	.word	0xeefefffc

080025a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d101      	bne.n	80025b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e12c      	b.n	8002812 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025b8:	4b98      	ldr	r3, [pc, #608]	; (800281c <HAL_RCC_ClockConfig+0x278>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0307 	and.w	r3, r3, #7
 80025c0:	683a      	ldr	r2, [r7, #0]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d91b      	bls.n	80025fe <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025c6:	4b95      	ldr	r3, [pc, #596]	; (800281c <HAL_RCC_ClockConfig+0x278>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f023 0207 	bic.w	r2, r3, #7
 80025ce:	4993      	ldr	r1, [pc, #588]	; (800281c <HAL_RCC_ClockConfig+0x278>)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025d6:	f7fe fb3f 	bl	8000c58 <HAL_GetTick>
 80025da:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025dc:	e008      	b.n	80025f0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80025de:	f7fe fb3b 	bl	8000c58 <HAL_GetTick>
 80025e2:	4602      	mov	r2, r0
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d901      	bls.n	80025f0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e110      	b.n	8002812 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025f0:	4b8a      	ldr	r3, [pc, #552]	; (800281c <HAL_RCC_ClockConfig+0x278>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0307 	and.w	r3, r3, #7
 80025f8:	683a      	ldr	r2, [r7, #0]
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d1ef      	bne.n	80025de <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0302 	and.w	r3, r3, #2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d016      	beq.n	8002638 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	4618      	mov	r0, r3
 8002610:	f7ff fb02 	bl	8001c18 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002614:	f7fe fb20 	bl	8000c58 <HAL_GetTick>
 8002618:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800261a:	e008      	b.n	800262e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800261c:	f7fe fb1c 	bl	8000c58 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b02      	cmp	r3, #2
 8002628:	d901      	bls.n	800262e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e0f1      	b.n	8002812 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800262e:	f7ff fbdf 	bl	8001df0 <LL_RCC_IsActiveFlag_HPRE>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d0f1      	beq.n	800261c <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0320 	and.w	r3, r3, #32
 8002640:	2b00      	cmp	r3, #0
 8002642:	d016      	beq.n	8002672 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	695b      	ldr	r3, [r3, #20]
 8002648:	4618      	mov	r0, r3
 800264a:	f7ff faf8 	bl	8001c3e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800264e:	f7fe fb03 	bl	8000c58 <HAL_GetTick>
 8002652:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002654:	e008      	b.n	8002668 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002656:	f7fe faff 	bl	8000c58 <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	2b02      	cmp	r3, #2
 8002662:	d901      	bls.n	8002668 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e0d4      	b.n	8002812 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002668:	f7ff fbd3 	bl	8001e12 <LL_RCC_IsActiveFlag_C2HPRE>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d0f1      	beq.n	8002656 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800267a:	2b00      	cmp	r3, #0
 800267c:	d016      	beq.n	80026ac <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	4618      	mov	r0, r3
 8002684:	f7ff faf0 	bl	8001c68 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002688:	f7fe fae6 	bl	8000c58 <HAL_GetTick>
 800268c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800268e:	e008      	b.n	80026a2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002690:	f7fe fae2 	bl	8000c58 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b02      	cmp	r3, #2
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e0b7      	b.n	8002812 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80026a2:	f7ff fbc8 	bl	8001e36 <LL_RCC_IsActiveFlag_SHDHPRE>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d0f1      	beq.n	8002690 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0304 	and.w	r3, r3, #4
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d016      	beq.n	80026e6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	4618      	mov	r0, r3
 80026be:	f7ff fae9 	bl	8001c94 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80026c2:	f7fe fac9 	bl	8000c58 <HAL_GetTick>
 80026c6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80026c8:	e008      	b.n	80026dc <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80026ca:	f7fe fac5 	bl	8000c58 <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d901      	bls.n	80026dc <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e09a      	b.n	8002812 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80026dc:	f7ff fbbd 	bl	8001e5a <LL_RCC_IsActiveFlag_PPRE1>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d0f1      	beq.n	80026ca <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0308 	and.w	r3, r3, #8
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d017      	beq.n	8002722 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	00db      	lsls	r3, r3, #3
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7ff fade 	bl	8001cba <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80026fe:	f7fe faab 	bl	8000c58 <HAL_GetTick>
 8002702:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002704:	e008      	b.n	8002718 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002706:	f7fe faa7 	bl	8000c58 <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	2b02      	cmp	r3, #2
 8002712:	d901      	bls.n	8002718 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	e07c      	b.n	8002812 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002718:	f7ff fbb0 	bl	8001e7c <LL_RCC_IsActiveFlag_PPRE2>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d0f1      	beq.n	8002706 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	2b00      	cmp	r3, #0
 800272c:	d043      	beq.n	80027b6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	2b02      	cmp	r3, #2
 8002734:	d106      	bne.n	8002744 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002736:	f7ff f956 	bl	80019e6 <LL_RCC_HSE_IsReady>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d11e      	bne.n	800277e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e066      	b.n	8002812 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	2b03      	cmp	r3, #3
 800274a:	d106      	bne.n	800275a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800274c:	f7ff fb12 	bl	8001d74 <LL_RCC_PLL_IsReady>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d113      	bne.n	800277e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e05b      	b.n	8002812 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d106      	bne.n	8002770 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002762:	f7ff f9f0 	bl	8001b46 <LL_RCC_MSI_IsReady>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d108      	bne.n	800277e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e050      	b.n	8002812 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002770:	f7ff f966 	bl	8001a40 <LL_RCC_HSI_IsReady>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d101      	bne.n	800277e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e049      	b.n	8002812 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	4618      	mov	r0, r3
 8002784:	f7ff fa2a 	bl	8001bdc <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002788:	f7fe fa66 	bl	8000c58 <HAL_GetTick>
 800278c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800278e:	e00a      	b.n	80027a6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002790:	f7fe fa62 	bl	8000c58 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	f241 3288 	movw	r2, #5000	; 0x1388
 800279e:	4293      	cmp	r3, r2
 80027a0:	d901      	bls.n	80027a6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e035      	b.n	8002812 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027a6:	f7ff fa2c 	bl	8001c02 <LL_RCC_GetSysClkSource>
 80027aa:	4602      	mov	r2, r0
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d1ec      	bne.n	8002790 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027b6:	4b19      	ldr	r3, [pc, #100]	; (800281c <HAL_RCC_ClockConfig+0x278>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0307 	and.w	r3, r3, #7
 80027be:	683a      	ldr	r2, [r7, #0]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d21b      	bcs.n	80027fc <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027c4:	4b15      	ldr	r3, [pc, #84]	; (800281c <HAL_RCC_ClockConfig+0x278>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f023 0207 	bic.w	r2, r3, #7
 80027cc:	4913      	ldr	r1, [pc, #76]	; (800281c <HAL_RCC_ClockConfig+0x278>)
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027d4:	f7fe fa40 	bl	8000c58 <HAL_GetTick>
 80027d8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027da:	e008      	b.n	80027ee <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80027dc:	f7fe fa3c 	bl	8000c58 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e011      	b.n	8002812 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ee:	4b0b      	ldr	r3, [pc, #44]	; (800281c <HAL_RCC_ClockConfig+0x278>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0307 	and.w	r3, r3, #7
 80027f6:	683a      	ldr	r2, [r7, #0]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d1ef      	bne.n	80027dc <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80027fc:	f000 f8b4 	bl	8002968 <HAL_RCC_GetHCLKFreq>
 8002800:	4603      	mov	r3, r0
 8002802:	4a07      	ldr	r2, [pc, #28]	; (8002820 <HAL_RCC_ClockConfig+0x27c>)
 8002804:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8002806:	4b07      	ldr	r3, [pc, #28]	; (8002824 <HAL_RCC_ClockConfig+0x280>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4618      	mov	r0, r3
 800280c:	f7fe f9d8 	bl	8000bc0 <HAL_InitTick>
 8002810:	4603      	mov	r3, r0
}
 8002812:	4618      	mov	r0, r3
 8002814:	3710      	adds	r7, #16
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	58004000 	.word	0x58004000
 8002820:	20000000 	.word	0x20000000
 8002824:	20000008 	.word	0x20000008

08002828 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002828:	b590      	push	{r4, r7, lr}
 800282a:	b087      	sub	sp, #28
 800282c:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 800282e:	2300      	movs	r3, #0
 8002830:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8002832:	2300      	movs	r3, #0
 8002834:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002836:	f7ff f9e4 	bl	8001c02 <LL_RCC_GetSysClkSource>
 800283a:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800283c:	f7ff facd 	bl	8001dda <LL_RCC_PLL_GetMainSource>
 8002840:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d005      	beq.n	8002854 <HAL_RCC_GetSysClockFreq+0x2c>
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	2b0c      	cmp	r3, #12
 800284c:	d139      	bne.n	80028c2 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2b01      	cmp	r3, #1
 8002852:	d136      	bne.n	80028c2 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002854:	f7ff f987 	bl	8001b66 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d115      	bne.n	800288a <HAL_RCC_GetSysClockFreq+0x62>
 800285e:	f7ff f982 	bl	8001b66 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002862:	4603      	mov	r3, r0
 8002864:	2b01      	cmp	r3, #1
 8002866:	d106      	bne.n	8002876 <HAL_RCC_GetSysClockFreq+0x4e>
 8002868:	f7ff f98d 	bl	8001b86 <LL_RCC_MSI_GetRange>
 800286c:	4603      	mov	r3, r0
 800286e:	0a1b      	lsrs	r3, r3, #8
 8002870:	f003 030f 	and.w	r3, r3, #15
 8002874:	e005      	b.n	8002882 <HAL_RCC_GetSysClockFreq+0x5a>
 8002876:	f7ff f991 	bl	8001b9c <LL_RCC_MSI_GetRangeAfterStandby>
 800287a:	4603      	mov	r3, r0
 800287c:	0a1b      	lsrs	r3, r3, #8
 800287e:	f003 030f 	and.w	r3, r3, #15
 8002882:	4a36      	ldr	r2, [pc, #216]	; (800295c <HAL_RCC_GetSysClockFreq+0x134>)
 8002884:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002888:	e014      	b.n	80028b4 <HAL_RCC_GetSysClockFreq+0x8c>
 800288a:	f7ff f96c 	bl	8001b66 <LL_RCC_MSI_IsEnabledRangeSelect>
 800288e:	4603      	mov	r3, r0
 8002890:	2b01      	cmp	r3, #1
 8002892:	d106      	bne.n	80028a2 <HAL_RCC_GetSysClockFreq+0x7a>
 8002894:	f7ff f977 	bl	8001b86 <LL_RCC_MSI_GetRange>
 8002898:	4603      	mov	r3, r0
 800289a:	091b      	lsrs	r3, r3, #4
 800289c:	f003 030f 	and.w	r3, r3, #15
 80028a0:	e005      	b.n	80028ae <HAL_RCC_GetSysClockFreq+0x86>
 80028a2:	f7ff f97b 	bl	8001b9c <LL_RCC_MSI_GetRangeAfterStandby>
 80028a6:	4603      	mov	r3, r0
 80028a8:	091b      	lsrs	r3, r3, #4
 80028aa:	f003 030f 	and.w	r3, r3, #15
 80028ae:	4a2b      	ldr	r2, [pc, #172]	; (800295c <HAL_RCC_GetSysClockFreq+0x134>)
 80028b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028b4:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d115      	bne.n	80028e8 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80028c0:	e012      	b.n	80028e8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	2b04      	cmp	r3, #4
 80028c6:	d102      	bne.n	80028ce <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80028c8:	4b25      	ldr	r3, [pc, #148]	; (8002960 <HAL_RCC_GetSysClockFreq+0x138>)
 80028ca:	617b      	str	r3, [r7, #20]
 80028cc:	e00c      	b.n	80028e8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	2b08      	cmp	r3, #8
 80028d2:	d109      	bne.n	80028e8 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80028d4:	f7ff f85a 	bl	800198c <LL_RCC_HSE_IsEnabledDiv2>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d102      	bne.n	80028e4 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80028de:	4b20      	ldr	r3, [pc, #128]	; (8002960 <HAL_RCC_GetSysClockFreq+0x138>)
 80028e0:	617b      	str	r3, [r7, #20]
 80028e2:	e001      	b.n	80028e8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80028e4:	4b1f      	ldr	r3, [pc, #124]	; (8002964 <HAL_RCC_GetSysClockFreq+0x13c>)
 80028e6:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028e8:	f7ff f98b 	bl	8001c02 <LL_RCC_GetSysClkSource>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b0c      	cmp	r3, #12
 80028f0:	d12f      	bne.n	8002952 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80028f2:	f7ff fa72 	bl	8001dda <LL_RCC_PLL_GetMainSource>
 80028f6:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d003      	beq.n	8002906 <HAL_RCC_GetSysClockFreq+0xde>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2b03      	cmp	r3, #3
 8002902:	d003      	beq.n	800290c <HAL_RCC_GetSysClockFreq+0xe4>
 8002904:	e00d      	b.n	8002922 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002906:	4b16      	ldr	r3, [pc, #88]	; (8002960 <HAL_RCC_GetSysClockFreq+0x138>)
 8002908:	60fb      	str	r3, [r7, #12]
        break;
 800290a:	e00d      	b.n	8002928 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800290c:	f7ff f83e 	bl	800198c <LL_RCC_HSE_IsEnabledDiv2>
 8002910:	4603      	mov	r3, r0
 8002912:	2b01      	cmp	r3, #1
 8002914:	d102      	bne.n	800291c <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002916:	4b12      	ldr	r3, [pc, #72]	; (8002960 <HAL_RCC_GetSysClockFreq+0x138>)
 8002918:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800291a:	e005      	b.n	8002928 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 800291c:	4b11      	ldr	r3, [pc, #68]	; (8002964 <HAL_RCC_GetSysClockFreq+0x13c>)
 800291e:	60fb      	str	r3, [r7, #12]
        break;
 8002920:	e002      	b.n	8002928 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	60fb      	str	r3, [r7, #12]
        break;
 8002926:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002928:	f7ff fa35 	bl	8001d96 <LL_RCC_PLL_GetN>
 800292c:	4602      	mov	r2, r0
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	fb03 f402 	mul.w	r4, r3, r2
 8002934:	f7ff fa46 	bl	8001dc4 <LL_RCC_PLL_GetDivider>
 8002938:	4603      	mov	r3, r0
 800293a:	091b      	lsrs	r3, r3, #4
 800293c:	3301      	adds	r3, #1
 800293e:	fbb4 f4f3 	udiv	r4, r4, r3
 8002942:	f7ff fa34 	bl	8001dae <LL_RCC_PLL_GetR>
 8002946:	4603      	mov	r3, r0
 8002948:	0f5b      	lsrs	r3, r3, #29
 800294a:	3301      	adds	r3, #1
 800294c:	fbb4 f3f3 	udiv	r3, r4, r3
 8002950:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002952:	697b      	ldr	r3, [r7, #20]
}
 8002954:	4618      	mov	r0, r3
 8002956:	371c      	adds	r7, #28
 8002958:	46bd      	mov	sp, r7
 800295a:	bd90      	pop	{r4, r7, pc}
 800295c:	08004bb4 	.word	0x08004bb4
 8002960:	00f42400 	.word	0x00f42400
 8002964:	01e84800 	.word	0x01e84800

08002968 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002968:	b598      	push	{r3, r4, r7, lr}
 800296a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800296c:	f7ff ff5c 	bl	8002828 <HAL_RCC_GetSysClockFreq>
 8002970:	4604      	mov	r4, r0
 8002972:	f7ff f9b5 	bl	8001ce0 <LL_RCC_GetAHBPrescaler>
 8002976:	4603      	mov	r3, r0
 8002978:	091b      	lsrs	r3, r3, #4
 800297a:	f003 030f 	and.w	r3, r3, #15
 800297e:	4a03      	ldr	r2, [pc, #12]	; (800298c <HAL_RCC_GetHCLKFreq+0x24>)
 8002980:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002984:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002988:	4618      	mov	r0, r3
 800298a:	bd98      	pop	{r3, r4, r7, pc}
 800298c:	08004b54 	.word	0x08004b54

08002990 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002990:	b598      	push	{r3, r4, r7, lr}
 8002992:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002994:	f7ff ffe8 	bl	8002968 <HAL_RCC_GetHCLKFreq>
 8002998:	4604      	mov	r4, r0
 800299a:	f7ff f9b9 	bl	8001d10 <LL_RCC_GetAPB1Prescaler>
 800299e:	4603      	mov	r3, r0
 80029a0:	0a1b      	lsrs	r3, r3, #8
 80029a2:	4a03      	ldr	r2, [pc, #12]	; (80029b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029a8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	bd98      	pop	{r3, r4, r7, pc}
 80029b0:	08004b94 	.word	0x08004b94

080029b4 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029b4:	b598      	push	{r3, r4, r7, lr}
 80029b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80029b8:	f7ff ffd6 	bl	8002968 <HAL_RCC_GetHCLKFreq>
 80029bc:	4604      	mov	r4, r0
 80029be:	f7ff f9b2 	bl	8001d26 <LL_RCC_GetAPB2Prescaler>
 80029c2:	4603      	mov	r3, r0
 80029c4:	0adb      	lsrs	r3, r3, #11
 80029c6:	4a03      	ldr	r2, [pc, #12]	; (80029d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029cc:	fa24 f303 	lsr.w	r3, r4, r3
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	bd98      	pop	{r3, r4, r7, pc}
 80029d4:	08004b94 	.word	0x08004b94

080029d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80029d8:	b590      	push	{r4, r7, lr}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	091b      	lsrs	r3, r3, #4
 80029e4:	f003 030f 	and.w	r3, r3, #15
 80029e8:	4a10      	ldr	r2, [pc, #64]	; (8002a2c <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80029ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029ee:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80029f0:	f7ff f981 	bl	8001cf6 <LL_RCC_GetAHB3Prescaler>
 80029f4:	4603      	mov	r3, r0
 80029f6:	091b      	lsrs	r3, r3, #4
 80029f8:	f003 030f 	and.w	r3, r3, #15
 80029fc:	4a0c      	ldr	r2, [pc, #48]	; (8002a30 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80029fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a08:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	4a09      	ldr	r2, [pc, #36]	; (8002a34 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8002a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a12:	0c9c      	lsrs	r4, r3, #18
 8002a14:	f7fe ff76 	bl	8001904 <HAL_PWREx_GetVoltageRange>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	4620      	mov	r0, r4
 8002a1e:	f000 f80b 	bl	8002a38 <RCC_SetFlashLatency>
 8002a22:	4603      	mov	r3, r0
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3714      	adds	r7, #20
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd90      	pop	{r4, r7, pc}
 8002a2c:	08004bb4 	.word	0x08004bb4
 8002a30:	08004b54 	.word	0x08004b54
 8002a34:	431bde83 	.word	0x431bde83

08002a38 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b08e      	sub	sp, #56	; 0x38
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8002a42:	4a3a      	ldr	r2, [pc, #232]	; (8002b2c <RCC_SetFlashLatency+0xf4>)
 8002a44:	f107 0320 	add.w	r3, r7, #32
 8002a48:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002a4c:	6018      	str	r0, [r3, #0]
 8002a4e:	3304      	adds	r3, #4
 8002a50:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8002a52:	4a37      	ldr	r2, [pc, #220]	; (8002b30 <RCC_SetFlashLatency+0xf8>)
 8002a54:	f107 0318 	add.w	r3, r7, #24
 8002a58:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002a5c:	6018      	str	r0, [r3, #0]
 8002a5e:	3304      	adds	r3, #4
 8002a60:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8002a62:	4a34      	ldr	r2, [pc, #208]	; (8002b34 <RCC_SetFlashLatency+0xfc>)
 8002a64:	f107 030c 	add.w	r3, r7, #12
 8002a68:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a6a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002a6e:	2300      	movs	r3, #0
 8002a70:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a78:	d11b      	bne.n	8002ab2 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	633b      	str	r3, [r7, #48]	; 0x30
 8002a7e:	e014      	b.n	8002aaa <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a82:	005b      	lsls	r3, r3, #1
 8002a84:	3338      	adds	r3, #56	; 0x38
 8002a86:	443b      	add	r3, r7
 8002a88:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d807      	bhi.n	8002aa4 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	3338      	adds	r3, #56	; 0x38
 8002a9a:	443b      	add	r3, r7
 8002a9c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002aa0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002aa2:	e021      	b.n	8002ae8 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	633b      	str	r3, [r7, #48]	; 0x30
 8002aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d9e7      	bls.n	8002a80 <RCC_SetFlashLatency+0x48>
 8002ab0:	e01a      	b.n	8002ae8 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ab6:	e014      	b.n	8002ae2 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aba:	005b      	lsls	r3, r3, #1
 8002abc:	3338      	adds	r3, #56	; 0x38
 8002abe:	443b      	add	r3, r7
 8002ac0:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d807      	bhi.n	8002adc <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	3338      	adds	r3, #56	; 0x38
 8002ad2:	443b      	add	r3, r7
 8002ad4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002ad8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002ada:	e005      	b.n	8002ae8 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ade:	3301      	adds	r3, #1
 8002ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d9e7      	bls.n	8002ab8 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002ae8:	4b13      	ldr	r3, [pc, #76]	; (8002b38 <RCC_SetFlashLatency+0x100>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f023 0207 	bic.w	r2, r3, #7
 8002af0:	4911      	ldr	r1, [pc, #68]	; (8002b38 <RCC_SetFlashLatency+0x100>)
 8002af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002af4:	4313      	orrs	r3, r2
 8002af6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002af8:	f7fe f8ae 	bl	8000c58 <HAL_GetTick>
 8002afc:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002afe:	e008      	b.n	8002b12 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002b00:	f7fe f8aa 	bl	8000c58 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d901      	bls.n	8002b12 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e007      	b.n	8002b22 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002b12:	4b09      	ldr	r3, [pc, #36]	; (8002b38 <RCC_SetFlashLatency+0x100>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0307 	and.w	r3, r3, #7
 8002b1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d1ef      	bne.n	8002b00 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3738      	adds	r7, #56	; 0x38
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	08004b38 	.word	0x08004b38
 8002b30:	08004b40 	.word	0x08004b40
 8002b34:	08004b48 	.word	0x08004b48
 8002b38:	58004000 	.word	0x58004000

08002b3c <LL_RCC_LSE_IsReady>:
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002b40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d101      	bne.n	8002b54 <LL_RCC_LSE_IsReady+0x18>
 8002b50:	2301      	movs	r3, #1
 8002b52:	e000      	b.n	8002b56 <LL_RCC_LSE_IsReady+0x1a>
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bc80      	pop	{r7}
 8002b5c:	4770      	bx	lr

08002b5e <LL_RCC_SetUSARTClockSource>:
{
 8002b5e:	b480      	push	{r7}
 8002b60:	b083      	sub	sp, #12
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8002b66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b6a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	0c1b      	lsrs	r3, r3, #16
 8002b72:	43db      	mvns	r3, r3
 8002b74:	401a      	ands	r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002b84:	bf00      	nop
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bc80      	pop	{r7}
 8002b8c:	4770      	bx	lr

08002b8e <LL_RCC_SetI2SClockSource>:
{
 8002b8e:	b480      	push	{r7}
 8002b90:	b083      	sub	sp, #12
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8002b96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b9e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ba2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002bae:	bf00      	nop
 8002bb0:	370c      	adds	r7, #12
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bc80      	pop	{r7}
 8002bb6:	4770      	bx	lr

08002bb8 <LL_RCC_SetLPUARTClockSource>:
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002bc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bc8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002bcc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002bd8:	bf00      	nop
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bc80      	pop	{r7}
 8002be0:	4770      	bx	lr

08002be2 <LL_RCC_SetI2CClockSource>:
{
 8002be2:	b480      	push	{r7}
 8002be4:	b083      	sub	sp, #12
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002bea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bee:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	091b      	lsrs	r3, r3, #4
 8002bf6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002bfa:	43db      	mvns	r3, r3
 8002bfc:	401a      	ands	r2, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	011b      	lsls	r3, r3, #4
 8002c02:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002c06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bc80      	pop	{r7}
 8002c18:	4770      	bx	lr

08002c1a <LL_RCC_SetLPTIMClockSource>:
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	b083      	sub	sp, #12
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002c22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c26:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	0c1b      	lsrs	r3, r3, #16
 8002c2e:	041b      	lsls	r3, r3, #16
 8002c30:	43db      	mvns	r3, r3
 8002c32:	401a      	ands	r2, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	041b      	lsls	r3, r3, #16
 8002c38:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002c42:	bf00      	nop
 8002c44:	370c      	adds	r7, #12
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bc80      	pop	{r7}
 8002c4a:	4770      	bx	lr

08002c4c <LL_RCC_SetRNGClockSource>:
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002c54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c5c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002c60:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002c6c:	bf00      	nop
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bc80      	pop	{r7}
 8002c74:	4770      	bx	lr

08002c76 <LL_RCC_SetADCClockSource>:
{
 8002c76:	b480      	push	{r7}
 8002c78:	b083      	sub	sp, #12
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002c7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c86:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002c8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002c96:	bf00      	nop
 8002c98:	370c      	adds	r7, #12
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bc80      	pop	{r7}
 8002c9e:	4770      	bx	lr

08002ca0 <LL_RCC_SetRTCClockSource>:
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002ca8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cb0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002cb4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002cc0:	bf00      	nop
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bc80      	pop	{r7}
 8002cc8:	4770      	bx	lr

08002cca <LL_RCC_GetRTCClockSource>:
{
 8002cca:	b480      	push	{r7}
 8002ccc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002cce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bc80      	pop	{r7}
 8002ce0:	4770      	bx	lr

08002ce2 <LL_RCC_ForceBackupDomainReset>:
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002ce6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cf6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002cfa:	bf00      	nop
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bc80      	pop	{r7}
 8002d00:	4770      	bx	lr

08002d02 <LL_RCC_ReleaseBackupDomainReset>:
{
 8002d02:	b480      	push	{r7}
 8002d04:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002d06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002d1a:	bf00      	nop
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bc80      	pop	{r7}
 8002d20:	4770      	bx	lr
	...

08002d24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b086      	sub	sp, #24
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8002d30:	2300      	movs	r3, #0
 8002d32:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002d34:	2300      	movs	r3, #0
 8002d36:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d058      	beq.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8002d44:	f7fe fdc2 	bl	80018cc <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d48:	f7fd ff86 	bl	8000c58 <HAL_GetTick>
 8002d4c:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002d4e:	e009      	b.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d50:	f7fd ff82 	bl	8000c58 <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d902      	bls.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	74fb      	strb	r3, [r7, #19]
        break;
 8002d62:	e006      	b.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002d64:	4b7b      	ldr	r3, [pc, #492]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d70:	d1ee      	bne.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8002d72:	7cfb      	ldrb	r3, [r7, #19]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d13c      	bne.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8002d78:	f7ff ffa7 	bl	8002cca <LL_RCC_GetRTCClockSource>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d00f      	beq.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d92:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d94:	f7ff ffa5 	bl	8002ce2 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d98:	f7ff ffb3 	bl	8002d02 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d014      	beq.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db0:	f7fd ff52 	bl	8000c58 <HAL_GetTick>
 8002db4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8002db6:	e00b      	b.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002db8:	f7fd ff4e 	bl	8000c58 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d902      	bls.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	74fb      	strb	r3, [r7, #19]
            break;
 8002dce:	e004      	b.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8002dd0:	f7ff feb4 	bl	8002b3c <LL_RCC_LSE_IsReady>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d1ee      	bne.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8002dda:	7cfb      	ldrb	r3, [r7, #19]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d105      	bne.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002de4:	4618      	mov	r0, r3
 8002de6:	f7ff ff5b 	bl	8002ca0 <LL_RCC_SetRTCClockSource>
 8002dea:	e004      	b.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002dec:	7cfb      	ldrb	r3, [r7, #19]
 8002dee:	74bb      	strb	r3, [r7, #18]
 8002df0:	e001      	b.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002df2:	7cfb      	ldrb	r3, [r7, #19]
 8002df4:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0301 	and.w	r3, r3, #1
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d004      	beq.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7ff fea9 	bl	8002b5e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0302 	and.w	r3, r3, #2
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d004      	beq.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7ff fe9e 	bl	8002b5e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0320 	and.w	r3, r3, #32
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d004      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	691b      	ldr	r3, [r3, #16]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7ff fec0 	bl	8002bb8 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d004      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a1b      	ldr	r3, [r3, #32]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7ff fee6 	bl	8002c1a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d004      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7ff fedb 	bl	8002c1a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d004      	beq.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7ff fed0 	bl	8002c1a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d004      	beq.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	695b      	ldr	r3, [r3, #20]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7ff fea9 	bl	8002be2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d004      	beq.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	699b      	ldr	r3, [r3, #24]
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f7ff fe9e 	bl	8002be2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d004      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	69db      	ldr	r3, [r3, #28]
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7ff fe93 	bl	8002be2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0310 	and.w	r3, r3, #16
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d011      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7ff fe5e 	bl	8002b8e <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002eda:	d107      	bne.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8002edc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ee6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002eea:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d010      	beq.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7ff fea5 	bl	8002c4c <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d107      	bne.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002f0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f18:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d011      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7ff fea3 	bl	8002c76 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f38:	d107      	bne.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002f3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f48:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8002f4a:	7cbb      	ldrb	r3, [r7, #18]
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3718      	adds	r7, #24
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	58000400 	.word	0x58000400

08002f58 <LL_RCC_GetUSARTClockSource>:
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8002f60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f64:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	401a      	ands	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	041b      	lsls	r3, r3, #16
 8002f70:	4313      	orrs	r3, r2
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	370c      	adds	r7, #12
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bc80      	pop	{r7}
 8002f7a:	4770      	bx	lr

08002f7c <LL_RCC_GetLPUARTClockSource>:
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8002f84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f88:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4013      	ands	r3, r2
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bc80      	pop	{r7}
 8002f98:	4770      	bx	lr

08002f9a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b082      	sub	sp, #8
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d101      	bne.n	8002fac <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e042      	b.n	8003032 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d106      	bne.n	8002fc4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f7fd fca8 	bl	8000914 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2224      	movs	r2, #36	; 0x24
 8002fc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f022 0201 	bic.w	r2, r2, #1
 8002fda:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f000 f8b3 	bl	8003148 <UART_SetConfig>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d101      	bne.n	8002fec <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e022      	b.n	8003032 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d002      	beq.n	8002ffa <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f000 fb1b 	bl	8003630 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	685a      	ldr	r2, [r3, #4]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003008:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	689a      	ldr	r2, [r3, #8]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003018:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f042 0201 	orr.w	r2, r2, #1
 8003028:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 fba1 	bl	8003772 <UART_CheckIdleState>
 8003030:	4603      	mov	r3, r0
}
 8003032:	4618      	mov	r0, r3
 8003034:	3708      	adds	r7, #8
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}

0800303a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800303a:	b580      	push	{r7, lr}
 800303c:	b08a      	sub	sp, #40	; 0x28
 800303e:	af02      	add	r7, sp, #8
 8003040:	60f8      	str	r0, [r7, #12]
 8003042:	60b9      	str	r1, [r7, #8]
 8003044:	603b      	str	r3, [r7, #0]
 8003046:	4613      	mov	r3, r2
 8003048:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003050:	2b20      	cmp	r3, #32
 8003052:	d173      	bne.n	800313c <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d002      	beq.n	8003060 <HAL_UART_Transmit+0x26>
 800305a:	88fb      	ldrh	r3, [r7, #6]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d101      	bne.n	8003064 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e06c      	b.n	800313e <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2200      	movs	r2, #0
 8003068:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2221      	movs	r2, #33	; 0x21
 8003070:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003074:	f7fd fdf0 	bl	8000c58 <HAL_GetTick>
 8003078:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	88fa      	ldrh	r2, [r7, #6]
 800307e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	88fa      	ldrh	r2, [r7, #6]
 8003086:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003092:	d108      	bne.n	80030a6 <HAL_UART_Transmit+0x6c>
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	691b      	ldr	r3, [r3, #16]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d104      	bne.n	80030a6 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800309c:	2300      	movs	r3, #0
 800309e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	61bb      	str	r3, [r7, #24]
 80030a4:	e003      	b.n	80030ae <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030aa:	2300      	movs	r3, #0
 80030ac:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80030ae:	e02c      	b.n	800310a <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	9300      	str	r3, [sp, #0]
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	2200      	movs	r2, #0
 80030b8:	2180      	movs	r1, #128	; 0x80
 80030ba:	68f8      	ldr	r0, [r7, #12]
 80030bc:	f000 fba7 	bl	800380e <UART_WaitOnFlagUntilTimeout>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d001      	beq.n	80030ca <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e039      	b.n	800313e <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d10b      	bne.n	80030e8 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	881b      	ldrh	r3, [r3, #0]
 80030d4:	461a      	mov	r2, r3
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030de:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	3302      	adds	r3, #2
 80030e4:	61bb      	str	r3, [r7, #24]
 80030e6:	e007      	b.n	80030f8 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	781a      	ldrb	r2, [r3, #0]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	3301      	adds	r3, #1
 80030f6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80030fe:	b29b      	uxth	r3, r3
 8003100:	3b01      	subs	r3, #1
 8003102:	b29a      	uxth	r2, r3
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003110:	b29b      	uxth	r3, r3
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1cc      	bne.n	80030b0 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	9300      	str	r3, [sp, #0]
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	2200      	movs	r2, #0
 800311e:	2140      	movs	r1, #64	; 0x40
 8003120:	68f8      	ldr	r0, [r7, #12]
 8003122:	f000 fb74 	bl	800380e <UART_WaitOnFlagUntilTimeout>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d001      	beq.n	8003130 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	e006      	b.n	800313e <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2220      	movs	r2, #32
 8003134:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8003138:	2300      	movs	r3, #0
 800313a:	e000      	b.n	800313e <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 800313c:	2302      	movs	r3, #2
  }
}
 800313e:	4618      	mov	r0, r3
 8003140:	3720      	adds	r7, #32
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
	...

08003148 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003148:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800314c:	b08c      	sub	sp, #48	; 0x30
 800314e:	af00      	add	r7, sp, #0
 8003150:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003152:	2300      	movs	r3, #0
 8003154:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	689a      	ldr	r2, [r3, #8]
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	691b      	ldr	r3, [r3, #16]
 8003160:	431a      	orrs	r2, r3
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	695b      	ldr	r3, [r3, #20]
 8003166:	431a      	orrs	r2, r3
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	69db      	ldr	r3, [r3, #28]
 800316c:	4313      	orrs	r3, r2
 800316e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	4b94      	ldr	r3, [pc, #592]	; (80033c8 <UART_SetConfig+0x280>)
 8003178:	4013      	ands	r3, r2
 800317a:	697a      	ldr	r2, [r7, #20]
 800317c:	6812      	ldr	r2, [r2, #0]
 800317e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003180:	430b      	orrs	r3, r1
 8003182:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	68da      	ldr	r2, [r3, #12]
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	430a      	orrs	r2, r1
 8003198:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	699b      	ldr	r3, [r3, #24]
 800319e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a89      	ldr	r2, [pc, #548]	; (80033cc <UART_SetConfig+0x284>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d004      	beq.n	80031b4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	6a1b      	ldr	r3, [r3, #32]
 80031ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031b0:	4313      	orrs	r3, r2
 80031b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80031be:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80031c2:	697a      	ldr	r2, [r7, #20]
 80031c4:	6812      	ldr	r2, [r2, #0]
 80031c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80031c8:	430b      	orrs	r3, r1
 80031ca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d2:	f023 010f 	bic.w	r1, r3, #15
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	430a      	orrs	r2, r1
 80031e0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a7a      	ldr	r2, [pc, #488]	; (80033d0 <UART_SetConfig+0x288>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d127      	bne.n	800323c <UART_SetConfig+0xf4>
 80031ec:	2003      	movs	r0, #3
 80031ee:	f7ff feb3 	bl	8002f58 <LL_RCC_GetUSARTClockSource>
 80031f2:	4603      	mov	r3, r0
 80031f4:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 80031f8:	2b03      	cmp	r3, #3
 80031fa:	d81b      	bhi.n	8003234 <UART_SetConfig+0xec>
 80031fc:	a201      	add	r2, pc, #4	; (adr r2, 8003204 <UART_SetConfig+0xbc>)
 80031fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003202:	bf00      	nop
 8003204:	08003215 	.word	0x08003215
 8003208:	08003225 	.word	0x08003225
 800320c:	0800321d 	.word	0x0800321d
 8003210:	0800322d 	.word	0x0800322d
 8003214:	2301      	movs	r3, #1
 8003216:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800321a:	e080      	b.n	800331e <UART_SetConfig+0x1d6>
 800321c:	2302      	movs	r3, #2
 800321e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003222:	e07c      	b.n	800331e <UART_SetConfig+0x1d6>
 8003224:	2304      	movs	r3, #4
 8003226:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800322a:	e078      	b.n	800331e <UART_SetConfig+0x1d6>
 800322c:	2308      	movs	r3, #8
 800322e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003232:	e074      	b.n	800331e <UART_SetConfig+0x1d6>
 8003234:	2310      	movs	r3, #16
 8003236:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800323a:	e070      	b.n	800331e <UART_SetConfig+0x1d6>
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a64      	ldr	r2, [pc, #400]	; (80033d4 <UART_SetConfig+0x28c>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d138      	bne.n	80032b8 <UART_SetConfig+0x170>
 8003246:	200c      	movs	r0, #12
 8003248:	f7ff fe86 	bl	8002f58 <LL_RCC_GetUSARTClockSource>
 800324c:	4603      	mov	r3, r0
 800324e:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8003252:	2b0c      	cmp	r3, #12
 8003254:	d82c      	bhi.n	80032b0 <UART_SetConfig+0x168>
 8003256:	a201      	add	r2, pc, #4	; (adr r2, 800325c <UART_SetConfig+0x114>)
 8003258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800325c:	08003291 	.word	0x08003291
 8003260:	080032b1 	.word	0x080032b1
 8003264:	080032b1 	.word	0x080032b1
 8003268:	080032b1 	.word	0x080032b1
 800326c:	080032a1 	.word	0x080032a1
 8003270:	080032b1 	.word	0x080032b1
 8003274:	080032b1 	.word	0x080032b1
 8003278:	080032b1 	.word	0x080032b1
 800327c:	08003299 	.word	0x08003299
 8003280:	080032b1 	.word	0x080032b1
 8003284:	080032b1 	.word	0x080032b1
 8003288:	080032b1 	.word	0x080032b1
 800328c:	080032a9 	.word	0x080032a9
 8003290:	2300      	movs	r3, #0
 8003292:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003296:	e042      	b.n	800331e <UART_SetConfig+0x1d6>
 8003298:	2302      	movs	r3, #2
 800329a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800329e:	e03e      	b.n	800331e <UART_SetConfig+0x1d6>
 80032a0:	2304      	movs	r3, #4
 80032a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80032a6:	e03a      	b.n	800331e <UART_SetConfig+0x1d6>
 80032a8:	2308      	movs	r3, #8
 80032aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80032ae:	e036      	b.n	800331e <UART_SetConfig+0x1d6>
 80032b0:	2310      	movs	r3, #16
 80032b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80032b6:	e032      	b.n	800331e <UART_SetConfig+0x1d6>
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a43      	ldr	r2, [pc, #268]	; (80033cc <UART_SetConfig+0x284>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d12a      	bne.n	8003318 <UART_SetConfig+0x1d0>
 80032c2:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80032c6:	f7ff fe59 	bl	8002f7c <LL_RCC_GetLPUARTClockSource>
 80032ca:	4603      	mov	r3, r0
 80032cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80032d0:	d01a      	beq.n	8003308 <UART_SetConfig+0x1c0>
 80032d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80032d6:	d81b      	bhi.n	8003310 <UART_SetConfig+0x1c8>
 80032d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032dc:	d00c      	beq.n	80032f8 <UART_SetConfig+0x1b0>
 80032de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032e2:	d815      	bhi.n	8003310 <UART_SetConfig+0x1c8>
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d003      	beq.n	80032f0 <UART_SetConfig+0x1a8>
 80032e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032ec:	d008      	beq.n	8003300 <UART_SetConfig+0x1b8>
 80032ee:	e00f      	b.n	8003310 <UART_SetConfig+0x1c8>
 80032f0:	2300      	movs	r3, #0
 80032f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80032f6:	e012      	b.n	800331e <UART_SetConfig+0x1d6>
 80032f8:	2302      	movs	r3, #2
 80032fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80032fe:	e00e      	b.n	800331e <UART_SetConfig+0x1d6>
 8003300:	2304      	movs	r3, #4
 8003302:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003306:	e00a      	b.n	800331e <UART_SetConfig+0x1d6>
 8003308:	2308      	movs	r3, #8
 800330a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800330e:	e006      	b.n	800331e <UART_SetConfig+0x1d6>
 8003310:	2310      	movs	r3, #16
 8003312:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003316:	e002      	b.n	800331e <UART_SetConfig+0x1d6>
 8003318:	2310      	movs	r3, #16
 800331a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a2a      	ldr	r2, [pc, #168]	; (80033cc <UART_SetConfig+0x284>)
 8003324:	4293      	cmp	r3, r2
 8003326:	f040 80a4 	bne.w	8003472 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800332a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800332e:	2b08      	cmp	r3, #8
 8003330:	d823      	bhi.n	800337a <UART_SetConfig+0x232>
 8003332:	a201      	add	r2, pc, #4	; (adr r2, 8003338 <UART_SetConfig+0x1f0>)
 8003334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003338:	0800335d 	.word	0x0800335d
 800333c:	0800337b 	.word	0x0800337b
 8003340:	08003365 	.word	0x08003365
 8003344:	0800337b 	.word	0x0800337b
 8003348:	0800336b 	.word	0x0800336b
 800334c:	0800337b 	.word	0x0800337b
 8003350:	0800337b 	.word	0x0800337b
 8003354:	0800337b 	.word	0x0800337b
 8003358:	08003373 	.word	0x08003373
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800335c:	f7ff fb18 	bl	8002990 <HAL_RCC_GetPCLK1Freq>
 8003360:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003362:	e010      	b.n	8003386 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003364:	4b1c      	ldr	r3, [pc, #112]	; (80033d8 <UART_SetConfig+0x290>)
 8003366:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003368:	e00d      	b.n	8003386 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800336a:	f7ff fa5d 	bl	8002828 <HAL_RCC_GetSysClockFreq>
 800336e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003370:	e009      	b.n	8003386 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003372:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003376:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003378:	e005      	b.n	8003386 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800337a:	2300      	movs	r3, #0
 800337c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003384:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003388:	2b00      	cmp	r3, #0
 800338a:	f000 8137 	beq.w	80035fc <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003392:	4a12      	ldr	r2, [pc, #72]	; (80033dc <UART_SetConfig+0x294>)
 8003394:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003398:	461a      	mov	r2, r3
 800339a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339c:	fbb3 f3f2 	udiv	r3, r3, r2
 80033a0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	685a      	ldr	r2, [r3, #4]
 80033a6:	4613      	mov	r3, r2
 80033a8:	005b      	lsls	r3, r3, #1
 80033aa:	4413      	add	r3, r2
 80033ac:	69ba      	ldr	r2, [r7, #24]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d305      	bcc.n	80033be <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80033b8:	69ba      	ldr	r2, [r7, #24]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d910      	bls.n	80033e0 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80033c4:	e11a      	b.n	80035fc <UART_SetConfig+0x4b4>
 80033c6:	bf00      	nop
 80033c8:	cfff69f3 	.word	0xcfff69f3
 80033cc:	40008000 	.word	0x40008000
 80033d0:	40013800 	.word	0x40013800
 80033d4:	40004400 	.word	0x40004400
 80033d8:	00f42400 	.word	0x00f42400
 80033dc:	08004bf4 	.word	0x08004bf4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80033e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e2:	2200      	movs	r2, #0
 80033e4:	60bb      	str	r3, [r7, #8]
 80033e6:	60fa      	str	r2, [r7, #12]
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ec:	4a8e      	ldr	r2, [pc, #568]	; (8003628 <UART_SetConfig+0x4e0>)
 80033ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	2200      	movs	r2, #0
 80033f6:	603b      	str	r3, [r7, #0]
 80033f8:	607a      	str	r2, [r7, #4]
 80033fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80033fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003402:	f7fc ff0d 	bl	8000220 <__aeabi_uldivmod>
 8003406:	4602      	mov	r2, r0
 8003408:	460b      	mov	r3, r1
 800340a:	4610      	mov	r0, r2
 800340c:	4619      	mov	r1, r3
 800340e:	f04f 0200 	mov.w	r2, #0
 8003412:	f04f 0300 	mov.w	r3, #0
 8003416:	020b      	lsls	r3, r1, #8
 8003418:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800341c:	0202      	lsls	r2, r0, #8
 800341e:	6979      	ldr	r1, [r7, #20]
 8003420:	6849      	ldr	r1, [r1, #4]
 8003422:	0849      	lsrs	r1, r1, #1
 8003424:	2000      	movs	r0, #0
 8003426:	460c      	mov	r4, r1
 8003428:	4605      	mov	r5, r0
 800342a:	eb12 0804 	adds.w	r8, r2, r4
 800342e:	eb43 0905 	adc.w	r9, r3, r5
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	469a      	mov	sl, r3
 800343a:	4693      	mov	fp, r2
 800343c:	4652      	mov	r2, sl
 800343e:	465b      	mov	r3, fp
 8003440:	4640      	mov	r0, r8
 8003442:	4649      	mov	r1, r9
 8003444:	f7fc feec 	bl	8000220 <__aeabi_uldivmod>
 8003448:	4602      	mov	r2, r0
 800344a:	460b      	mov	r3, r1
 800344c:	4613      	mov	r3, r2
 800344e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003450:	6a3b      	ldr	r3, [r7, #32]
 8003452:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003456:	d308      	bcc.n	800346a <UART_SetConfig+0x322>
 8003458:	6a3b      	ldr	r3, [r7, #32]
 800345a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800345e:	d204      	bcs.n	800346a <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	6a3a      	ldr	r2, [r7, #32]
 8003466:	60da      	str	r2, [r3, #12]
 8003468:	e0c8      	b.n	80035fc <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003470:	e0c4      	b.n	80035fc <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	69db      	ldr	r3, [r3, #28]
 8003476:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800347a:	d167      	bne.n	800354c <UART_SetConfig+0x404>
  {
    switch (clocksource)
 800347c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003480:	2b08      	cmp	r3, #8
 8003482:	d828      	bhi.n	80034d6 <UART_SetConfig+0x38e>
 8003484:	a201      	add	r2, pc, #4	; (adr r2, 800348c <UART_SetConfig+0x344>)
 8003486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800348a:	bf00      	nop
 800348c:	080034b1 	.word	0x080034b1
 8003490:	080034b9 	.word	0x080034b9
 8003494:	080034c1 	.word	0x080034c1
 8003498:	080034d7 	.word	0x080034d7
 800349c:	080034c7 	.word	0x080034c7
 80034a0:	080034d7 	.word	0x080034d7
 80034a4:	080034d7 	.word	0x080034d7
 80034a8:	080034d7 	.word	0x080034d7
 80034ac:	080034cf 	.word	0x080034cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034b0:	f7ff fa6e 	bl	8002990 <HAL_RCC_GetPCLK1Freq>
 80034b4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80034b6:	e014      	b.n	80034e2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034b8:	f7ff fa7c 	bl	80029b4 <HAL_RCC_GetPCLK2Freq>
 80034bc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80034be:	e010      	b.n	80034e2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034c0:	4b5a      	ldr	r3, [pc, #360]	; (800362c <UART_SetConfig+0x4e4>)
 80034c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80034c4:	e00d      	b.n	80034e2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034c6:	f7ff f9af 	bl	8002828 <HAL_RCC_GetSysClockFreq>
 80034ca:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80034cc:	e009      	b.n	80034e2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80034d4:	e005      	b.n	80034e2 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 80034d6:	2300      	movs	r3, #0
 80034d8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80034e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80034e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	f000 8089 	beq.w	80035fc <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ee:	4a4e      	ldr	r2, [pc, #312]	; (8003628 <UART_SetConfig+0x4e0>)
 80034f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80034f4:	461a      	mov	r2, r3
 80034f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80034fc:	005a      	lsls	r2, r3, #1
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	085b      	lsrs	r3, r3, #1
 8003504:	441a      	add	r2, r3
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	fbb2 f3f3 	udiv	r3, r2, r3
 800350e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003510:	6a3b      	ldr	r3, [r7, #32]
 8003512:	2b0f      	cmp	r3, #15
 8003514:	d916      	bls.n	8003544 <UART_SetConfig+0x3fc>
 8003516:	6a3b      	ldr	r3, [r7, #32]
 8003518:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800351c:	d212      	bcs.n	8003544 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800351e:	6a3b      	ldr	r3, [r7, #32]
 8003520:	b29b      	uxth	r3, r3
 8003522:	f023 030f 	bic.w	r3, r3, #15
 8003526:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003528:	6a3b      	ldr	r3, [r7, #32]
 800352a:	085b      	lsrs	r3, r3, #1
 800352c:	b29b      	uxth	r3, r3
 800352e:	f003 0307 	and.w	r3, r3, #7
 8003532:	b29a      	uxth	r2, r3
 8003534:	8bfb      	ldrh	r3, [r7, #30]
 8003536:	4313      	orrs	r3, r2
 8003538:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	8bfa      	ldrh	r2, [r7, #30]
 8003540:	60da      	str	r2, [r3, #12]
 8003542:	e05b      	b.n	80035fc <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800354a:	e057      	b.n	80035fc <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800354c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003550:	2b08      	cmp	r3, #8
 8003552:	d828      	bhi.n	80035a6 <UART_SetConfig+0x45e>
 8003554:	a201      	add	r2, pc, #4	; (adr r2, 800355c <UART_SetConfig+0x414>)
 8003556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800355a:	bf00      	nop
 800355c:	08003581 	.word	0x08003581
 8003560:	08003589 	.word	0x08003589
 8003564:	08003591 	.word	0x08003591
 8003568:	080035a7 	.word	0x080035a7
 800356c:	08003597 	.word	0x08003597
 8003570:	080035a7 	.word	0x080035a7
 8003574:	080035a7 	.word	0x080035a7
 8003578:	080035a7 	.word	0x080035a7
 800357c:	0800359f 	.word	0x0800359f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003580:	f7ff fa06 	bl	8002990 <HAL_RCC_GetPCLK1Freq>
 8003584:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003586:	e014      	b.n	80035b2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003588:	f7ff fa14 	bl	80029b4 <HAL_RCC_GetPCLK2Freq>
 800358c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800358e:	e010      	b.n	80035b2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003590:	4b26      	ldr	r3, [pc, #152]	; (800362c <UART_SetConfig+0x4e4>)
 8003592:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003594:	e00d      	b.n	80035b2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003596:	f7ff f947 	bl	8002828 <HAL_RCC_GetSysClockFreq>
 800359a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800359c:	e009      	b.n	80035b2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800359e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80035a4:	e005      	b.n	80035b2 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 80035a6:	2300      	movs	r3, #0
 80035a8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80035b0:	bf00      	nop
    }

    if (pclk != 0U)
 80035b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d021      	beq.n	80035fc <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035bc:	4a1a      	ldr	r2, [pc, #104]	; (8003628 <UART_SetConfig+0x4e0>)
 80035be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80035c2:	461a      	mov	r2, r3
 80035c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c6:	fbb3 f2f2 	udiv	r2, r3, r2
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	085b      	lsrs	r3, r3, #1
 80035d0:	441a      	add	r2, r3
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80035da:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035dc:	6a3b      	ldr	r3, [r7, #32]
 80035de:	2b0f      	cmp	r3, #15
 80035e0:	d909      	bls.n	80035f6 <UART_SetConfig+0x4ae>
 80035e2:	6a3b      	ldr	r3, [r7, #32]
 80035e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035e8:	d205      	bcs.n	80035f6 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80035ea:	6a3b      	ldr	r3, [r7, #32]
 80035ec:	b29a      	uxth	r2, r3
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	60da      	str	r2, [r3, #12]
 80035f4:	e002      	b.n	80035fc <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	2201      	movs	r2, #1
 8003600:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	2201      	movs	r2, #1
 8003608:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	2200      	movs	r2, #0
 8003610:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	2200      	movs	r2, #0
 8003616:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003618:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800361c:	4618      	mov	r0, r3
 800361e:	3730      	adds	r7, #48	; 0x30
 8003620:	46bd      	mov	sp, r7
 8003622:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003626:	bf00      	nop
 8003628:	08004bf4 	.word	0x08004bf4
 800362c:	00f42400 	.word	0x00f42400

08003630 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800363c:	f003 0301 	and.w	r3, r3, #1
 8003640:	2b00      	cmp	r3, #0
 8003642:	d00a      	beq.n	800365a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	430a      	orrs	r2, r1
 8003658:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800365e:	f003 0302 	and.w	r3, r3, #2
 8003662:	2b00      	cmp	r3, #0
 8003664:	d00a      	beq.n	800367c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	430a      	orrs	r2, r1
 800367a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003680:	f003 0304 	and.w	r3, r3, #4
 8003684:	2b00      	cmp	r3, #0
 8003686:	d00a      	beq.n	800369e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	430a      	orrs	r2, r1
 800369c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a2:	f003 0308 	and.w	r3, r3, #8
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00a      	beq.n	80036c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	430a      	orrs	r2, r1
 80036be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c4:	f003 0310 	and.w	r3, r3, #16
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00a      	beq.n	80036e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	430a      	orrs	r2, r1
 80036e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e6:	f003 0320 	and.w	r3, r3, #32
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00a      	beq.n	8003704 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	430a      	orrs	r2, r1
 8003702:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800370c:	2b00      	cmp	r3, #0
 800370e:	d01a      	beq.n	8003746 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	430a      	orrs	r2, r1
 8003724:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800372a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800372e:	d10a      	bne.n	8003746 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	430a      	orrs	r2, r1
 8003744:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800374a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00a      	beq.n	8003768 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	430a      	orrs	r2, r1
 8003766:	605a      	str	r2, [r3, #4]
  }
}
 8003768:	bf00      	nop
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	bc80      	pop	{r7}
 8003770:	4770      	bx	lr

08003772 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003772:	b580      	push	{r7, lr}
 8003774:	b086      	sub	sp, #24
 8003776:	af02      	add	r7, sp, #8
 8003778:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003782:	f7fd fa69 	bl	8000c58 <HAL_GetTick>
 8003786:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0308 	and.w	r3, r3, #8
 8003792:	2b08      	cmp	r3, #8
 8003794:	d10e      	bne.n	80037b4 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003796:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800379a:	9300      	str	r3, [sp, #0]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2200      	movs	r2, #0
 80037a0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f000 f832 	bl	800380e <UART_WaitOnFlagUntilTimeout>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d001      	beq.n	80037b4 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e028      	b.n	8003806 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0304 	and.w	r3, r3, #4
 80037be:	2b04      	cmp	r3, #4
 80037c0:	d10e      	bne.n	80037e0 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037c2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80037c6:	9300      	str	r3, [sp, #0]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f000 f81c 	bl	800380e <UART_WaitOnFlagUntilTimeout>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d001      	beq.n	80037e0 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e012      	b.n	8003806 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2220      	movs	r2, #32
 80037e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2220      	movs	r2, #32
 80037ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3710      	adds	r7, #16
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}

0800380e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800380e:	b580      	push	{r7, lr}
 8003810:	b09c      	sub	sp, #112	; 0x70
 8003812:	af00      	add	r7, sp, #0
 8003814:	60f8      	str	r0, [r7, #12]
 8003816:	60b9      	str	r1, [r7, #8]
 8003818:	603b      	str	r3, [r7, #0]
 800381a:	4613      	mov	r3, r2
 800381c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800381e:	e0a9      	b.n	8003974 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003820:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003826:	f000 80a5 	beq.w	8003974 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800382a:	f7fd fa15 	bl	8000c58 <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003836:	429a      	cmp	r2, r3
 8003838:	d302      	bcc.n	8003840 <UART_WaitOnFlagUntilTimeout+0x32>
 800383a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800383c:	2b00      	cmp	r3, #0
 800383e:	d140      	bne.n	80038c2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003846:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003848:	e853 3f00 	ldrex	r3, [r3]
 800384c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800384e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003850:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003854:	667b      	str	r3, [r7, #100]	; 0x64
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	461a      	mov	r2, r3
 800385c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800385e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003860:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003862:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003864:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003866:	e841 2300 	strex	r3, r2, [r1]
 800386a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800386c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800386e:	2b00      	cmp	r3, #0
 8003870:	d1e6      	bne.n	8003840 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	3308      	adds	r3, #8
 8003878:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800387a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800387c:	e853 3f00 	ldrex	r3, [r3]
 8003880:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003884:	f023 0301 	bic.w	r3, r3, #1
 8003888:	663b      	str	r3, [r7, #96]	; 0x60
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	3308      	adds	r3, #8
 8003890:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003892:	64ba      	str	r2, [r7, #72]	; 0x48
 8003894:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003896:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003898:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800389a:	e841 2300 	strex	r3, r2, [r1]
 800389e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80038a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d1e5      	bne.n	8003872 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2220      	movs	r2, #32
 80038aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2220      	movs	r2, #32
 80038b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e069      	b.n	8003996 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0304 	and.w	r3, r3, #4
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d051      	beq.n	8003974 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	69db      	ldr	r3, [r3, #28]
 80038d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038de:	d149      	bne.n	8003974 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038e8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038f2:	e853 3f00 	ldrex	r3, [r3]
 80038f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80038f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80038fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	461a      	mov	r2, r3
 8003906:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003908:	637b      	str	r3, [r7, #52]	; 0x34
 800390a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800390c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800390e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003910:	e841 2300 	strex	r3, r2, [r1]
 8003914:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003918:	2b00      	cmp	r3, #0
 800391a:	d1e6      	bne.n	80038ea <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	3308      	adds	r3, #8
 8003922:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	e853 3f00 	ldrex	r3, [r3]
 800392a:	613b      	str	r3, [r7, #16]
   return(result);
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	f023 0301 	bic.w	r3, r3, #1
 8003932:	66bb      	str	r3, [r7, #104]	; 0x68
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	3308      	adds	r3, #8
 800393a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800393c:	623a      	str	r2, [r7, #32]
 800393e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003940:	69f9      	ldr	r1, [r7, #28]
 8003942:	6a3a      	ldr	r2, [r7, #32]
 8003944:	e841 2300 	strex	r3, r2, [r1]
 8003948:	61bb      	str	r3, [r7, #24]
   return(result);
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d1e5      	bne.n	800391c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2220      	movs	r2, #32
 8003954:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2220      	movs	r2, #32
 800395c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2220      	movs	r2, #32
 8003964:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	e010      	b.n	8003996 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	69da      	ldr	r2, [r3, #28]
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	4013      	ands	r3, r2
 800397e:	68ba      	ldr	r2, [r7, #8]
 8003980:	429a      	cmp	r2, r3
 8003982:	bf0c      	ite	eq
 8003984:	2301      	moveq	r3, #1
 8003986:	2300      	movne	r3, #0
 8003988:	b2db      	uxtb	r3, r3
 800398a:	461a      	mov	r2, r3
 800398c:	79fb      	ldrb	r3, [r7, #7]
 800398e:	429a      	cmp	r2, r3
 8003990:	f43f af46 	beq.w	8003820 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3770      	adds	r7, #112	; 0x70
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}

0800399e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800399e:	b480      	push	{r7}
 80039a0:	b085      	sub	sp, #20
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d101      	bne.n	80039b4 <HAL_UARTEx_DisableFifoMode+0x16>
 80039b0:	2302      	movs	r3, #2
 80039b2:	e027      	b.n	8003a04 <HAL_UARTEx_DisableFifoMode+0x66>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2224      	movs	r2, #36	; 0x24
 80039c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f022 0201 	bic.w	r2, r2, #1
 80039da:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80039e2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	68fa      	ldr	r2, [r7, #12]
 80039f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2220      	movs	r2, #32
 80039f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003a02:	2300      	movs	r3, #0
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3714      	adds	r7, #20
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bc80      	pop	{r7}
 8003a0c:	4770      	bx	lr

08003a0e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003a0e:	b580      	push	{r7, lr}
 8003a10:	b084      	sub	sp, #16
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	6078      	str	r0, [r7, #4]
 8003a16:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d101      	bne.n	8003a26 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003a22:	2302      	movs	r3, #2
 8003a24:	e02d      	b.n	8003a82 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2201      	movs	r2, #1
 8003a2a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2224      	movs	r2, #36	; 0x24
 8003a32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f022 0201 	bic.w	r2, r2, #1
 8003a4c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	683a      	ldr	r2, [r7, #0]
 8003a5e:	430a      	orrs	r2, r1
 8003a60:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 f850 	bl	8003b08 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68fa      	ldr	r2, [r7, #12]
 8003a6e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2220      	movs	r2, #32
 8003a74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3710      	adds	r7, #16
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}

08003a8a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003a8a:	b580      	push	{r7, lr}
 8003a8c:	b084      	sub	sp, #16
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
 8003a92:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d101      	bne.n	8003aa2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003a9e:	2302      	movs	r3, #2
 8003aa0:	e02d      	b.n	8003afe <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2224      	movs	r2, #36	; 0x24
 8003aae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f022 0201 	bic.w	r2, r2, #1
 8003ac8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	683a      	ldr	r2, [r7, #0]
 8003ada:	430a      	orrs	r2, r1
 8003adc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 f812 	bl	8003b08 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	68fa      	ldr	r2, [r7, #12]
 8003aea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2220      	movs	r2, #32
 8003af0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003afc:	2300      	movs	r3, #0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3710      	adds	r7, #16
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
	...

08003b08 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b085      	sub	sp, #20
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d108      	bne.n	8003b2a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003b28:	e031      	b.n	8003b8e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003b2a:	2308      	movs	r3, #8
 8003b2c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003b2e:	2308      	movs	r3, #8
 8003b30:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	0e5b      	lsrs	r3, r3, #25
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	f003 0307 	and.w	r3, r3, #7
 8003b40:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	0f5b      	lsrs	r3, r3, #29
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	f003 0307 	and.w	r3, r3, #7
 8003b50:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003b52:	7bbb      	ldrb	r3, [r7, #14]
 8003b54:	7b3a      	ldrb	r2, [r7, #12]
 8003b56:	4910      	ldr	r1, [pc, #64]	; (8003b98 <UARTEx_SetNbDataToProcess+0x90>)
 8003b58:	5c8a      	ldrb	r2, [r1, r2]
 8003b5a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003b5e:	7b3a      	ldrb	r2, [r7, #12]
 8003b60:	490e      	ldr	r1, [pc, #56]	; (8003b9c <UARTEx_SetNbDataToProcess+0x94>)
 8003b62:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003b64:	fb93 f3f2 	sdiv	r3, r3, r2
 8003b68:	b29a      	uxth	r2, r3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003b70:	7bfb      	ldrb	r3, [r7, #15]
 8003b72:	7b7a      	ldrb	r2, [r7, #13]
 8003b74:	4908      	ldr	r1, [pc, #32]	; (8003b98 <UARTEx_SetNbDataToProcess+0x90>)
 8003b76:	5c8a      	ldrb	r2, [r1, r2]
 8003b78:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003b7c:	7b7a      	ldrb	r2, [r7, #13]
 8003b7e:	4907      	ldr	r1, [pc, #28]	; (8003b9c <UARTEx_SetNbDataToProcess+0x94>)
 8003b80:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003b82:	fb93 f3f2 	sdiv	r3, r3, r2
 8003b86:	b29a      	uxth	r2, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003b8e:	bf00      	nop
 8003b90:	3714      	adds	r7, #20
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bc80      	pop	{r7}
 8003b96:	4770      	bx	lr
 8003b98:	08004c0c 	.word	0x08004c0c
 8003b9c:	08004c14 	.word	0x08004c14

08003ba0 <__errno>:
 8003ba0:	4b01      	ldr	r3, [pc, #4]	; (8003ba8 <__errno+0x8>)
 8003ba2:	6818      	ldr	r0, [r3, #0]
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop
 8003ba8:	20000010 	.word	0x20000010

08003bac <__libc_init_array>:
 8003bac:	b570      	push	{r4, r5, r6, lr}
 8003bae:	4d0d      	ldr	r5, [pc, #52]	; (8003be4 <__libc_init_array+0x38>)
 8003bb0:	4c0d      	ldr	r4, [pc, #52]	; (8003be8 <__libc_init_array+0x3c>)
 8003bb2:	1b64      	subs	r4, r4, r5
 8003bb4:	10a4      	asrs	r4, r4, #2
 8003bb6:	2600      	movs	r6, #0
 8003bb8:	42a6      	cmp	r6, r4
 8003bba:	d109      	bne.n	8003bd0 <__libc_init_array+0x24>
 8003bbc:	4d0b      	ldr	r5, [pc, #44]	; (8003bec <__libc_init_array+0x40>)
 8003bbe:	4c0c      	ldr	r4, [pc, #48]	; (8003bf0 <__libc_init_array+0x44>)
 8003bc0:	f000 ffa6 	bl	8004b10 <_init>
 8003bc4:	1b64      	subs	r4, r4, r5
 8003bc6:	10a4      	asrs	r4, r4, #2
 8003bc8:	2600      	movs	r6, #0
 8003bca:	42a6      	cmp	r6, r4
 8003bcc:	d105      	bne.n	8003bda <__libc_init_array+0x2e>
 8003bce:	bd70      	pop	{r4, r5, r6, pc}
 8003bd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bd4:	4798      	blx	r3
 8003bd6:	3601      	adds	r6, #1
 8003bd8:	e7ee      	b.n	8003bb8 <__libc_init_array+0xc>
 8003bda:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bde:	4798      	blx	r3
 8003be0:	3601      	adds	r6, #1
 8003be2:	e7f2      	b.n	8003bca <__libc_init_array+0x1e>
 8003be4:	08004cbc 	.word	0x08004cbc
 8003be8:	08004cbc 	.word	0x08004cbc
 8003bec:	08004cbc 	.word	0x08004cbc
 8003bf0:	08004cc0 	.word	0x08004cc0

08003bf4 <memset>:
 8003bf4:	4402      	add	r2, r0
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d100      	bne.n	8003bfe <memset+0xa>
 8003bfc:	4770      	bx	lr
 8003bfe:	f803 1b01 	strb.w	r1, [r3], #1
 8003c02:	e7f9      	b.n	8003bf8 <memset+0x4>

08003c04 <iprintf>:
 8003c04:	b40f      	push	{r0, r1, r2, r3}
 8003c06:	4b0a      	ldr	r3, [pc, #40]	; (8003c30 <iprintf+0x2c>)
 8003c08:	b513      	push	{r0, r1, r4, lr}
 8003c0a:	681c      	ldr	r4, [r3, #0]
 8003c0c:	b124      	cbz	r4, 8003c18 <iprintf+0x14>
 8003c0e:	69a3      	ldr	r3, [r4, #24]
 8003c10:	b913      	cbnz	r3, 8003c18 <iprintf+0x14>
 8003c12:	4620      	mov	r0, r4
 8003c14:	f000 f866 	bl	8003ce4 <__sinit>
 8003c18:	ab05      	add	r3, sp, #20
 8003c1a:	9a04      	ldr	r2, [sp, #16]
 8003c1c:	68a1      	ldr	r1, [r4, #8]
 8003c1e:	9301      	str	r3, [sp, #4]
 8003c20:	4620      	mov	r0, r4
 8003c22:	f000 f9bb 	bl	8003f9c <_vfiprintf_r>
 8003c26:	b002      	add	sp, #8
 8003c28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c2c:	b004      	add	sp, #16
 8003c2e:	4770      	bx	lr
 8003c30:	20000010 	.word	0x20000010

08003c34 <std>:
 8003c34:	2300      	movs	r3, #0
 8003c36:	b510      	push	{r4, lr}
 8003c38:	4604      	mov	r4, r0
 8003c3a:	e9c0 3300 	strd	r3, r3, [r0]
 8003c3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003c42:	6083      	str	r3, [r0, #8]
 8003c44:	8181      	strh	r1, [r0, #12]
 8003c46:	6643      	str	r3, [r0, #100]	; 0x64
 8003c48:	81c2      	strh	r2, [r0, #14]
 8003c4a:	6183      	str	r3, [r0, #24]
 8003c4c:	4619      	mov	r1, r3
 8003c4e:	2208      	movs	r2, #8
 8003c50:	305c      	adds	r0, #92	; 0x5c
 8003c52:	f7ff ffcf 	bl	8003bf4 <memset>
 8003c56:	4b05      	ldr	r3, [pc, #20]	; (8003c6c <std+0x38>)
 8003c58:	6263      	str	r3, [r4, #36]	; 0x24
 8003c5a:	4b05      	ldr	r3, [pc, #20]	; (8003c70 <std+0x3c>)
 8003c5c:	62a3      	str	r3, [r4, #40]	; 0x28
 8003c5e:	4b05      	ldr	r3, [pc, #20]	; (8003c74 <std+0x40>)
 8003c60:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003c62:	4b05      	ldr	r3, [pc, #20]	; (8003c78 <std+0x44>)
 8003c64:	6224      	str	r4, [r4, #32]
 8003c66:	6323      	str	r3, [r4, #48]	; 0x30
 8003c68:	bd10      	pop	{r4, pc}
 8003c6a:	bf00      	nop
 8003c6c:	08004545 	.word	0x08004545
 8003c70:	08004567 	.word	0x08004567
 8003c74:	0800459f 	.word	0x0800459f
 8003c78:	080045c3 	.word	0x080045c3

08003c7c <_cleanup_r>:
 8003c7c:	4901      	ldr	r1, [pc, #4]	; (8003c84 <_cleanup_r+0x8>)
 8003c7e:	f000 b8af 	b.w	8003de0 <_fwalk_reent>
 8003c82:	bf00      	nop
 8003c84:	08004895 	.word	0x08004895

08003c88 <__sfmoreglue>:
 8003c88:	b570      	push	{r4, r5, r6, lr}
 8003c8a:	2268      	movs	r2, #104	; 0x68
 8003c8c:	1e4d      	subs	r5, r1, #1
 8003c8e:	4355      	muls	r5, r2
 8003c90:	460e      	mov	r6, r1
 8003c92:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003c96:	f000 f8e5 	bl	8003e64 <_malloc_r>
 8003c9a:	4604      	mov	r4, r0
 8003c9c:	b140      	cbz	r0, 8003cb0 <__sfmoreglue+0x28>
 8003c9e:	2100      	movs	r1, #0
 8003ca0:	e9c0 1600 	strd	r1, r6, [r0]
 8003ca4:	300c      	adds	r0, #12
 8003ca6:	60a0      	str	r0, [r4, #8]
 8003ca8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003cac:	f7ff ffa2 	bl	8003bf4 <memset>
 8003cb0:	4620      	mov	r0, r4
 8003cb2:	bd70      	pop	{r4, r5, r6, pc}

08003cb4 <__sfp_lock_acquire>:
 8003cb4:	4801      	ldr	r0, [pc, #4]	; (8003cbc <__sfp_lock_acquire+0x8>)
 8003cb6:	f000 b8b3 	b.w	8003e20 <__retarget_lock_acquire_recursive>
 8003cba:	bf00      	nop
 8003cbc:	20000191 	.word	0x20000191

08003cc0 <__sfp_lock_release>:
 8003cc0:	4801      	ldr	r0, [pc, #4]	; (8003cc8 <__sfp_lock_release+0x8>)
 8003cc2:	f000 b8ae 	b.w	8003e22 <__retarget_lock_release_recursive>
 8003cc6:	bf00      	nop
 8003cc8:	20000191 	.word	0x20000191

08003ccc <__sinit_lock_acquire>:
 8003ccc:	4801      	ldr	r0, [pc, #4]	; (8003cd4 <__sinit_lock_acquire+0x8>)
 8003cce:	f000 b8a7 	b.w	8003e20 <__retarget_lock_acquire_recursive>
 8003cd2:	bf00      	nop
 8003cd4:	20000192 	.word	0x20000192

08003cd8 <__sinit_lock_release>:
 8003cd8:	4801      	ldr	r0, [pc, #4]	; (8003ce0 <__sinit_lock_release+0x8>)
 8003cda:	f000 b8a2 	b.w	8003e22 <__retarget_lock_release_recursive>
 8003cde:	bf00      	nop
 8003ce0:	20000192 	.word	0x20000192

08003ce4 <__sinit>:
 8003ce4:	b510      	push	{r4, lr}
 8003ce6:	4604      	mov	r4, r0
 8003ce8:	f7ff fff0 	bl	8003ccc <__sinit_lock_acquire>
 8003cec:	69a3      	ldr	r3, [r4, #24]
 8003cee:	b11b      	cbz	r3, 8003cf8 <__sinit+0x14>
 8003cf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cf4:	f7ff bff0 	b.w	8003cd8 <__sinit_lock_release>
 8003cf8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003cfc:	6523      	str	r3, [r4, #80]	; 0x50
 8003cfe:	4b13      	ldr	r3, [pc, #76]	; (8003d4c <__sinit+0x68>)
 8003d00:	4a13      	ldr	r2, [pc, #76]	; (8003d50 <__sinit+0x6c>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	62a2      	str	r2, [r4, #40]	; 0x28
 8003d06:	42a3      	cmp	r3, r4
 8003d08:	bf04      	itt	eq
 8003d0a:	2301      	moveq	r3, #1
 8003d0c:	61a3      	streq	r3, [r4, #24]
 8003d0e:	4620      	mov	r0, r4
 8003d10:	f000 f820 	bl	8003d54 <__sfp>
 8003d14:	6060      	str	r0, [r4, #4]
 8003d16:	4620      	mov	r0, r4
 8003d18:	f000 f81c 	bl	8003d54 <__sfp>
 8003d1c:	60a0      	str	r0, [r4, #8]
 8003d1e:	4620      	mov	r0, r4
 8003d20:	f000 f818 	bl	8003d54 <__sfp>
 8003d24:	2200      	movs	r2, #0
 8003d26:	60e0      	str	r0, [r4, #12]
 8003d28:	2104      	movs	r1, #4
 8003d2a:	6860      	ldr	r0, [r4, #4]
 8003d2c:	f7ff ff82 	bl	8003c34 <std>
 8003d30:	68a0      	ldr	r0, [r4, #8]
 8003d32:	2201      	movs	r2, #1
 8003d34:	2109      	movs	r1, #9
 8003d36:	f7ff ff7d 	bl	8003c34 <std>
 8003d3a:	68e0      	ldr	r0, [r4, #12]
 8003d3c:	2202      	movs	r2, #2
 8003d3e:	2112      	movs	r1, #18
 8003d40:	f7ff ff78 	bl	8003c34 <std>
 8003d44:	2301      	movs	r3, #1
 8003d46:	61a3      	str	r3, [r4, #24]
 8003d48:	e7d2      	b.n	8003cf0 <__sinit+0xc>
 8003d4a:	bf00      	nop
 8003d4c:	08004c1c 	.word	0x08004c1c
 8003d50:	08003c7d 	.word	0x08003c7d

08003d54 <__sfp>:
 8003d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d56:	4607      	mov	r7, r0
 8003d58:	f7ff ffac 	bl	8003cb4 <__sfp_lock_acquire>
 8003d5c:	4b1e      	ldr	r3, [pc, #120]	; (8003dd8 <__sfp+0x84>)
 8003d5e:	681e      	ldr	r6, [r3, #0]
 8003d60:	69b3      	ldr	r3, [r6, #24]
 8003d62:	b913      	cbnz	r3, 8003d6a <__sfp+0x16>
 8003d64:	4630      	mov	r0, r6
 8003d66:	f7ff ffbd 	bl	8003ce4 <__sinit>
 8003d6a:	3648      	adds	r6, #72	; 0x48
 8003d6c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003d70:	3b01      	subs	r3, #1
 8003d72:	d503      	bpl.n	8003d7c <__sfp+0x28>
 8003d74:	6833      	ldr	r3, [r6, #0]
 8003d76:	b30b      	cbz	r3, 8003dbc <__sfp+0x68>
 8003d78:	6836      	ldr	r6, [r6, #0]
 8003d7a:	e7f7      	b.n	8003d6c <__sfp+0x18>
 8003d7c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003d80:	b9d5      	cbnz	r5, 8003db8 <__sfp+0x64>
 8003d82:	4b16      	ldr	r3, [pc, #88]	; (8003ddc <__sfp+0x88>)
 8003d84:	60e3      	str	r3, [r4, #12]
 8003d86:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003d8a:	6665      	str	r5, [r4, #100]	; 0x64
 8003d8c:	f000 f847 	bl	8003e1e <__retarget_lock_init_recursive>
 8003d90:	f7ff ff96 	bl	8003cc0 <__sfp_lock_release>
 8003d94:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003d98:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003d9c:	6025      	str	r5, [r4, #0]
 8003d9e:	61a5      	str	r5, [r4, #24]
 8003da0:	2208      	movs	r2, #8
 8003da2:	4629      	mov	r1, r5
 8003da4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003da8:	f7ff ff24 	bl	8003bf4 <memset>
 8003dac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003db0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003db4:	4620      	mov	r0, r4
 8003db6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003db8:	3468      	adds	r4, #104	; 0x68
 8003dba:	e7d9      	b.n	8003d70 <__sfp+0x1c>
 8003dbc:	2104      	movs	r1, #4
 8003dbe:	4638      	mov	r0, r7
 8003dc0:	f7ff ff62 	bl	8003c88 <__sfmoreglue>
 8003dc4:	4604      	mov	r4, r0
 8003dc6:	6030      	str	r0, [r6, #0]
 8003dc8:	2800      	cmp	r0, #0
 8003dca:	d1d5      	bne.n	8003d78 <__sfp+0x24>
 8003dcc:	f7ff ff78 	bl	8003cc0 <__sfp_lock_release>
 8003dd0:	230c      	movs	r3, #12
 8003dd2:	603b      	str	r3, [r7, #0]
 8003dd4:	e7ee      	b.n	8003db4 <__sfp+0x60>
 8003dd6:	bf00      	nop
 8003dd8:	08004c1c 	.word	0x08004c1c
 8003ddc:	ffff0001 	.word	0xffff0001

08003de0 <_fwalk_reent>:
 8003de0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003de4:	4606      	mov	r6, r0
 8003de6:	4688      	mov	r8, r1
 8003de8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003dec:	2700      	movs	r7, #0
 8003dee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003df2:	f1b9 0901 	subs.w	r9, r9, #1
 8003df6:	d505      	bpl.n	8003e04 <_fwalk_reent+0x24>
 8003df8:	6824      	ldr	r4, [r4, #0]
 8003dfa:	2c00      	cmp	r4, #0
 8003dfc:	d1f7      	bne.n	8003dee <_fwalk_reent+0xe>
 8003dfe:	4638      	mov	r0, r7
 8003e00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e04:	89ab      	ldrh	r3, [r5, #12]
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d907      	bls.n	8003e1a <_fwalk_reent+0x3a>
 8003e0a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003e0e:	3301      	adds	r3, #1
 8003e10:	d003      	beq.n	8003e1a <_fwalk_reent+0x3a>
 8003e12:	4629      	mov	r1, r5
 8003e14:	4630      	mov	r0, r6
 8003e16:	47c0      	blx	r8
 8003e18:	4307      	orrs	r7, r0
 8003e1a:	3568      	adds	r5, #104	; 0x68
 8003e1c:	e7e9      	b.n	8003df2 <_fwalk_reent+0x12>

08003e1e <__retarget_lock_init_recursive>:
 8003e1e:	4770      	bx	lr

08003e20 <__retarget_lock_acquire_recursive>:
 8003e20:	4770      	bx	lr

08003e22 <__retarget_lock_release_recursive>:
 8003e22:	4770      	bx	lr

08003e24 <sbrk_aligned>:
 8003e24:	b570      	push	{r4, r5, r6, lr}
 8003e26:	4e0e      	ldr	r6, [pc, #56]	; (8003e60 <sbrk_aligned+0x3c>)
 8003e28:	460c      	mov	r4, r1
 8003e2a:	6831      	ldr	r1, [r6, #0]
 8003e2c:	4605      	mov	r5, r0
 8003e2e:	b911      	cbnz	r1, 8003e36 <sbrk_aligned+0x12>
 8003e30:	f000 fb78 	bl	8004524 <_sbrk_r>
 8003e34:	6030      	str	r0, [r6, #0]
 8003e36:	4621      	mov	r1, r4
 8003e38:	4628      	mov	r0, r5
 8003e3a:	f000 fb73 	bl	8004524 <_sbrk_r>
 8003e3e:	1c43      	adds	r3, r0, #1
 8003e40:	d00a      	beq.n	8003e58 <sbrk_aligned+0x34>
 8003e42:	1cc4      	adds	r4, r0, #3
 8003e44:	f024 0403 	bic.w	r4, r4, #3
 8003e48:	42a0      	cmp	r0, r4
 8003e4a:	d007      	beq.n	8003e5c <sbrk_aligned+0x38>
 8003e4c:	1a21      	subs	r1, r4, r0
 8003e4e:	4628      	mov	r0, r5
 8003e50:	f000 fb68 	bl	8004524 <_sbrk_r>
 8003e54:	3001      	adds	r0, #1
 8003e56:	d101      	bne.n	8003e5c <sbrk_aligned+0x38>
 8003e58:	f04f 34ff 	mov.w	r4, #4294967295
 8003e5c:	4620      	mov	r0, r4
 8003e5e:	bd70      	pop	{r4, r5, r6, pc}
 8003e60:	20000198 	.word	0x20000198

08003e64 <_malloc_r>:
 8003e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e68:	1ccd      	adds	r5, r1, #3
 8003e6a:	f025 0503 	bic.w	r5, r5, #3
 8003e6e:	3508      	adds	r5, #8
 8003e70:	2d0c      	cmp	r5, #12
 8003e72:	bf38      	it	cc
 8003e74:	250c      	movcc	r5, #12
 8003e76:	2d00      	cmp	r5, #0
 8003e78:	4607      	mov	r7, r0
 8003e7a:	db01      	blt.n	8003e80 <_malloc_r+0x1c>
 8003e7c:	42a9      	cmp	r1, r5
 8003e7e:	d905      	bls.n	8003e8c <_malloc_r+0x28>
 8003e80:	230c      	movs	r3, #12
 8003e82:	603b      	str	r3, [r7, #0]
 8003e84:	2600      	movs	r6, #0
 8003e86:	4630      	mov	r0, r6
 8003e88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e8c:	4e2e      	ldr	r6, [pc, #184]	; (8003f48 <_malloc_r+0xe4>)
 8003e8e:	f000 fdb5 	bl	80049fc <__malloc_lock>
 8003e92:	6833      	ldr	r3, [r6, #0]
 8003e94:	461c      	mov	r4, r3
 8003e96:	bb34      	cbnz	r4, 8003ee6 <_malloc_r+0x82>
 8003e98:	4629      	mov	r1, r5
 8003e9a:	4638      	mov	r0, r7
 8003e9c:	f7ff ffc2 	bl	8003e24 <sbrk_aligned>
 8003ea0:	1c43      	adds	r3, r0, #1
 8003ea2:	4604      	mov	r4, r0
 8003ea4:	d14d      	bne.n	8003f42 <_malloc_r+0xde>
 8003ea6:	6834      	ldr	r4, [r6, #0]
 8003ea8:	4626      	mov	r6, r4
 8003eaa:	2e00      	cmp	r6, #0
 8003eac:	d140      	bne.n	8003f30 <_malloc_r+0xcc>
 8003eae:	6823      	ldr	r3, [r4, #0]
 8003eb0:	4631      	mov	r1, r6
 8003eb2:	4638      	mov	r0, r7
 8003eb4:	eb04 0803 	add.w	r8, r4, r3
 8003eb8:	f000 fb34 	bl	8004524 <_sbrk_r>
 8003ebc:	4580      	cmp	r8, r0
 8003ebe:	d13a      	bne.n	8003f36 <_malloc_r+0xd2>
 8003ec0:	6821      	ldr	r1, [r4, #0]
 8003ec2:	3503      	adds	r5, #3
 8003ec4:	1a6d      	subs	r5, r5, r1
 8003ec6:	f025 0503 	bic.w	r5, r5, #3
 8003eca:	3508      	adds	r5, #8
 8003ecc:	2d0c      	cmp	r5, #12
 8003ece:	bf38      	it	cc
 8003ed0:	250c      	movcc	r5, #12
 8003ed2:	4629      	mov	r1, r5
 8003ed4:	4638      	mov	r0, r7
 8003ed6:	f7ff ffa5 	bl	8003e24 <sbrk_aligned>
 8003eda:	3001      	adds	r0, #1
 8003edc:	d02b      	beq.n	8003f36 <_malloc_r+0xd2>
 8003ede:	6823      	ldr	r3, [r4, #0]
 8003ee0:	442b      	add	r3, r5
 8003ee2:	6023      	str	r3, [r4, #0]
 8003ee4:	e00e      	b.n	8003f04 <_malloc_r+0xa0>
 8003ee6:	6822      	ldr	r2, [r4, #0]
 8003ee8:	1b52      	subs	r2, r2, r5
 8003eea:	d41e      	bmi.n	8003f2a <_malloc_r+0xc6>
 8003eec:	2a0b      	cmp	r2, #11
 8003eee:	d916      	bls.n	8003f1e <_malloc_r+0xba>
 8003ef0:	1961      	adds	r1, r4, r5
 8003ef2:	42a3      	cmp	r3, r4
 8003ef4:	6025      	str	r5, [r4, #0]
 8003ef6:	bf18      	it	ne
 8003ef8:	6059      	strne	r1, [r3, #4]
 8003efa:	6863      	ldr	r3, [r4, #4]
 8003efc:	bf08      	it	eq
 8003efe:	6031      	streq	r1, [r6, #0]
 8003f00:	5162      	str	r2, [r4, r5]
 8003f02:	604b      	str	r3, [r1, #4]
 8003f04:	4638      	mov	r0, r7
 8003f06:	f104 060b 	add.w	r6, r4, #11
 8003f0a:	f000 fd7d 	bl	8004a08 <__malloc_unlock>
 8003f0e:	f026 0607 	bic.w	r6, r6, #7
 8003f12:	1d23      	adds	r3, r4, #4
 8003f14:	1af2      	subs	r2, r6, r3
 8003f16:	d0b6      	beq.n	8003e86 <_malloc_r+0x22>
 8003f18:	1b9b      	subs	r3, r3, r6
 8003f1a:	50a3      	str	r3, [r4, r2]
 8003f1c:	e7b3      	b.n	8003e86 <_malloc_r+0x22>
 8003f1e:	6862      	ldr	r2, [r4, #4]
 8003f20:	42a3      	cmp	r3, r4
 8003f22:	bf0c      	ite	eq
 8003f24:	6032      	streq	r2, [r6, #0]
 8003f26:	605a      	strne	r2, [r3, #4]
 8003f28:	e7ec      	b.n	8003f04 <_malloc_r+0xa0>
 8003f2a:	4623      	mov	r3, r4
 8003f2c:	6864      	ldr	r4, [r4, #4]
 8003f2e:	e7b2      	b.n	8003e96 <_malloc_r+0x32>
 8003f30:	4634      	mov	r4, r6
 8003f32:	6876      	ldr	r6, [r6, #4]
 8003f34:	e7b9      	b.n	8003eaa <_malloc_r+0x46>
 8003f36:	230c      	movs	r3, #12
 8003f38:	603b      	str	r3, [r7, #0]
 8003f3a:	4638      	mov	r0, r7
 8003f3c:	f000 fd64 	bl	8004a08 <__malloc_unlock>
 8003f40:	e7a1      	b.n	8003e86 <_malloc_r+0x22>
 8003f42:	6025      	str	r5, [r4, #0]
 8003f44:	e7de      	b.n	8003f04 <_malloc_r+0xa0>
 8003f46:	bf00      	nop
 8003f48:	20000194 	.word	0x20000194

08003f4c <__sfputc_r>:
 8003f4c:	6893      	ldr	r3, [r2, #8]
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	b410      	push	{r4}
 8003f54:	6093      	str	r3, [r2, #8]
 8003f56:	da07      	bge.n	8003f68 <__sfputc_r+0x1c>
 8003f58:	6994      	ldr	r4, [r2, #24]
 8003f5a:	42a3      	cmp	r3, r4
 8003f5c:	db01      	blt.n	8003f62 <__sfputc_r+0x16>
 8003f5e:	290a      	cmp	r1, #10
 8003f60:	d102      	bne.n	8003f68 <__sfputc_r+0x1c>
 8003f62:	bc10      	pop	{r4}
 8003f64:	f000 bb32 	b.w	80045cc <__swbuf_r>
 8003f68:	6813      	ldr	r3, [r2, #0]
 8003f6a:	1c58      	adds	r0, r3, #1
 8003f6c:	6010      	str	r0, [r2, #0]
 8003f6e:	7019      	strb	r1, [r3, #0]
 8003f70:	4608      	mov	r0, r1
 8003f72:	bc10      	pop	{r4}
 8003f74:	4770      	bx	lr

08003f76 <__sfputs_r>:
 8003f76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f78:	4606      	mov	r6, r0
 8003f7a:	460f      	mov	r7, r1
 8003f7c:	4614      	mov	r4, r2
 8003f7e:	18d5      	adds	r5, r2, r3
 8003f80:	42ac      	cmp	r4, r5
 8003f82:	d101      	bne.n	8003f88 <__sfputs_r+0x12>
 8003f84:	2000      	movs	r0, #0
 8003f86:	e007      	b.n	8003f98 <__sfputs_r+0x22>
 8003f88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f8c:	463a      	mov	r2, r7
 8003f8e:	4630      	mov	r0, r6
 8003f90:	f7ff ffdc 	bl	8003f4c <__sfputc_r>
 8003f94:	1c43      	adds	r3, r0, #1
 8003f96:	d1f3      	bne.n	8003f80 <__sfputs_r+0xa>
 8003f98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003f9c <_vfiprintf_r>:
 8003f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fa0:	460d      	mov	r5, r1
 8003fa2:	b09d      	sub	sp, #116	; 0x74
 8003fa4:	4614      	mov	r4, r2
 8003fa6:	4698      	mov	r8, r3
 8003fa8:	4606      	mov	r6, r0
 8003faa:	b118      	cbz	r0, 8003fb4 <_vfiprintf_r+0x18>
 8003fac:	6983      	ldr	r3, [r0, #24]
 8003fae:	b90b      	cbnz	r3, 8003fb4 <_vfiprintf_r+0x18>
 8003fb0:	f7ff fe98 	bl	8003ce4 <__sinit>
 8003fb4:	4b89      	ldr	r3, [pc, #548]	; (80041dc <_vfiprintf_r+0x240>)
 8003fb6:	429d      	cmp	r5, r3
 8003fb8:	d11b      	bne.n	8003ff2 <_vfiprintf_r+0x56>
 8003fba:	6875      	ldr	r5, [r6, #4]
 8003fbc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003fbe:	07d9      	lsls	r1, r3, #31
 8003fc0:	d405      	bmi.n	8003fce <_vfiprintf_r+0x32>
 8003fc2:	89ab      	ldrh	r3, [r5, #12]
 8003fc4:	059a      	lsls	r2, r3, #22
 8003fc6:	d402      	bmi.n	8003fce <_vfiprintf_r+0x32>
 8003fc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003fca:	f7ff ff29 	bl	8003e20 <__retarget_lock_acquire_recursive>
 8003fce:	89ab      	ldrh	r3, [r5, #12]
 8003fd0:	071b      	lsls	r3, r3, #28
 8003fd2:	d501      	bpl.n	8003fd8 <_vfiprintf_r+0x3c>
 8003fd4:	692b      	ldr	r3, [r5, #16]
 8003fd6:	b9eb      	cbnz	r3, 8004014 <_vfiprintf_r+0x78>
 8003fd8:	4629      	mov	r1, r5
 8003fda:	4630      	mov	r0, r6
 8003fdc:	f000 fb5a 	bl	8004694 <__swsetup_r>
 8003fe0:	b1c0      	cbz	r0, 8004014 <_vfiprintf_r+0x78>
 8003fe2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003fe4:	07dc      	lsls	r4, r3, #31
 8003fe6:	d50e      	bpl.n	8004006 <_vfiprintf_r+0x6a>
 8003fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8003fec:	b01d      	add	sp, #116	; 0x74
 8003fee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ff2:	4b7b      	ldr	r3, [pc, #492]	; (80041e0 <_vfiprintf_r+0x244>)
 8003ff4:	429d      	cmp	r5, r3
 8003ff6:	d101      	bne.n	8003ffc <_vfiprintf_r+0x60>
 8003ff8:	68b5      	ldr	r5, [r6, #8]
 8003ffa:	e7df      	b.n	8003fbc <_vfiprintf_r+0x20>
 8003ffc:	4b79      	ldr	r3, [pc, #484]	; (80041e4 <_vfiprintf_r+0x248>)
 8003ffe:	429d      	cmp	r5, r3
 8004000:	bf08      	it	eq
 8004002:	68f5      	ldreq	r5, [r6, #12]
 8004004:	e7da      	b.n	8003fbc <_vfiprintf_r+0x20>
 8004006:	89ab      	ldrh	r3, [r5, #12]
 8004008:	0598      	lsls	r0, r3, #22
 800400a:	d4ed      	bmi.n	8003fe8 <_vfiprintf_r+0x4c>
 800400c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800400e:	f7ff ff08 	bl	8003e22 <__retarget_lock_release_recursive>
 8004012:	e7e9      	b.n	8003fe8 <_vfiprintf_r+0x4c>
 8004014:	2300      	movs	r3, #0
 8004016:	9309      	str	r3, [sp, #36]	; 0x24
 8004018:	2320      	movs	r3, #32
 800401a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800401e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004022:	2330      	movs	r3, #48	; 0x30
 8004024:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80041e8 <_vfiprintf_r+0x24c>
 8004028:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800402c:	f04f 0901 	mov.w	r9, #1
 8004030:	4623      	mov	r3, r4
 8004032:	469a      	mov	sl, r3
 8004034:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004038:	b10a      	cbz	r2, 800403e <_vfiprintf_r+0xa2>
 800403a:	2a25      	cmp	r2, #37	; 0x25
 800403c:	d1f9      	bne.n	8004032 <_vfiprintf_r+0x96>
 800403e:	ebba 0b04 	subs.w	fp, sl, r4
 8004042:	d00b      	beq.n	800405c <_vfiprintf_r+0xc0>
 8004044:	465b      	mov	r3, fp
 8004046:	4622      	mov	r2, r4
 8004048:	4629      	mov	r1, r5
 800404a:	4630      	mov	r0, r6
 800404c:	f7ff ff93 	bl	8003f76 <__sfputs_r>
 8004050:	3001      	adds	r0, #1
 8004052:	f000 80aa 	beq.w	80041aa <_vfiprintf_r+0x20e>
 8004056:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004058:	445a      	add	r2, fp
 800405a:	9209      	str	r2, [sp, #36]	; 0x24
 800405c:	f89a 3000 	ldrb.w	r3, [sl]
 8004060:	2b00      	cmp	r3, #0
 8004062:	f000 80a2 	beq.w	80041aa <_vfiprintf_r+0x20e>
 8004066:	2300      	movs	r3, #0
 8004068:	f04f 32ff 	mov.w	r2, #4294967295
 800406c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004070:	f10a 0a01 	add.w	sl, sl, #1
 8004074:	9304      	str	r3, [sp, #16]
 8004076:	9307      	str	r3, [sp, #28]
 8004078:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800407c:	931a      	str	r3, [sp, #104]	; 0x68
 800407e:	4654      	mov	r4, sl
 8004080:	2205      	movs	r2, #5
 8004082:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004086:	4858      	ldr	r0, [pc, #352]	; (80041e8 <_vfiprintf_r+0x24c>)
 8004088:	f7fc f87a 	bl	8000180 <memchr>
 800408c:	9a04      	ldr	r2, [sp, #16]
 800408e:	b9d8      	cbnz	r0, 80040c8 <_vfiprintf_r+0x12c>
 8004090:	06d1      	lsls	r1, r2, #27
 8004092:	bf44      	itt	mi
 8004094:	2320      	movmi	r3, #32
 8004096:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800409a:	0713      	lsls	r3, r2, #28
 800409c:	bf44      	itt	mi
 800409e:	232b      	movmi	r3, #43	; 0x2b
 80040a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80040a4:	f89a 3000 	ldrb.w	r3, [sl]
 80040a8:	2b2a      	cmp	r3, #42	; 0x2a
 80040aa:	d015      	beq.n	80040d8 <_vfiprintf_r+0x13c>
 80040ac:	9a07      	ldr	r2, [sp, #28]
 80040ae:	4654      	mov	r4, sl
 80040b0:	2000      	movs	r0, #0
 80040b2:	f04f 0c0a 	mov.w	ip, #10
 80040b6:	4621      	mov	r1, r4
 80040b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80040bc:	3b30      	subs	r3, #48	; 0x30
 80040be:	2b09      	cmp	r3, #9
 80040c0:	d94e      	bls.n	8004160 <_vfiprintf_r+0x1c4>
 80040c2:	b1b0      	cbz	r0, 80040f2 <_vfiprintf_r+0x156>
 80040c4:	9207      	str	r2, [sp, #28]
 80040c6:	e014      	b.n	80040f2 <_vfiprintf_r+0x156>
 80040c8:	eba0 0308 	sub.w	r3, r0, r8
 80040cc:	fa09 f303 	lsl.w	r3, r9, r3
 80040d0:	4313      	orrs	r3, r2
 80040d2:	9304      	str	r3, [sp, #16]
 80040d4:	46a2      	mov	sl, r4
 80040d6:	e7d2      	b.n	800407e <_vfiprintf_r+0xe2>
 80040d8:	9b03      	ldr	r3, [sp, #12]
 80040da:	1d19      	adds	r1, r3, #4
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	9103      	str	r1, [sp, #12]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	bfbb      	ittet	lt
 80040e4:	425b      	neglt	r3, r3
 80040e6:	f042 0202 	orrlt.w	r2, r2, #2
 80040ea:	9307      	strge	r3, [sp, #28]
 80040ec:	9307      	strlt	r3, [sp, #28]
 80040ee:	bfb8      	it	lt
 80040f0:	9204      	strlt	r2, [sp, #16]
 80040f2:	7823      	ldrb	r3, [r4, #0]
 80040f4:	2b2e      	cmp	r3, #46	; 0x2e
 80040f6:	d10c      	bne.n	8004112 <_vfiprintf_r+0x176>
 80040f8:	7863      	ldrb	r3, [r4, #1]
 80040fa:	2b2a      	cmp	r3, #42	; 0x2a
 80040fc:	d135      	bne.n	800416a <_vfiprintf_r+0x1ce>
 80040fe:	9b03      	ldr	r3, [sp, #12]
 8004100:	1d1a      	adds	r2, r3, #4
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	9203      	str	r2, [sp, #12]
 8004106:	2b00      	cmp	r3, #0
 8004108:	bfb8      	it	lt
 800410a:	f04f 33ff 	movlt.w	r3, #4294967295
 800410e:	3402      	adds	r4, #2
 8004110:	9305      	str	r3, [sp, #20]
 8004112:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80041ec <_vfiprintf_r+0x250>
 8004116:	7821      	ldrb	r1, [r4, #0]
 8004118:	2203      	movs	r2, #3
 800411a:	4650      	mov	r0, sl
 800411c:	f7fc f830 	bl	8000180 <memchr>
 8004120:	b140      	cbz	r0, 8004134 <_vfiprintf_r+0x198>
 8004122:	2340      	movs	r3, #64	; 0x40
 8004124:	eba0 000a 	sub.w	r0, r0, sl
 8004128:	fa03 f000 	lsl.w	r0, r3, r0
 800412c:	9b04      	ldr	r3, [sp, #16]
 800412e:	4303      	orrs	r3, r0
 8004130:	3401      	adds	r4, #1
 8004132:	9304      	str	r3, [sp, #16]
 8004134:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004138:	482d      	ldr	r0, [pc, #180]	; (80041f0 <_vfiprintf_r+0x254>)
 800413a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800413e:	2206      	movs	r2, #6
 8004140:	f7fc f81e 	bl	8000180 <memchr>
 8004144:	2800      	cmp	r0, #0
 8004146:	d03f      	beq.n	80041c8 <_vfiprintf_r+0x22c>
 8004148:	4b2a      	ldr	r3, [pc, #168]	; (80041f4 <_vfiprintf_r+0x258>)
 800414a:	bb1b      	cbnz	r3, 8004194 <_vfiprintf_r+0x1f8>
 800414c:	9b03      	ldr	r3, [sp, #12]
 800414e:	3307      	adds	r3, #7
 8004150:	f023 0307 	bic.w	r3, r3, #7
 8004154:	3308      	adds	r3, #8
 8004156:	9303      	str	r3, [sp, #12]
 8004158:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800415a:	443b      	add	r3, r7
 800415c:	9309      	str	r3, [sp, #36]	; 0x24
 800415e:	e767      	b.n	8004030 <_vfiprintf_r+0x94>
 8004160:	fb0c 3202 	mla	r2, ip, r2, r3
 8004164:	460c      	mov	r4, r1
 8004166:	2001      	movs	r0, #1
 8004168:	e7a5      	b.n	80040b6 <_vfiprintf_r+0x11a>
 800416a:	2300      	movs	r3, #0
 800416c:	3401      	adds	r4, #1
 800416e:	9305      	str	r3, [sp, #20]
 8004170:	4619      	mov	r1, r3
 8004172:	f04f 0c0a 	mov.w	ip, #10
 8004176:	4620      	mov	r0, r4
 8004178:	f810 2b01 	ldrb.w	r2, [r0], #1
 800417c:	3a30      	subs	r2, #48	; 0x30
 800417e:	2a09      	cmp	r2, #9
 8004180:	d903      	bls.n	800418a <_vfiprintf_r+0x1ee>
 8004182:	2b00      	cmp	r3, #0
 8004184:	d0c5      	beq.n	8004112 <_vfiprintf_r+0x176>
 8004186:	9105      	str	r1, [sp, #20]
 8004188:	e7c3      	b.n	8004112 <_vfiprintf_r+0x176>
 800418a:	fb0c 2101 	mla	r1, ip, r1, r2
 800418e:	4604      	mov	r4, r0
 8004190:	2301      	movs	r3, #1
 8004192:	e7f0      	b.n	8004176 <_vfiprintf_r+0x1da>
 8004194:	ab03      	add	r3, sp, #12
 8004196:	9300      	str	r3, [sp, #0]
 8004198:	462a      	mov	r2, r5
 800419a:	4b17      	ldr	r3, [pc, #92]	; (80041f8 <_vfiprintf_r+0x25c>)
 800419c:	a904      	add	r1, sp, #16
 800419e:	4630      	mov	r0, r6
 80041a0:	f3af 8000 	nop.w
 80041a4:	4607      	mov	r7, r0
 80041a6:	1c78      	adds	r0, r7, #1
 80041a8:	d1d6      	bne.n	8004158 <_vfiprintf_r+0x1bc>
 80041aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80041ac:	07d9      	lsls	r1, r3, #31
 80041ae:	d405      	bmi.n	80041bc <_vfiprintf_r+0x220>
 80041b0:	89ab      	ldrh	r3, [r5, #12]
 80041b2:	059a      	lsls	r2, r3, #22
 80041b4:	d402      	bmi.n	80041bc <_vfiprintf_r+0x220>
 80041b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80041b8:	f7ff fe33 	bl	8003e22 <__retarget_lock_release_recursive>
 80041bc:	89ab      	ldrh	r3, [r5, #12]
 80041be:	065b      	lsls	r3, r3, #25
 80041c0:	f53f af12 	bmi.w	8003fe8 <_vfiprintf_r+0x4c>
 80041c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80041c6:	e711      	b.n	8003fec <_vfiprintf_r+0x50>
 80041c8:	ab03      	add	r3, sp, #12
 80041ca:	9300      	str	r3, [sp, #0]
 80041cc:	462a      	mov	r2, r5
 80041ce:	4b0a      	ldr	r3, [pc, #40]	; (80041f8 <_vfiprintf_r+0x25c>)
 80041d0:	a904      	add	r1, sp, #16
 80041d2:	4630      	mov	r0, r6
 80041d4:	f000 f880 	bl	80042d8 <_printf_i>
 80041d8:	e7e4      	b.n	80041a4 <_vfiprintf_r+0x208>
 80041da:	bf00      	nop
 80041dc:	08004c40 	.word	0x08004c40
 80041e0:	08004c60 	.word	0x08004c60
 80041e4:	08004c20 	.word	0x08004c20
 80041e8:	08004c80 	.word	0x08004c80
 80041ec:	08004c86 	.word	0x08004c86
 80041f0:	08004c8a 	.word	0x08004c8a
 80041f4:	00000000 	.word	0x00000000
 80041f8:	08003f77 	.word	0x08003f77

080041fc <_printf_common>:
 80041fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004200:	4616      	mov	r6, r2
 8004202:	4699      	mov	r9, r3
 8004204:	688a      	ldr	r2, [r1, #8]
 8004206:	690b      	ldr	r3, [r1, #16]
 8004208:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800420c:	4293      	cmp	r3, r2
 800420e:	bfb8      	it	lt
 8004210:	4613      	movlt	r3, r2
 8004212:	6033      	str	r3, [r6, #0]
 8004214:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004218:	4607      	mov	r7, r0
 800421a:	460c      	mov	r4, r1
 800421c:	b10a      	cbz	r2, 8004222 <_printf_common+0x26>
 800421e:	3301      	adds	r3, #1
 8004220:	6033      	str	r3, [r6, #0]
 8004222:	6823      	ldr	r3, [r4, #0]
 8004224:	0699      	lsls	r1, r3, #26
 8004226:	bf42      	ittt	mi
 8004228:	6833      	ldrmi	r3, [r6, #0]
 800422a:	3302      	addmi	r3, #2
 800422c:	6033      	strmi	r3, [r6, #0]
 800422e:	6825      	ldr	r5, [r4, #0]
 8004230:	f015 0506 	ands.w	r5, r5, #6
 8004234:	d106      	bne.n	8004244 <_printf_common+0x48>
 8004236:	f104 0a19 	add.w	sl, r4, #25
 800423a:	68e3      	ldr	r3, [r4, #12]
 800423c:	6832      	ldr	r2, [r6, #0]
 800423e:	1a9b      	subs	r3, r3, r2
 8004240:	42ab      	cmp	r3, r5
 8004242:	dc26      	bgt.n	8004292 <_printf_common+0x96>
 8004244:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004248:	1e13      	subs	r3, r2, #0
 800424a:	6822      	ldr	r2, [r4, #0]
 800424c:	bf18      	it	ne
 800424e:	2301      	movne	r3, #1
 8004250:	0692      	lsls	r2, r2, #26
 8004252:	d42b      	bmi.n	80042ac <_printf_common+0xb0>
 8004254:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004258:	4649      	mov	r1, r9
 800425a:	4638      	mov	r0, r7
 800425c:	47c0      	blx	r8
 800425e:	3001      	adds	r0, #1
 8004260:	d01e      	beq.n	80042a0 <_printf_common+0xa4>
 8004262:	6823      	ldr	r3, [r4, #0]
 8004264:	68e5      	ldr	r5, [r4, #12]
 8004266:	6832      	ldr	r2, [r6, #0]
 8004268:	f003 0306 	and.w	r3, r3, #6
 800426c:	2b04      	cmp	r3, #4
 800426e:	bf08      	it	eq
 8004270:	1aad      	subeq	r5, r5, r2
 8004272:	68a3      	ldr	r3, [r4, #8]
 8004274:	6922      	ldr	r2, [r4, #16]
 8004276:	bf0c      	ite	eq
 8004278:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800427c:	2500      	movne	r5, #0
 800427e:	4293      	cmp	r3, r2
 8004280:	bfc4      	itt	gt
 8004282:	1a9b      	subgt	r3, r3, r2
 8004284:	18ed      	addgt	r5, r5, r3
 8004286:	2600      	movs	r6, #0
 8004288:	341a      	adds	r4, #26
 800428a:	42b5      	cmp	r5, r6
 800428c:	d11a      	bne.n	80042c4 <_printf_common+0xc8>
 800428e:	2000      	movs	r0, #0
 8004290:	e008      	b.n	80042a4 <_printf_common+0xa8>
 8004292:	2301      	movs	r3, #1
 8004294:	4652      	mov	r2, sl
 8004296:	4649      	mov	r1, r9
 8004298:	4638      	mov	r0, r7
 800429a:	47c0      	blx	r8
 800429c:	3001      	adds	r0, #1
 800429e:	d103      	bne.n	80042a8 <_printf_common+0xac>
 80042a0:	f04f 30ff 	mov.w	r0, #4294967295
 80042a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042a8:	3501      	adds	r5, #1
 80042aa:	e7c6      	b.n	800423a <_printf_common+0x3e>
 80042ac:	18e1      	adds	r1, r4, r3
 80042ae:	1c5a      	adds	r2, r3, #1
 80042b0:	2030      	movs	r0, #48	; 0x30
 80042b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80042b6:	4422      	add	r2, r4
 80042b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80042bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80042c0:	3302      	adds	r3, #2
 80042c2:	e7c7      	b.n	8004254 <_printf_common+0x58>
 80042c4:	2301      	movs	r3, #1
 80042c6:	4622      	mov	r2, r4
 80042c8:	4649      	mov	r1, r9
 80042ca:	4638      	mov	r0, r7
 80042cc:	47c0      	blx	r8
 80042ce:	3001      	adds	r0, #1
 80042d0:	d0e6      	beq.n	80042a0 <_printf_common+0xa4>
 80042d2:	3601      	adds	r6, #1
 80042d4:	e7d9      	b.n	800428a <_printf_common+0x8e>
	...

080042d8 <_printf_i>:
 80042d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042dc:	7e0f      	ldrb	r7, [r1, #24]
 80042de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80042e0:	2f78      	cmp	r7, #120	; 0x78
 80042e2:	4691      	mov	r9, r2
 80042e4:	4680      	mov	r8, r0
 80042e6:	460c      	mov	r4, r1
 80042e8:	469a      	mov	sl, r3
 80042ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80042ee:	d807      	bhi.n	8004300 <_printf_i+0x28>
 80042f0:	2f62      	cmp	r7, #98	; 0x62
 80042f2:	d80a      	bhi.n	800430a <_printf_i+0x32>
 80042f4:	2f00      	cmp	r7, #0
 80042f6:	f000 80d8 	beq.w	80044aa <_printf_i+0x1d2>
 80042fa:	2f58      	cmp	r7, #88	; 0x58
 80042fc:	f000 80a3 	beq.w	8004446 <_printf_i+0x16e>
 8004300:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004304:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004308:	e03a      	b.n	8004380 <_printf_i+0xa8>
 800430a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800430e:	2b15      	cmp	r3, #21
 8004310:	d8f6      	bhi.n	8004300 <_printf_i+0x28>
 8004312:	a101      	add	r1, pc, #4	; (adr r1, 8004318 <_printf_i+0x40>)
 8004314:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004318:	08004371 	.word	0x08004371
 800431c:	08004385 	.word	0x08004385
 8004320:	08004301 	.word	0x08004301
 8004324:	08004301 	.word	0x08004301
 8004328:	08004301 	.word	0x08004301
 800432c:	08004301 	.word	0x08004301
 8004330:	08004385 	.word	0x08004385
 8004334:	08004301 	.word	0x08004301
 8004338:	08004301 	.word	0x08004301
 800433c:	08004301 	.word	0x08004301
 8004340:	08004301 	.word	0x08004301
 8004344:	08004491 	.word	0x08004491
 8004348:	080043b5 	.word	0x080043b5
 800434c:	08004473 	.word	0x08004473
 8004350:	08004301 	.word	0x08004301
 8004354:	08004301 	.word	0x08004301
 8004358:	080044b3 	.word	0x080044b3
 800435c:	08004301 	.word	0x08004301
 8004360:	080043b5 	.word	0x080043b5
 8004364:	08004301 	.word	0x08004301
 8004368:	08004301 	.word	0x08004301
 800436c:	0800447b 	.word	0x0800447b
 8004370:	682b      	ldr	r3, [r5, #0]
 8004372:	1d1a      	adds	r2, r3, #4
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	602a      	str	r2, [r5, #0]
 8004378:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800437c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004380:	2301      	movs	r3, #1
 8004382:	e0a3      	b.n	80044cc <_printf_i+0x1f4>
 8004384:	6820      	ldr	r0, [r4, #0]
 8004386:	6829      	ldr	r1, [r5, #0]
 8004388:	0606      	lsls	r6, r0, #24
 800438a:	f101 0304 	add.w	r3, r1, #4
 800438e:	d50a      	bpl.n	80043a6 <_printf_i+0xce>
 8004390:	680e      	ldr	r6, [r1, #0]
 8004392:	602b      	str	r3, [r5, #0]
 8004394:	2e00      	cmp	r6, #0
 8004396:	da03      	bge.n	80043a0 <_printf_i+0xc8>
 8004398:	232d      	movs	r3, #45	; 0x2d
 800439a:	4276      	negs	r6, r6
 800439c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043a0:	485e      	ldr	r0, [pc, #376]	; (800451c <_printf_i+0x244>)
 80043a2:	230a      	movs	r3, #10
 80043a4:	e019      	b.n	80043da <_printf_i+0x102>
 80043a6:	680e      	ldr	r6, [r1, #0]
 80043a8:	602b      	str	r3, [r5, #0]
 80043aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80043ae:	bf18      	it	ne
 80043b0:	b236      	sxthne	r6, r6
 80043b2:	e7ef      	b.n	8004394 <_printf_i+0xbc>
 80043b4:	682b      	ldr	r3, [r5, #0]
 80043b6:	6820      	ldr	r0, [r4, #0]
 80043b8:	1d19      	adds	r1, r3, #4
 80043ba:	6029      	str	r1, [r5, #0]
 80043bc:	0601      	lsls	r1, r0, #24
 80043be:	d501      	bpl.n	80043c4 <_printf_i+0xec>
 80043c0:	681e      	ldr	r6, [r3, #0]
 80043c2:	e002      	b.n	80043ca <_printf_i+0xf2>
 80043c4:	0646      	lsls	r6, r0, #25
 80043c6:	d5fb      	bpl.n	80043c0 <_printf_i+0xe8>
 80043c8:	881e      	ldrh	r6, [r3, #0]
 80043ca:	4854      	ldr	r0, [pc, #336]	; (800451c <_printf_i+0x244>)
 80043cc:	2f6f      	cmp	r7, #111	; 0x6f
 80043ce:	bf0c      	ite	eq
 80043d0:	2308      	moveq	r3, #8
 80043d2:	230a      	movne	r3, #10
 80043d4:	2100      	movs	r1, #0
 80043d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80043da:	6865      	ldr	r5, [r4, #4]
 80043dc:	60a5      	str	r5, [r4, #8]
 80043de:	2d00      	cmp	r5, #0
 80043e0:	bfa2      	ittt	ge
 80043e2:	6821      	ldrge	r1, [r4, #0]
 80043e4:	f021 0104 	bicge.w	r1, r1, #4
 80043e8:	6021      	strge	r1, [r4, #0]
 80043ea:	b90e      	cbnz	r6, 80043f0 <_printf_i+0x118>
 80043ec:	2d00      	cmp	r5, #0
 80043ee:	d04d      	beq.n	800448c <_printf_i+0x1b4>
 80043f0:	4615      	mov	r5, r2
 80043f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80043f6:	fb03 6711 	mls	r7, r3, r1, r6
 80043fa:	5dc7      	ldrb	r7, [r0, r7]
 80043fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004400:	4637      	mov	r7, r6
 8004402:	42bb      	cmp	r3, r7
 8004404:	460e      	mov	r6, r1
 8004406:	d9f4      	bls.n	80043f2 <_printf_i+0x11a>
 8004408:	2b08      	cmp	r3, #8
 800440a:	d10b      	bne.n	8004424 <_printf_i+0x14c>
 800440c:	6823      	ldr	r3, [r4, #0]
 800440e:	07de      	lsls	r6, r3, #31
 8004410:	d508      	bpl.n	8004424 <_printf_i+0x14c>
 8004412:	6923      	ldr	r3, [r4, #16]
 8004414:	6861      	ldr	r1, [r4, #4]
 8004416:	4299      	cmp	r1, r3
 8004418:	bfde      	ittt	le
 800441a:	2330      	movle	r3, #48	; 0x30
 800441c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004420:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004424:	1b52      	subs	r2, r2, r5
 8004426:	6122      	str	r2, [r4, #16]
 8004428:	f8cd a000 	str.w	sl, [sp]
 800442c:	464b      	mov	r3, r9
 800442e:	aa03      	add	r2, sp, #12
 8004430:	4621      	mov	r1, r4
 8004432:	4640      	mov	r0, r8
 8004434:	f7ff fee2 	bl	80041fc <_printf_common>
 8004438:	3001      	adds	r0, #1
 800443a:	d14c      	bne.n	80044d6 <_printf_i+0x1fe>
 800443c:	f04f 30ff 	mov.w	r0, #4294967295
 8004440:	b004      	add	sp, #16
 8004442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004446:	4835      	ldr	r0, [pc, #212]	; (800451c <_printf_i+0x244>)
 8004448:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800444c:	6829      	ldr	r1, [r5, #0]
 800444e:	6823      	ldr	r3, [r4, #0]
 8004450:	f851 6b04 	ldr.w	r6, [r1], #4
 8004454:	6029      	str	r1, [r5, #0]
 8004456:	061d      	lsls	r5, r3, #24
 8004458:	d514      	bpl.n	8004484 <_printf_i+0x1ac>
 800445a:	07df      	lsls	r7, r3, #31
 800445c:	bf44      	itt	mi
 800445e:	f043 0320 	orrmi.w	r3, r3, #32
 8004462:	6023      	strmi	r3, [r4, #0]
 8004464:	b91e      	cbnz	r6, 800446e <_printf_i+0x196>
 8004466:	6823      	ldr	r3, [r4, #0]
 8004468:	f023 0320 	bic.w	r3, r3, #32
 800446c:	6023      	str	r3, [r4, #0]
 800446e:	2310      	movs	r3, #16
 8004470:	e7b0      	b.n	80043d4 <_printf_i+0xfc>
 8004472:	6823      	ldr	r3, [r4, #0]
 8004474:	f043 0320 	orr.w	r3, r3, #32
 8004478:	6023      	str	r3, [r4, #0]
 800447a:	2378      	movs	r3, #120	; 0x78
 800447c:	4828      	ldr	r0, [pc, #160]	; (8004520 <_printf_i+0x248>)
 800447e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004482:	e7e3      	b.n	800444c <_printf_i+0x174>
 8004484:	0659      	lsls	r1, r3, #25
 8004486:	bf48      	it	mi
 8004488:	b2b6      	uxthmi	r6, r6
 800448a:	e7e6      	b.n	800445a <_printf_i+0x182>
 800448c:	4615      	mov	r5, r2
 800448e:	e7bb      	b.n	8004408 <_printf_i+0x130>
 8004490:	682b      	ldr	r3, [r5, #0]
 8004492:	6826      	ldr	r6, [r4, #0]
 8004494:	6961      	ldr	r1, [r4, #20]
 8004496:	1d18      	adds	r0, r3, #4
 8004498:	6028      	str	r0, [r5, #0]
 800449a:	0635      	lsls	r5, r6, #24
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	d501      	bpl.n	80044a4 <_printf_i+0x1cc>
 80044a0:	6019      	str	r1, [r3, #0]
 80044a2:	e002      	b.n	80044aa <_printf_i+0x1d2>
 80044a4:	0670      	lsls	r0, r6, #25
 80044a6:	d5fb      	bpl.n	80044a0 <_printf_i+0x1c8>
 80044a8:	8019      	strh	r1, [r3, #0]
 80044aa:	2300      	movs	r3, #0
 80044ac:	6123      	str	r3, [r4, #16]
 80044ae:	4615      	mov	r5, r2
 80044b0:	e7ba      	b.n	8004428 <_printf_i+0x150>
 80044b2:	682b      	ldr	r3, [r5, #0]
 80044b4:	1d1a      	adds	r2, r3, #4
 80044b6:	602a      	str	r2, [r5, #0]
 80044b8:	681d      	ldr	r5, [r3, #0]
 80044ba:	6862      	ldr	r2, [r4, #4]
 80044bc:	2100      	movs	r1, #0
 80044be:	4628      	mov	r0, r5
 80044c0:	f7fb fe5e 	bl	8000180 <memchr>
 80044c4:	b108      	cbz	r0, 80044ca <_printf_i+0x1f2>
 80044c6:	1b40      	subs	r0, r0, r5
 80044c8:	6060      	str	r0, [r4, #4]
 80044ca:	6863      	ldr	r3, [r4, #4]
 80044cc:	6123      	str	r3, [r4, #16]
 80044ce:	2300      	movs	r3, #0
 80044d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044d4:	e7a8      	b.n	8004428 <_printf_i+0x150>
 80044d6:	6923      	ldr	r3, [r4, #16]
 80044d8:	462a      	mov	r2, r5
 80044da:	4649      	mov	r1, r9
 80044dc:	4640      	mov	r0, r8
 80044de:	47d0      	blx	sl
 80044e0:	3001      	adds	r0, #1
 80044e2:	d0ab      	beq.n	800443c <_printf_i+0x164>
 80044e4:	6823      	ldr	r3, [r4, #0]
 80044e6:	079b      	lsls	r3, r3, #30
 80044e8:	d413      	bmi.n	8004512 <_printf_i+0x23a>
 80044ea:	68e0      	ldr	r0, [r4, #12]
 80044ec:	9b03      	ldr	r3, [sp, #12]
 80044ee:	4298      	cmp	r0, r3
 80044f0:	bfb8      	it	lt
 80044f2:	4618      	movlt	r0, r3
 80044f4:	e7a4      	b.n	8004440 <_printf_i+0x168>
 80044f6:	2301      	movs	r3, #1
 80044f8:	4632      	mov	r2, r6
 80044fa:	4649      	mov	r1, r9
 80044fc:	4640      	mov	r0, r8
 80044fe:	47d0      	blx	sl
 8004500:	3001      	adds	r0, #1
 8004502:	d09b      	beq.n	800443c <_printf_i+0x164>
 8004504:	3501      	adds	r5, #1
 8004506:	68e3      	ldr	r3, [r4, #12]
 8004508:	9903      	ldr	r1, [sp, #12]
 800450a:	1a5b      	subs	r3, r3, r1
 800450c:	42ab      	cmp	r3, r5
 800450e:	dcf2      	bgt.n	80044f6 <_printf_i+0x21e>
 8004510:	e7eb      	b.n	80044ea <_printf_i+0x212>
 8004512:	2500      	movs	r5, #0
 8004514:	f104 0619 	add.w	r6, r4, #25
 8004518:	e7f5      	b.n	8004506 <_printf_i+0x22e>
 800451a:	bf00      	nop
 800451c:	08004c91 	.word	0x08004c91
 8004520:	08004ca2 	.word	0x08004ca2

08004524 <_sbrk_r>:
 8004524:	b538      	push	{r3, r4, r5, lr}
 8004526:	4d06      	ldr	r5, [pc, #24]	; (8004540 <_sbrk_r+0x1c>)
 8004528:	2300      	movs	r3, #0
 800452a:	4604      	mov	r4, r0
 800452c:	4608      	mov	r0, r1
 800452e:	602b      	str	r3, [r5, #0]
 8004530:	f7fc fac6 	bl	8000ac0 <_sbrk>
 8004534:	1c43      	adds	r3, r0, #1
 8004536:	d102      	bne.n	800453e <_sbrk_r+0x1a>
 8004538:	682b      	ldr	r3, [r5, #0]
 800453a:	b103      	cbz	r3, 800453e <_sbrk_r+0x1a>
 800453c:	6023      	str	r3, [r4, #0]
 800453e:	bd38      	pop	{r3, r4, r5, pc}
 8004540:	2000019c 	.word	0x2000019c

08004544 <__sread>:
 8004544:	b510      	push	{r4, lr}
 8004546:	460c      	mov	r4, r1
 8004548:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800454c:	f000 faac 	bl	8004aa8 <_read_r>
 8004550:	2800      	cmp	r0, #0
 8004552:	bfab      	itete	ge
 8004554:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004556:	89a3      	ldrhlt	r3, [r4, #12]
 8004558:	181b      	addge	r3, r3, r0
 800455a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800455e:	bfac      	ite	ge
 8004560:	6563      	strge	r3, [r4, #84]	; 0x54
 8004562:	81a3      	strhlt	r3, [r4, #12]
 8004564:	bd10      	pop	{r4, pc}

08004566 <__swrite>:
 8004566:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800456a:	461f      	mov	r7, r3
 800456c:	898b      	ldrh	r3, [r1, #12]
 800456e:	05db      	lsls	r3, r3, #23
 8004570:	4605      	mov	r5, r0
 8004572:	460c      	mov	r4, r1
 8004574:	4616      	mov	r6, r2
 8004576:	d505      	bpl.n	8004584 <__swrite+0x1e>
 8004578:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800457c:	2302      	movs	r3, #2
 800457e:	2200      	movs	r2, #0
 8004580:	f000 f9c4 	bl	800490c <_lseek_r>
 8004584:	89a3      	ldrh	r3, [r4, #12]
 8004586:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800458a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800458e:	81a3      	strh	r3, [r4, #12]
 8004590:	4632      	mov	r2, r6
 8004592:	463b      	mov	r3, r7
 8004594:	4628      	mov	r0, r5
 8004596:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800459a:	f000 b869 	b.w	8004670 <_write_r>

0800459e <__sseek>:
 800459e:	b510      	push	{r4, lr}
 80045a0:	460c      	mov	r4, r1
 80045a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045a6:	f000 f9b1 	bl	800490c <_lseek_r>
 80045aa:	1c43      	adds	r3, r0, #1
 80045ac:	89a3      	ldrh	r3, [r4, #12]
 80045ae:	bf15      	itete	ne
 80045b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80045b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80045b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80045ba:	81a3      	strheq	r3, [r4, #12]
 80045bc:	bf18      	it	ne
 80045be:	81a3      	strhne	r3, [r4, #12]
 80045c0:	bd10      	pop	{r4, pc}

080045c2 <__sclose>:
 80045c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045c6:	f000 b8d3 	b.w	8004770 <_close_r>
	...

080045cc <__swbuf_r>:
 80045cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ce:	460e      	mov	r6, r1
 80045d0:	4614      	mov	r4, r2
 80045d2:	4605      	mov	r5, r0
 80045d4:	b118      	cbz	r0, 80045de <__swbuf_r+0x12>
 80045d6:	6983      	ldr	r3, [r0, #24]
 80045d8:	b90b      	cbnz	r3, 80045de <__swbuf_r+0x12>
 80045da:	f7ff fb83 	bl	8003ce4 <__sinit>
 80045de:	4b21      	ldr	r3, [pc, #132]	; (8004664 <__swbuf_r+0x98>)
 80045e0:	429c      	cmp	r4, r3
 80045e2:	d12b      	bne.n	800463c <__swbuf_r+0x70>
 80045e4:	686c      	ldr	r4, [r5, #4]
 80045e6:	69a3      	ldr	r3, [r4, #24]
 80045e8:	60a3      	str	r3, [r4, #8]
 80045ea:	89a3      	ldrh	r3, [r4, #12]
 80045ec:	071a      	lsls	r2, r3, #28
 80045ee:	d52f      	bpl.n	8004650 <__swbuf_r+0x84>
 80045f0:	6923      	ldr	r3, [r4, #16]
 80045f2:	b36b      	cbz	r3, 8004650 <__swbuf_r+0x84>
 80045f4:	6923      	ldr	r3, [r4, #16]
 80045f6:	6820      	ldr	r0, [r4, #0]
 80045f8:	1ac0      	subs	r0, r0, r3
 80045fa:	6963      	ldr	r3, [r4, #20]
 80045fc:	b2f6      	uxtb	r6, r6
 80045fe:	4283      	cmp	r3, r0
 8004600:	4637      	mov	r7, r6
 8004602:	dc04      	bgt.n	800460e <__swbuf_r+0x42>
 8004604:	4621      	mov	r1, r4
 8004606:	4628      	mov	r0, r5
 8004608:	f000 f944 	bl	8004894 <_fflush_r>
 800460c:	bb30      	cbnz	r0, 800465c <__swbuf_r+0x90>
 800460e:	68a3      	ldr	r3, [r4, #8]
 8004610:	3b01      	subs	r3, #1
 8004612:	60a3      	str	r3, [r4, #8]
 8004614:	6823      	ldr	r3, [r4, #0]
 8004616:	1c5a      	adds	r2, r3, #1
 8004618:	6022      	str	r2, [r4, #0]
 800461a:	701e      	strb	r6, [r3, #0]
 800461c:	6963      	ldr	r3, [r4, #20]
 800461e:	3001      	adds	r0, #1
 8004620:	4283      	cmp	r3, r0
 8004622:	d004      	beq.n	800462e <__swbuf_r+0x62>
 8004624:	89a3      	ldrh	r3, [r4, #12]
 8004626:	07db      	lsls	r3, r3, #31
 8004628:	d506      	bpl.n	8004638 <__swbuf_r+0x6c>
 800462a:	2e0a      	cmp	r6, #10
 800462c:	d104      	bne.n	8004638 <__swbuf_r+0x6c>
 800462e:	4621      	mov	r1, r4
 8004630:	4628      	mov	r0, r5
 8004632:	f000 f92f 	bl	8004894 <_fflush_r>
 8004636:	b988      	cbnz	r0, 800465c <__swbuf_r+0x90>
 8004638:	4638      	mov	r0, r7
 800463a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800463c:	4b0a      	ldr	r3, [pc, #40]	; (8004668 <__swbuf_r+0x9c>)
 800463e:	429c      	cmp	r4, r3
 8004640:	d101      	bne.n	8004646 <__swbuf_r+0x7a>
 8004642:	68ac      	ldr	r4, [r5, #8]
 8004644:	e7cf      	b.n	80045e6 <__swbuf_r+0x1a>
 8004646:	4b09      	ldr	r3, [pc, #36]	; (800466c <__swbuf_r+0xa0>)
 8004648:	429c      	cmp	r4, r3
 800464a:	bf08      	it	eq
 800464c:	68ec      	ldreq	r4, [r5, #12]
 800464e:	e7ca      	b.n	80045e6 <__swbuf_r+0x1a>
 8004650:	4621      	mov	r1, r4
 8004652:	4628      	mov	r0, r5
 8004654:	f000 f81e 	bl	8004694 <__swsetup_r>
 8004658:	2800      	cmp	r0, #0
 800465a:	d0cb      	beq.n	80045f4 <__swbuf_r+0x28>
 800465c:	f04f 37ff 	mov.w	r7, #4294967295
 8004660:	e7ea      	b.n	8004638 <__swbuf_r+0x6c>
 8004662:	bf00      	nop
 8004664:	08004c40 	.word	0x08004c40
 8004668:	08004c60 	.word	0x08004c60
 800466c:	08004c20 	.word	0x08004c20

08004670 <_write_r>:
 8004670:	b538      	push	{r3, r4, r5, lr}
 8004672:	4d07      	ldr	r5, [pc, #28]	; (8004690 <_write_r+0x20>)
 8004674:	4604      	mov	r4, r0
 8004676:	4608      	mov	r0, r1
 8004678:	4611      	mov	r1, r2
 800467a:	2200      	movs	r2, #0
 800467c:	602a      	str	r2, [r5, #0]
 800467e:	461a      	mov	r2, r3
 8004680:	f7fc f9d2 	bl	8000a28 <_write>
 8004684:	1c43      	adds	r3, r0, #1
 8004686:	d102      	bne.n	800468e <_write_r+0x1e>
 8004688:	682b      	ldr	r3, [r5, #0]
 800468a:	b103      	cbz	r3, 800468e <_write_r+0x1e>
 800468c:	6023      	str	r3, [r4, #0]
 800468e:	bd38      	pop	{r3, r4, r5, pc}
 8004690:	2000019c 	.word	0x2000019c

08004694 <__swsetup_r>:
 8004694:	4b32      	ldr	r3, [pc, #200]	; (8004760 <__swsetup_r+0xcc>)
 8004696:	b570      	push	{r4, r5, r6, lr}
 8004698:	681d      	ldr	r5, [r3, #0]
 800469a:	4606      	mov	r6, r0
 800469c:	460c      	mov	r4, r1
 800469e:	b125      	cbz	r5, 80046aa <__swsetup_r+0x16>
 80046a0:	69ab      	ldr	r3, [r5, #24]
 80046a2:	b913      	cbnz	r3, 80046aa <__swsetup_r+0x16>
 80046a4:	4628      	mov	r0, r5
 80046a6:	f7ff fb1d 	bl	8003ce4 <__sinit>
 80046aa:	4b2e      	ldr	r3, [pc, #184]	; (8004764 <__swsetup_r+0xd0>)
 80046ac:	429c      	cmp	r4, r3
 80046ae:	d10f      	bne.n	80046d0 <__swsetup_r+0x3c>
 80046b0:	686c      	ldr	r4, [r5, #4]
 80046b2:	89a3      	ldrh	r3, [r4, #12]
 80046b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80046b8:	0719      	lsls	r1, r3, #28
 80046ba:	d42c      	bmi.n	8004716 <__swsetup_r+0x82>
 80046bc:	06dd      	lsls	r5, r3, #27
 80046be:	d411      	bmi.n	80046e4 <__swsetup_r+0x50>
 80046c0:	2309      	movs	r3, #9
 80046c2:	6033      	str	r3, [r6, #0]
 80046c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80046c8:	81a3      	strh	r3, [r4, #12]
 80046ca:	f04f 30ff 	mov.w	r0, #4294967295
 80046ce:	e03e      	b.n	800474e <__swsetup_r+0xba>
 80046d0:	4b25      	ldr	r3, [pc, #148]	; (8004768 <__swsetup_r+0xd4>)
 80046d2:	429c      	cmp	r4, r3
 80046d4:	d101      	bne.n	80046da <__swsetup_r+0x46>
 80046d6:	68ac      	ldr	r4, [r5, #8]
 80046d8:	e7eb      	b.n	80046b2 <__swsetup_r+0x1e>
 80046da:	4b24      	ldr	r3, [pc, #144]	; (800476c <__swsetup_r+0xd8>)
 80046dc:	429c      	cmp	r4, r3
 80046de:	bf08      	it	eq
 80046e0:	68ec      	ldreq	r4, [r5, #12]
 80046e2:	e7e6      	b.n	80046b2 <__swsetup_r+0x1e>
 80046e4:	0758      	lsls	r0, r3, #29
 80046e6:	d512      	bpl.n	800470e <__swsetup_r+0x7a>
 80046e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80046ea:	b141      	cbz	r1, 80046fe <__swsetup_r+0x6a>
 80046ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80046f0:	4299      	cmp	r1, r3
 80046f2:	d002      	beq.n	80046fa <__swsetup_r+0x66>
 80046f4:	4630      	mov	r0, r6
 80046f6:	f000 f98d 	bl	8004a14 <_free_r>
 80046fa:	2300      	movs	r3, #0
 80046fc:	6363      	str	r3, [r4, #52]	; 0x34
 80046fe:	89a3      	ldrh	r3, [r4, #12]
 8004700:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004704:	81a3      	strh	r3, [r4, #12]
 8004706:	2300      	movs	r3, #0
 8004708:	6063      	str	r3, [r4, #4]
 800470a:	6923      	ldr	r3, [r4, #16]
 800470c:	6023      	str	r3, [r4, #0]
 800470e:	89a3      	ldrh	r3, [r4, #12]
 8004710:	f043 0308 	orr.w	r3, r3, #8
 8004714:	81a3      	strh	r3, [r4, #12]
 8004716:	6923      	ldr	r3, [r4, #16]
 8004718:	b94b      	cbnz	r3, 800472e <__swsetup_r+0x9a>
 800471a:	89a3      	ldrh	r3, [r4, #12]
 800471c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004720:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004724:	d003      	beq.n	800472e <__swsetup_r+0x9a>
 8004726:	4621      	mov	r1, r4
 8004728:	4630      	mov	r0, r6
 800472a:	f000 f927 	bl	800497c <__smakebuf_r>
 800472e:	89a0      	ldrh	r0, [r4, #12]
 8004730:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004734:	f010 0301 	ands.w	r3, r0, #1
 8004738:	d00a      	beq.n	8004750 <__swsetup_r+0xbc>
 800473a:	2300      	movs	r3, #0
 800473c:	60a3      	str	r3, [r4, #8]
 800473e:	6963      	ldr	r3, [r4, #20]
 8004740:	425b      	negs	r3, r3
 8004742:	61a3      	str	r3, [r4, #24]
 8004744:	6923      	ldr	r3, [r4, #16]
 8004746:	b943      	cbnz	r3, 800475a <__swsetup_r+0xc6>
 8004748:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800474c:	d1ba      	bne.n	80046c4 <__swsetup_r+0x30>
 800474e:	bd70      	pop	{r4, r5, r6, pc}
 8004750:	0781      	lsls	r1, r0, #30
 8004752:	bf58      	it	pl
 8004754:	6963      	ldrpl	r3, [r4, #20]
 8004756:	60a3      	str	r3, [r4, #8]
 8004758:	e7f4      	b.n	8004744 <__swsetup_r+0xb0>
 800475a:	2000      	movs	r0, #0
 800475c:	e7f7      	b.n	800474e <__swsetup_r+0xba>
 800475e:	bf00      	nop
 8004760:	20000010 	.word	0x20000010
 8004764:	08004c40 	.word	0x08004c40
 8004768:	08004c60 	.word	0x08004c60
 800476c:	08004c20 	.word	0x08004c20

08004770 <_close_r>:
 8004770:	b538      	push	{r3, r4, r5, lr}
 8004772:	4d06      	ldr	r5, [pc, #24]	; (800478c <_close_r+0x1c>)
 8004774:	2300      	movs	r3, #0
 8004776:	4604      	mov	r4, r0
 8004778:	4608      	mov	r0, r1
 800477a:	602b      	str	r3, [r5, #0]
 800477c:	f7fc f970 	bl	8000a60 <_close>
 8004780:	1c43      	adds	r3, r0, #1
 8004782:	d102      	bne.n	800478a <_close_r+0x1a>
 8004784:	682b      	ldr	r3, [r5, #0]
 8004786:	b103      	cbz	r3, 800478a <_close_r+0x1a>
 8004788:	6023      	str	r3, [r4, #0]
 800478a:	bd38      	pop	{r3, r4, r5, pc}
 800478c:	2000019c 	.word	0x2000019c

08004790 <__sflush_r>:
 8004790:	898a      	ldrh	r2, [r1, #12]
 8004792:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004794:	4605      	mov	r5, r0
 8004796:	0710      	lsls	r0, r2, #28
 8004798:	460c      	mov	r4, r1
 800479a:	d457      	bmi.n	800484c <__sflush_r+0xbc>
 800479c:	684b      	ldr	r3, [r1, #4]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	dc04      	bgt.n	80047ac <__sflush_r+0x1c>
 80047a2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	dc01      	bgt.n	80047ac <__sflush_r+0x1c>
 80047a8:	2000      	movs	r0, #0
 80047aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80047ae:	2e00      	cmp	r6, #0
 80047b0:	d0fa      	beq.n	80047a8 <__sflush_r+0x18>
 80047b2:	2300      	movs	r3, #0
 80047b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80047b8:	682f      	ldr	r7, [r5, #0]
 80047ba:	602b      	str	r3, [r5, #0]
 80047bc:	d032      	beq.n	8004824 <__sflush_r+0x94>
 80047be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80047c0:	89a3      	ldrh	r3, [r4, #12]
 80047c2:	075a      	lsls	r2, r3, #29
 80047c4:	d505      	bpl.n	80047d2 <__sflush_r+0x42>
 80047c6:	6863      	ldr	r3, [r4, #4]
 80047c8:	1ac0      	subs	r0, r0, r3
 80047ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80047cc:	b10b      	cbz	r3, 80047d2 <__sflush_r+0x42>
 80047ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80047d0:	1ac0      	subs	r0, r0, r3
 80047d2:	2300      	movs	r3, #0
 80047d4:	4602      	mov	r2, r0
 80047d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80047d8:	6a21      	ldr	r1, [r4, #32]
 80047da:	4628      	mov	r0, r5
 80047dc:	47b0      	blx	r6
 80047de:	1c43      	adds	r3, r0, #1
 80047e0:	89a3      	ldrh	r3, [r4, #12]
 80047e2:	d106      	bne.n	80047f2 <__sflush_r+0x62>
 80047e4:	6829      	ldr	r1, [r5, #0]
 80047e6:	291d      	cmp	r1, #29
 80047e8:	d82c      	bhi.n	8004844 <__sflush_r+0xb4>
 80047ea:	4a29      	ldr	r2, [pc, #164]	; (8004890 <__sflush_r+0x100>)
 80047ec:	40ca      	lsrs	r2, r1
 80047ee:	07d6      	lsls	r6, r2, #31
 80047f0:	d528      	bpl.n	8004844 <__sflush_r+0xb4>
 80047f2:	2200      	movs	r2, #0
 80047f4:	6062      	str	r2, [r4, #4]
 80047f6:	04d9      	lsls	r1, r3, #19
 80047f8:	6922      	ldr	r2, [r4, #16]
 80047fa:	6022      	str	r2, [r4, #0]
 80047fc:	d504      	bpl.n	8004808 <__sflush_r+0x78>
 80047fe:	1c42      	adds	r2, r0, #1
 8004800:	d101      	bne.n	8004806 <__sflush_r+0x76>
 8004802:	682b      	ldr	r3, [r5, #0]
 8004804:	b903      	cbnz	r3, 8004808 <__sflush_r+0x78>
 8004806:	6560      	str	r0, [r4, #84]	; 0x54
 8004808:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800480a:	602f      	str	r7, [r5, #0]
 800480c:	2900      	cmp	r1, #0
 800480e:	d0cb      	beq.n	80047a8 <__sflush_r+0x18>
 8004810:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004814:	4299      	cmp	r1, r3
 8004816:	d002      	beq.n	800481e <__sflush_r+0x8e>
 8004818:	4628      	mov	r0, r5
 800481a:	f000 f8fb 	bl	8004a14 <_free_r>
 800481e:	2000      	movs	r0, #0
 8004820:	6360      	str	r0, [r4, #52]	; 0x34
 8004822:	e7c2      	b.n	80047aa <__sflush_r+0x1a>
 8004824:	6a21      	ldr	r1, [r4, #32]
 8004826:	2301      	movs	r3, #1
 8004828:	4628      	mov	r0, r5
 800482a:	47b0      	blx	r6
 800482c:	1c41      	adds	r1, r0, #1
 800482e:	d1c7      	bne.n	80047c0 <__sflush_r+0x30>
 8004830:	682b      	ldr	r3, [r5, #0]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d0c4      	beq.n	80047c0 <__sflush_r+0x30>
 8004836:	2b1d      	cmp	r3, #29
 8004838:	d001      	beq.n	800483e <__sflush_r+0xae>
 800483a:	2b16      	cmp	r3, #22
 800483c:	d101      	bne.n	8004842 <__sflush_r+0xb2>
 800483e:	602f      	str	r7, [r5, #0]
 8004840:	e7b2      	b.n	80047a8 <__sflush_r+0x18>
 8004842:	89a3      	ldrh	r3, [r4, #12]
 8004844:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004848:	81a3      	strh	r3, [r4, #12]
 800484a:	e7ae      	b.n	80047aa <__sflush_r+0x1a>
 800484c:	690f      	ldr	r7, [r1, #16]
 800484e:	2f00      	cmp	r7, #0
 8004850:	d0aa      	beq.n	80047a8 <__sflush_r+0x18>
 8004852:	0793      	lsls	r3, r2, #30
 8004854:	680e      	ldr	r6, [r1, #0]
 8004856:	bf08      	it	eq
 8004858:	694b      	ldreq	r3, [r1, #20]
 800485a:	600f      	str	r7, [r1, #0]
 800485c:	bf18      	it	ne
 800485e:	2300      	movne	r3, #0
 8004860:	1bf6      	subs	r6, r6, r7
 8004862:	608b      	str	r3, [r1, #8]
 8004864:	2e00      	cmp	r6, #0
 8004866:	dd9f      	ble.n	80047a8 <__sflush_r+0x18>
 8004868:	6a21      	ldr	r1, [r4, #32]
 800486a:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800486e:	4633      	mov	r3, r6
 8004870:	463a      	mov	r2, r7
 8004872:	4628      	mov	r0, r5
 8004874:	47e0      	blx	ip
 8004876:	2800      	cmp	r0, #0
 8004878:	dc06      	bgt.n	8004888 <__sflush_r+0xf8>
 800487a:	89a3      	ldrh	r3, [r4, #12]
 800487c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004880:	81a3      	strh	r3, [r4, #12]
 8004882:	f04f 30ff 	mov.w	r0, #4294967295
 8004886:	e790      	b.n	80047aa <__sflush_r+0x1a>
 8004888:	4407      	add	r7, r0
 800488a:	1a36      	subs	r6, r6, r0
 800488c:	e7ea      	b.n	8004864 <__sflush_r+0xd4>
 800488e:	bf00      	nop
 8004890:	20400001 	.word	0x20400001

08004894 <_fflush_r>:
 8004894:	b538      	push	{r3, r4, r5, lr}
 8004896:	690b      	ldr	r3, [r1, #16]
 8004898:	4605      	mov	r5, r0
 800489a:	460c      	mov	r4, r1
 800489c:	b913      	cbnz	r3, 80048a4 <_fflush_r+0x10>
 800489e:	2500      	movs	r5, #0
 80048a0:	4628      	mov	r0, r5
 80048a2:	bd38      	pop	{r3, r4, r5, pc}
 80048a4:	b118      	cbz	r0, 80048ae <_fflush_r+0x1a>
 80048a6:	6983      	ldr	r3, [r0, #24]
 80048a8:	b90b      	cbnz	r3, 80048ae <_fflush_r+0x1a>
 80048aa:	f7ff fa1b 	bl	8003ce4 <__sinit>
 80048ae:	4b14      	ldr	r3, [pc, #80]	; (8004900 <_fflush_r+0x6c>)
 80048b0:	429c      	cmp	r4, r3
 80048b2:	d11b      	bne.n	80048ec <_fflush_r+0x58>
 80048b4:	686c      	ldr	r4, [r5, #4]
 80048b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d0ef      	beq.n	800489e <_fflush_r+0xa>
 80048be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80048c0:	07d0      	lsls	r0, r2, #31
 80048c2:	d404      	bmi.n	80048ce <_fflush_r+0x3a>
 80048c4:	0599      	lsls	r1, r3, #22
 80048c6:	d402      	bmi.n	80048ce <_fflush_r+0x3a>
 80048c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80048ca:	f7ff faa9 	bl	8003e20 <__retarget_lock_acquire_recursive>
 80048ce:	4628      	mov	r0, r5
 80048d0:	4621      	mov	r1, r4
 80048d2:	f7ff ff5d 	bl	8004790 <__sflush_r>
 80048d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80048d8:	07da      	lsls	r2, r3, #31
 80048da:	4605      	mov	r5, r0
 80048dc:	d4e0      	bmi.n	80048a0 <_fflush_r+0xc>
 80048de:	89a3      	ldrh	r3, [r4, #12]
 80048e0:	059b      	lsls	r3, r3, #22
 80048e2:	d4dd      	bmi.n	80048a0 <_fflush_r+0xc>
 80048e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80048e6:	f7ff fa9c 	bl	8003e22 <__retarget_lock_release_recursive>
 80048ea:	e7d9      	b.n	80048a0 <_fflush_r+0xc>
 80048ec:	4b05      	ldr	r3, [pc, #20]	; (8004904 <_fflush_r+0x70>)
 80048ee:	429c      	cmp	r4, r3
 80048f0:	d101      	bne.n	80048f6 <_fflush_r+0x62>
 80048f2:	68ac      	ldr	r4, [r5, #8]
 80048f4:	e7df      	b.n	80048b6 <_fflush_r+0x22>
 80048f6:	4b04      	ldr	r3, [pc, #16]	; (8004908 <_fflush_r+0x74>)
 80048f8:	429c      	cmp	r4, r3
 80048fa:	bf08      	it	eq
 80048fc:	68ec      	ldreq	r4, [r5, #12]
 80048fe:	e7da      	b.n	80048b6 <_fflush_r+0x22>
 8004900:	08004c40 	.word	0x08004c40
 8004904:	08004c60 	.word	0x08004c60
 8004908:	08004c20 	.word	0x08004c20

0800490c <_lseek_r>:
 800490c:	b538      	push	{r3, r4, r5, lr}
 800490e:	4d07      	ldr	r5, [pc, #28]	; (800492c <_lseek_r+0x20>)
 8004910:	4604      	mov	r4, r0
 8004912:	4608      	mov	r0, r1
 8004914:	4611      	mov	r1, r2
 8004916:	2200      	movs	r2, #0
 8004918:	602a      	str	r2, [r5, #0]
 800491a:	461a      	mov	r2, r3
 800491c:	f7fc f8c4 	bl	8000aa8 <_lseek>
 8004920:	1c43      	adds	r3, r0, #1
 8004922:	d102      	bne.n	800492a <_lseek_r+0x1e>
 8004924:	682b      	ldr	r3, [r5, #0]
 8004926:	b103      	cbz	r3, 800492a <_lseek_r+0x1e>
 8004928:	6023      	str	r3, [r4, #0]
 800492a:	bd38      	pop	{r3, r4, r5, pc}
 800492c:	2000019c 	.word	0x2000019c

08004930 <__swhatbuf_r>:
 8004930:	b570      	push	{r4, r5, r6, lr}
 8004932:	460e      	mov	r6, r1
 8004934:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004938:	2900      	cmp	r1, #0
 800493a:	b096      	sub	sp, #88	; 0x58
 800493c:	4614      	mov	r4, r2
 800493e:	461d      	mov	r5, r3
 8004940:	da08      	bge.n	8004954 <__swhatbuf_r+0x24>
 8004942:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004946:	2200      	movs	r2, #0
 8004948:	602a      	str	r2, [r5, #0]
 800494a:	061a      	lsls	r2, r3, #24
 800494c:	d410      	bmi.n	8004970 <__swhatbuf_r+0x40>
 800494e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004952:	e00e      	b.n	8004972 <__swhatbuf_r+0x42>
 8004954:	466a      	mov	r2, sp
 8004956:	f000 f8b9 	bl	8004acc <_fstat_r>
 800495a:	2800      	cmp	r0, #0
 800495c:	dbf1      	blt.n	8004942 <__swhatbuf_r+0x12>
 800495e:	9a01      	ldr	r2, [sp, #4]
 8004960:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004964:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004968:	425a      	negs	r2, r3
 800496a:	415a      	adcs	r2, r3
 800496c:	602a      	str	r2, [r5, #0]
 800496e:	e7ee      	b.n	800494e <__swhatbuf_r+0x1e>
 8004970:	2340      	movs	r3, #64	; 0x40
 8004972:	2000      	movs	r0, #0
 8004974:	6023      	str	r3, [r4, #0]
 8004976:	b016      	add	sp, #88	; 0x58
 8004978:	bd70      	pop	{r4, r5, r6, pc}
	...

0800497c <__smakebuf_r>:
 800497c:	898b      	ldrh	r3, [r1, #12]
 800497e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004980:	079d      	lsls	r5, r3, #30
 8004982:	4606      	mov	r6, r0
 8004984:	460c      	mov	r4, r1
 8004986:	d507      	bpl.n	8004998 <__smakebuf_r+0x1c>
 8004988:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800498c:	6023      	str	r3, [r4, #0]
 800498e:	6123      	str	r3, [r4, #16]
 8004990:	2301      	movs	r3, #1
 8004992:	6163      	str	r3, [r4, #20]
 8004994:	b002      	add	sp, #8
 8004996:	bd70      	pop	{r4, r5, r6, pc}
 8004998:	ab01      	add	r3, sp, #4
 800499a:	466a      	mov	r2, sp
 800499c:	f7ff ffc8 	bl	8004930 <__swhatbuf_r>
 80049a0:	9900      	ldr	r1, [sp, #0]
 80049a2:	4605      	mov	r5, r0
 80049a4:	4630      	mov	r0, r6
 80049a6:	f7ff fa5d 	bl	8003e64 <_malloc_r>
 80049aa:	b948      	cbnz	r0, 80049c0 <__smakebuf_r+0x44>
 80049ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049b0:	059a      	lsls	r2, r3, #22
 80049b2:	d4ef      	bmi.n	8004994 <__smakebuf_r+0x18>
 80049b4:	f023 0303 	bic.w	r3, r3, #3
 80049b8:	f043 0302 	orr.w	r3, r3, #2
 80049bc:	81a3      	strh	r3, [r4, #12]
 80049be:	e7e3      	b.n	8004988 <__smakebuf_r+0xc>
 80049c0:	4b0d      	ldr	r3, [pc, #52]	; (80049f8 <__smakebuf_r+0x7c>)
 80049c2:	62b3      	str	r3, [r6, #40]	; 0x28
 80049c4:	89a3      	ldrh	r3, [r4, #12]
 80049c6:	6020      	str	r0, [r4, #0]
 80049c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049cc:	81a3      	strh	r3, [r4, #12]
 80049ce:	9b00      	ldr	r3, [sp, #0]
 80049d0:	6163      	str	r3, [r4, #20]
 80049d2:	9b01      	ldr	r3, [sp, #4]
 80049d4:	6120      	str	r0, [r4, #16]
 80049d6:	b15b      	cbz	r3, 80049f0 <__smakebuf_r+0x74>
 80049d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049dc:	4630      	mov	r0, r6
 80049de:	f000 f887 	bl	8004af0 <_isatty_r>
 80049e2:	b128      	cbz	r0, 80049f0 <__smakebuf_r+0x74>
 80049e4:	89a3      	ldrh	r3, [r4, #12]
 80049e6:	f023 0303 	bic.w	r3, r3, #3
 80049ea:	f043 0301 	orr.w	r3, r3, #1
 80049ee:	81a3      	strh	r3, [r4, #12]
 80049f0:	89a0      	ldrh	r0, [r4, #12]
 80049f2:	4305      	orrs	r5, r0
 80049f4:	81a5      	strh	r5, [r4, #12]
 80049f6:	e7cd      	b.n	8004994 <__smakebuf_r+0x18>
 80049f8:	08003c7d 	.word	0x08003c7d

080049fc <__malloc_lock>:
 80049fc:	4801      	ldr	r0, [pc, #4]	; (8004a04 <__malloc_lock+0x8>)
 80049fe:	f7ff ba0f 	b.w	8003e20 <__retarget_lock_acquire_recursive>
 8004a02:	bf00      	nop
 8004a04:	20000190 	.word	0x20000190

08004a08 <__malloc_unlock>:
 8004a08:	4801      	ldr	r0, [pc, #4]	; (8004a10 <__malloc_unlock+0x8>)
 8004a0a:	f7ff ba0a 	b.w	8003e22 <__retarget_lock_release_recursive>
 8004a0e:	bf00      	nop
 8004a10:	20000190 	.word	0x20000190

08004a14 <_free_r>:
 8004a14:	b538      	push	{r3, r4, r5, lr}
 8004a16:	4605      	mov	r5, r0
 8004a18:	2900      	cmp	r1, #0
 8004a1a:	d041      	beq.n	8004aa0 <_free_r+0x8c>
 8004a1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a20:	1f0c      	subs	r4, r1, #4
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	bfb8      	it	lt
 8004a26:	18e4      	addlt	r4, r4, r3
 8004a28:	f7ff ffe8 	bl	80049fc <__malloc_lock>
 8004a2c:	4a1d      	ldr	r2, [pc, #116]	; (8004aa4 <_free_r+0x90>)
 8004a2e:	6813      	ldr	r3, [r2, #0]
 8004a30:	b933      	cbnz	r3, 8004a40 <_free_r+0x2c>
 8004a32:	6063      	str	r3, [r4, #4]
 8004a34:	6014      	str	r4, [r2, #0]
 8004a36:	4628      	mov	r0, r5
 8004a38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a3c:	f7ff bfe4 	b.w	8004a08 <__malloc_unlock>
 8004a40:	42a3      	cmp	r3, r4
 8004a42:	d908      	bls.n	8004a56 <_free_r+0x42>
 8004a44:	6820      	ldr	r0, [r4, #0]
 8004a46:	1821      	adds	r1, r4, r0
 8004a48:	428b      	cmp	r3, r1
 8004a4a:	bf01      	itttt	eq
 8004a4c:	6819      	ldreq	r1, [r3, #0]
 8004a4e:	685b      	ldreq	r3, [r3, #4]
 8004a50:	1809      	addeq	r1, r1, r0
 8004a52:	6021      	streq	r1, [r4, #0]
 8004a54:	e7ed      	b.n	8004a32 <_free_r+0x1e>
 8004a56:	461a      	mov	r2, r3
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	b10b      	cbz	r3, 8004a60 <_free_r+0x4c>
 8004a5c:	42a3      	cmp	r3, r4
 8004a5e:	d9fa      	bls.n	8004a56 <_free_r+0x42>
 8004a60:	6811      	ldr	r1, [r2, #0]
 8004a62:	1850      	adds	r0, r2, r1
 8004a64:	42a0      	cmp	r0, r4
 8004a66:	d10b      	bne.n	8004a80 <_free_r+0x6c>
 8004a68:	6820      	ldr	r0, [r4, #0]
 8004a6a:	4401      	add	r1, r0
 8004a6c:	1850      	adds	r0, r2, r1
 8004a6e:	4283      	cmp	r3, r0
 8004a70:	6011      	str	r1, [r2, #0]
 8004a72:	d1e0      	bne.n	8004a36 <_free_r+0x22>
 8004a74:	6818      	ldr	r0, [r3, #0]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	6053      	str	r3, [r2, #4]
 8004a7a:	4401      	add	r1, r0
 8004a7c:	6011      	str	r1, [r2, #0]
 8004a7e:	e7da      	b.n	8004a36 <_free_r+0x22>
 8004a80:	d902      	bls.n	8004a88 <_free_r+0x74>
 8004a82:	230c      	movs	r3, #12
 8004a84:	602b      	str	r3, [r5, #0]
 8004a86:	e7d6      	b.n	8004a36 <_free_r+0x22>
 8004a88:	6820      	ldr	r0, [r4, #0]
 8004a8a:	1821      	adds	r1, r4, r0
 8004a8c:	428b      	cmp	r3, r1
 8004a8e:	bf04      	itt	eq
 8004a90:	6819      	ldreq	r1, [r3, #0]
 8004a92:	685b      	ldreq	r3, [r3, #4]
 8004a94:	6063      	str	r3, [r4, #4]
 8004a96:	bf04      	itt	eq
 8004a98:	1809      	addeq	r1, r1, r0
 8004a9a:	6021      	streq	r1, [r4, #0]
 8004a9c:	6054      	str	r4, [r2, #4]
 8004a9e:	e7ca      	b.n	8004a36 <_free_r+0x22>
 8004aa0:	bd38      	pop	{r3, r4, r5, pc}
 8004aa2:	bf00      	nop
 8004aa4:	20000194 	.word	0x20000194

08004aa8 <_read_r>:
 8004aa8:	b538      	push	{r3, r4, r5, lr}
 8004aaa:	4d07      	ldr	r5, [pc, #28]	; (8004ac8 <_read_r+0x20>)
 8004aac:	4604      	mov	r4, r0
 8004aae:	4608      	mov	r0, r1
 8004ab0:	4611      	mov	r1, r2
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	602a      	str	r2, [r5, #0]
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	f7fb ff99 	bl	80009ee <_read>
 8004abc:	1c43      	adds	r3, r0, #1
 8004abe:	d102      	bne.n	8004ac6 <_read_r+0x1e>
 8004ac0:	682b      	ldr	r3, [r5, #0]
 8004ac2:	b103      	cbz	r3, 8004ac6 <_read_r+0x1e>
 8004ac4:	6023      	str	r3, [r4, #0]
 8004ac6:	bd38      	pop	{r3, r4, r5, pc}
 8004ac8:	2000019c 	.word	0x2000019c

08004acc <_fstat_r>:
 8004acc:	b538      	push	{r3, r4, r5, lr}
 8004ace:	4d07      	ldr	r5, [pc, #28]	; (8004aec <_fstat_r+0x20>)
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	4604      	mov	r4, r0
 8004ad4:	4608      	mov	r0, r1
 8004ad6:	4611      	mov	r1, r2
 8004ad8:	602b      	str	r3, [r5, #0]
 8004ada:	f7fb ffcc 	bl	8000a76 <_fstat>
 8004ade:	1c43      	adds	r3, r0, #1
 8004ae0:	d102      	bne.n	8004ae8 <_fstat_r+0x1c>
 8004ae2:	682b      	ldr	r3, [r5, #0]
 8004ae4:	b103      	cbz	r3, 8004ae8 <_fstat_r+0x1c>
 8004ae6:	6023      	str	r3, [r4, #0]
 8004ae8:	bd38      	pop	{r3, r4, r5, pc}
 8004aea:	bf00      	nop
 8004aec:	2000019c 	.word	0x2000019c

08004af0 <_isatty_r>:
 8004af0:	b538      	push	{r3, r4, r5, lr}
 8004af2:	4d06      	ldr	r5, [pc, #24]	; (8004b0c <_isatty_r+0x1c>)
 8004af4:	2300      	movs	r3, #0
 8004af6:	4604      	mov	r4, r0
 8004af8:	4608      	mov	r0, r1
 8004afa:	602b      	str	r3, [r5, #0]
 8004afc:	f7fb ffca 	bl	8000a94 <_isatty>
 8004b00:	1c43      	adds	r3, r0, #1
 8004b02:	d102      	bne.n	8004b0a <_isatty_r+0x1a>
 8004b04:	682b      	ldr	r3, [r5, #0]
 8004b06:	b103      	cbz	r3, 8004b0a <_isatty_r+0x1a>
 8004b08:	6023      	str	r3, [r4, #0]
 8004b0a:	bd38      	pop	{r3, r4, r5, pc}
 8004b0c:	2000019c 	.word	0x2000019c

08004b10 <_init>:
 8004b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b12:	bf00      	nop
 8004b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b16:	bc08      	pop	{r3}
 8004b18:	469e      	mov	lr, r3
 8004b1a:	4770      	bx	lr

08004b1c <_fini>:
 8004b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b1e:	bf00      	nop
 8004b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b22:	bc08      	pop	{r3}
 8004b24:	469e      	mov	lr, r3
 8004b26:	4770      	bx	lr
