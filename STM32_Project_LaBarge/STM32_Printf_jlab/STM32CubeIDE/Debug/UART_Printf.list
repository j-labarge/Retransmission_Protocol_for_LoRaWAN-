
UART_Printf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041b0  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  080042f0  080042f0  000142f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044f0  080044f0  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  080044f0  080044f0  000144f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080044f8  080044f8  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080044f8  080044f8  000144f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08004500  08004500  00014500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08004508  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  20000080  08004588  00020080  2**2
                  ALLOC
 10 RAM1_region   00000000  20000150  20000150  00020080  2**0
                  CONTENTS
 11 RAM2_region   00000000  20008000  20008000  00020080  2**0
                  CONTENTS
 12 ._user_heap_stack 00000600  20000150  20000150  00020150  2**0
                  ALLOC
 13 .ARM.attributes 0000002a  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 14 .debug_line   00010a1b  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   0000fdf8  00000000  00000000  00030ac5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00002470  00000000  00000000  000408bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001020  00000000  00000000  00042d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b2a39  00000000  00000000  00043d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00000f48  00000000  00000000  000f6790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0001d367  00000000  00000000  000f76d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00114a3f  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00004a10  00000000  00000000  00114a90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000080 	.word	0x20000080
 800015c:	00000000 	.word	0x00000000
 8000160:	080042d8 	.word	0x080042d8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000084 	.word	0x20000084
 800017c:	080042d8 	.word	0x080042d8

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b974 	b.w	8000520 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	4688      	mov	r8, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14d      	bne.n	80002fc <__udivmoddi4+0xac>
 8000260:	428a      	cmp	r2, r1
 8000262:	4694      	mov	ip, r2
 8000264:	d968      	bls.n	8000338 <__udivmoddi4+0xe8>
 8000266:	fab2 f282 	clz	r2, r2
 800026a:	b152      	cbz	r2, 8000282 <__udivmoddi4+0x32>
 800026c:	fa01 f302 	lsl.w	r3, r1, r2
 8000270:	f1c2 0120 	rsb	r1, r2, #32
 8000274:	fa20 f101 	lsr.w	r1, r0, r1
 8000278:	fa0c fc02 	lsl.w	ip, ip, r2
 800027c:	ea41 0803 	orr.w	r8, r1, r3
 8000280:	4094      	lsls	r4, r2
 8000282:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8000286:	0c21      	lsrs	r1, r4, #16
 8000288:	fbb8 fef5 	udiv	lr, r8, r5
 800028c:	fa1f f78c 	uxth.w	r7, ip
 8000290:	fb05 831e 	mls	r3, r5, lr, r8
 8000294:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000298:	fb0e f107 	mul.w	r1, lr, r7
 800029c:	4299      	cmp	r1, r3
 800029e:	d90b      	bls.n	80002b8 <__udivmoddi4+0x68>
 80002a0:	eb1c 0303 	adds.w	r3, ip, r3
 80002a4:	f10e 30ff 	add.w	r0, lr, #4294967295
 80002a8:	f080 811e 	bcs.w	80004e8 <__udivmoddi4+0x298>
 80002ac:	4299      	cmp	r1, r3
 80002ae:	f240 811b 	bls.w	80004e8 <__udivmoddi4+0x298>
 80002b2:	f1ae 0e02 	sub.w	lr, lr, #2
 80002b6:	4463      	add	r3, ip
 80002b8:	1a5b      	subs	r3, r3, r1
 80002ba:	b2a4      	uxth	r4, r4
 80002bc:	fbb3 f0f5 	udiv	r0, r3, r5
 80002c0:	fb05 3310 	mls	r3, r5, r0, r3
 80002c4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c8:	fb00 f707 	mul.w	r7, r0, r7
 80002cc:	42a7      	cmp	r7, r4
 80002ce:	d90a      	bls.n	80002e6 <__udivmoddi4+0x96>
 80002d0:	eb1c 0404 	adds.w	r4, ip, r4
 80002d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002d8:	f080 8108 	bcs.w	80004ec <__udivmoddi4+0x29c>
 80002dc:	42a7      	cmp	r7, r4
 80002de:	f240 8105 	bls.w	80004ec <__udivmoddi4+0x29c>
 80002e2:	4464      	add	r4, ip
 80002e4:	3802      	subs	r0, #2
 80002e6:	1be4      	subs	r4, r4, r7
 80002e8:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80002ec:	2100      	movs	r1, #0
 80002ee:	b11e      	cbz	r6, 80002f8 <__udivmoddi4+0xa8>
 80002f0:	40d4      	lsrs	r4, r2
 80002f2:	2300      	movs	r3, #0
 80002f4:	e9c6 4300 	strd	r4, r3, [r6]
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d908      	bls.n	8000312 <__udivmoddi4+0xc2>
 8000300:	2e00      	cmp	r6, #0
 8000302:	f000 80ee 	beq.w	80004e2 <__udivmoddi4+0x292>
 8000306:	2100      	movs	r1, #0
 8000308:	e9c6 0500 	strd	r0, r5, [r6]
 800030c:	4608      	mov	r0, r1
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f183 	clz	r1, r3
 8000316:	2900      	cmp	r1, #0
 8000318:	d14a      	bne.n	80003b0 <__udivmoddi4+0x160>
 800031a:	42ab      	cmp	r3, r5
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd4>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80f9 	bhi.w	8000516 <__udivmoddi4+0x2c6>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb65 0303 	sbc.w	r3, r5, r3
 800032a:	2001      	movs	r0, #1
 800032c:	4698      	mov	r8, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d0e2      	beq.n	80002f8 <__udivmoddi4+0xa8>
 8000332:	e9c6 4800 	strd	r4, r8, [r6]
 8000336:	e7df      	b.n	80002f8 <__udivmoddi4+0xa8>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xec>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 8091 	bne.w	8000468 <__udivmoddi4+0x218>
 8000346:	eba1 050c 	sub.w	r5, r1, ip
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f fe8c 	uxth.w	lr, ip
 8000352:	2101      	movs	r1, #1
 8000354:	fbb5 f3f7 	udiv	r3, r5, r7
 8000358:	fb07 5013 	mls	r0, r7, r3, r5
 800035c:	0c25      	lsrs	r5, r4, #16
 800035e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000362:	fb0e f003 	mul.w	r0, lr, r3
 8000366:	42a8      	cmp	r0, r5
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x12c>
 800036a:	eb1c 0505 	adds.w	r5, ip, r5
 800036e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x12a>
 8000374:	42a8      	cmp	r0, r5
 8000376:	f200 80cb 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 800037a:	4643      	mov	r3, r8
 800037c:	1a2d      	subs	r5, r5, r0
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb5 f0f7 	udiv	r0, r5, r7
 8000384:	fb07 5510 	mls	r5, r7, r0, r5
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb0e fe00 	mul.w	lr, lr, r0
 8000390:	45a6      	cmp	lr, r4
 8000392:	d908      	bls.n	80003a6 <__udivmoddi4+0x156>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 35ff 	add.w	r5, r0, #4294967295
 800039c:	d202      	bcs.n	80003a4 <__udivmoddi4+0x154>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f200 80bb 	bhi.w	800051a <__udivmoddi4+0x2ca>
 80003a4:	4628      	mov	r0, r5
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ae:	e79e      	b.n	80002ee <__udivmoddi4+0x9e>
 80003b0:	f1c1 0720 	rsb	r7, r1, #32
 80003b4:	408b      	lsls	r3, r1
 80003b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa20 f407 	lsr.w	r4, r0, r7
 80003c2:	fa05 f301 	lsl.w	r3, r5, r1
 80003c6:	431c      	orrs	r4, r3
 80003c8:	40fd      	lsrs	r5, r7
 80003ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ce:	fa00 f301 	lsl.w	r3, r0, r1
 80003d2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003d6:	0c20      	lsrs	r0, r4, #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fb09 5518 	mls	r5, r9, r8, r5
 80003e0:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 80003e4:	fb08 f00e 	mul.w	r0, r8, lr
 80003e8:	42a8      	cmp	r0, r5
 80003ea:	fa02 f201 	lsl.w	r2, r2, r1
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b8>
 80003f0:	eb1c 0505 	adds.w	r5, ip, r5
 80003f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f8:	f080 8088 	bcs.w	800050c <__udivmoddi4+0x2bc>
 80003fc:	42a8      	cmp	r0, r5
 80003fe:	f240 8085 	bls.w	800050c <__udivmoddi4+0x2bc>
 8000402:	f1a8 0802 	sub.w	r8, r8, #2
 8000406:	4465      	add	r5, ip
 8000408:	1a2d      	subs	r5, r5, r0
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb5 f0f9 	udiv	r0, r5, r9
 8000410:	fb09 5510 	mls	r5, r9, r0, r5
 8000414:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000418:	fb00 fe0e 	mul.w	lr, r0, lr
 800041c:	45ae      	cmp	lr, r5
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1e2>
 8000420:	eb1c 0505 	adds.w	r5, ip, r5
 8000424:	f100 34ff 	add.w	r4, r0, #4294967295
 8000428:	d26c      	bcs.n	8000504 <__udivmoddi4+0x2b4>
 800042a:	45ae      	cmp	lr, r5
 800042c:	d96a      	bls.n	8000504 <__udivmoddi4+0x2b4>
 800042e:	3802      	subs	r0, #2
 8000430:	4465      	add	r5, ip
 8000432:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000436:	fba0 9402 	umull	r9, r4, r0, r2
 800043a:	eba5 050e 	sub.w	r5, r5, lr
 800043e:	42a5      	cmp	r5, r4
 8000440:	46c8      	mov	r8, r9
 8000442:	46a6      	mov	lr, r4
 8000444:	d356      	bcc.n	80004f4 <__udivmoddi4+0x2a4>
 8000446:	d053      	beq.n	80004f0 <__udivmoddi4+0x2a0>
 8000448:	b15e      	cbz	r6, 8000462 <__udivmoddi4+0x212>
 800044a:	ebb3 0208 	subs.w	r2, r3, r8
 800044e:	eb65 050e 	sbc.w	r5, r5, lr
 8000452:	fa05 f707 	lsl.w	r7, r5, r7
 8000456:	fa22 f301 	lsr.w	r3, r2, r1
 800045a:	40cd      	lsrs	r5, r1
 800045c:	431f      	orrs	r7, r3
 800045e:	e9c6 7500 	strd	r7, r5, [r6]
 8000462:	2100      	movs	r1, #0
 8000464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000468:	f1c2 0320 	rsb	r3, r2, #32
 800046c:	fa20 f103 	lsr.w	r1, r0, r3
 8000470:	fa0c fc02 	lsl.w	ip, ip, r2
 8000474:	fa25 f303 	lsr.w	r3, r5, r3
 8000478:	4095      	lsls	r5, r2
 800047a:	430d      	orrs	r5, r1
 800047c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000480:	fa1f fe8c 	uxth.w	lr, ip
 8000484:	fbb3 f1f7 	udiv	r1, r3, r7
 8000488:	fb07 3011 	mls	r0, r7, r1, r3
 800048c:	0c2b      	lsrs	r3, r5, #16
 800048e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8000492:	fb01 f00e 	mul.w	r0, r1, lr
 8000496:	4298      	cmp	r0, r3
 8000498:	fa04 f402 	lsl.w	r4, r4, r2
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x260>
 800049e:	eb1c 0303 	adds.w	r3, ip, r3
 80004a2:	f101 38ff 	add.w	r8, r1, #4294967295
 80004a6:	d22f      	bcs.n	8000508 <__udivmoddi4+0x2b8>
 80004a8:	4298      	cmp	r0, r3
 80004aa:	d92d      	bls.n	8000508 <__udivmoddi4+0x2b8>
 80004ac:	3902      	subs	r1, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	1a1b      	subs	r3, r3, r0
 80004b2:	b2ad      	uxth	r5, r5
 80004b4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004b8:	fb07 3310 	mls	r3, r7, r0, r3
 80004bc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004c0:	fb00 f30e 	mul.w	r3, r0, lr
 80004c4:	42ab      	cmp	r3, r5
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x28a>
 80004c8:	eb1c 0505 	adds.w	r5, ip, r5
 80004cc:	f100 38ff 	add.w	r8, r0, #4294967295
 80004d0:	d216      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004d2:	42ab      	cmp	r3, r5
 80004d4:	d914      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004d6:	3802      	subs	r0, #2
 80004d8:	4465      	add	r5, ip
 80004da:	1aed      	subs	r5, r5, r3
 80004dc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e0:	e738      	b.n	8000354 <__udivmoddi4+0x104>
 80004e2:	4631      	mov	r1, r6
 80004e4:	4630      	mov	r0, r6
 80004e6:	e707      	b.n	80002f8 <__udivmoddi4+0xa8>
 80004e8:	4686      	mov	lr, r0
 80004ea:	e6e5      	b.n	80002b8 <__udivmoddi4+0x68>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6fa      	b.n	80002e6 <__udivmoddi4+0x96>
 80004f0:	454b      	cmp	r3, r9
 80004f2:	d2a9      	bcs.n	8000448 <__udivmoddi4+0x1f8>
 80004f4:	ebb9 0802 	subs.w	r8, r9, r2
 80004f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004fc:	3801      	subs	r0, #1
 80004fe:	e7a3      	b.n	8000448 <__udivmoddi4+0x1f8>
 8000500:	4640      	mov	r0, r8
 8000502:	e7ea      	b.n	80004da <__udivmoddi4+0x28a>
 8000504:	4620      	mov	r0, r4
 8000506:	e794      	b.n	8000432 <__udivmoddi4+0x1e2>
 8000508:	4641      	mov	r1, r8
 800050a:	e7d1      	b.n	80004b0 <__udivmoddi4+0x260>
 800050c:	46d0      	mov	r8, sl
 800050e:	e77b      	b.n	8000408 <__udivmoddi4+0x1b8>
 8000510:	3b02      	subs	r3, #2
 8000512:	4465      	add	r5, ip
 8000514:	e732      	b.n	800037c <__udivmoddi4+0x12c>
 8000516:	4608      	mov	r0, r1
 8000518:	e709      	b.n	800032e <__udivmoddi4+0xde>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e742      	b.n	80003a6 <__udivmoddi4+0x156>

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000524:	480d      	ldr	r0, [pc, #52]	; (800055c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000526:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000528:	f000 fad2 	bl	8000ad0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800052c:	480c      	ldr	r0, [pc, #48]	; (8000560 <LoopForever+0x6>)
  ldr r1, =_edata
 800052e:	490d      	ldr	r1, [pc, #52]	; (8000564 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000530:	4a0d      	ldr	r2, [pc, #52]	; (8000568 <LoopForever+0xe>)
  movs r3, #0
 8000532:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000534:	e002      	b.n	800053c <LoopCopyDataInit>

08000536 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000536:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000538:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800053a:	3304      	adds	r3, #4

0800053c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800053c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800053e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000540:	d3f9      	bcc.n	8000536 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000542:	4a0a      	ldr	r2, [pc, #40]	; (800056c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000544:	4c0a      	ldr	r4, [pc, #40]	; (8000570 <LoopForever+0x16>)
  movs r3, #0
 8000546:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000548:	e001      	b.n	800054e <LoopFillZerobss>

0800054a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800054a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800054c:	3204      	adds	r2, #4

0800054e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800054e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000550:	d3fb      	bcc.n	800054a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000552:	f002 ff0f 	bl	8003374 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000556:	f000 f827 	bl	80005a8 <main>

0800055a <LoopForever>:

LoopForever:
    b LoopForever
 800055a:	e7fe      	b.n	800055a <LoopForever>
  ldr   r0, =_estack
 800055c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000560:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000564:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000568:	08004508 	.word	0x08004508
  ldr r2, =_sbss
 800056c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000570:	20000150 	.word	0x20000150

08000574 <ADC_IRQHandler>:
  * @retval : None
  */
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000574:	e7fe      	b.n	8000574 <ADC_IRQHandler>

08000576 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000576:	b480      	push	{r7}
 8000578:	b085      	sub	sp, #20
 800057a:	af00      	add	r7, sp, #0
 800057c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800057e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000582:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000584:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	4313      	orrs	r3, r2
 800058c:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800058e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000592:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	4013      	ands	r3, r2
 8000598:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800059a:	68fb      	ldr	r3, [r7, #12]
}
 800059c:	bf00      	nop
 800059e:	3714      	adds	r7, #20
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bc80      	pop	{r7}
 80005a4:	4770      	bx	lr
	...

080005a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ac:	f000 fa96 	bl	8000adc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b0:	f000 f81e 	bl	80005f0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* Initialize BSP Led for LED3 */
  BSP_LED_Init(LED3);
 80005b4:	2002      	movs	r0, #2
 80005b6:	f000 fa37 	bl	8000a28 <BSP_LED_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ba:	f000 f8c7 	bl	800074c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005be:	f000 f877 	bl	80006b0 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /* Output a message on Hyperterminal using printf function */
	   printf("\n\r UART Printf Example: retarget the C library printf function to the UART\n\r");
 80005c2:	4808      	ldr	r0, [pc, #32]	; (80005e4 <main+0x3c>)
 80005c4:	f002 ff02 	bl	80033cc <iprintf>
	   printf("** Test finished successfully. ** \n\r");
 80005c8:	4807      	ldr	r0, [pc, #28]	; (80005e8 <main+0x40>)
 80005ca:	f002 feff 	bl	80033cc <iprintf>
	   //printf(i);
	   i++;
 80005ce:	4b07      	ldr	r3, [pc, #28]	; (80005ec <main+0x44>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	3301      	adds	r3, #1
 80005d4:	4a05      	ldr	r2, [pc, #20]	; (80005ec <main+0x44>)
 80005d6:	6013      	str	r3, [r2, #0]
	   HAL_Delay(1000);
 80005d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005dc:	f000 faf4 	bl	8000bc8 <HAL_Delay>
	   printf("\n\r UART Printf Example: retarget the C library printf function to the UART\n\r");
 80005e0:	e7ef      	b.n	80005c2 <main+0x1a>
 80005e2:	bf00      	nop
 80005e4:	080042f0 	.word	0x080042f0
 80005e8:	08004340 	.word	0x08004340
 80005ec:	20000130 	.word	0x20000130

080005f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b09a      	sub	sp, #104	; 0x68
 80005f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f6:	f107 0320 	add.w	r3, r7, #32
 80005fa:	2248      	movs	r2, #72	; 0x48
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f002 fedc 	bl	80033bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000604:	1d3b      	adds	r3, r7, #4
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	605a      	str	r2, [r3, #4]
 800060c:	609a      	str	r2, [r3, #8]
 800060e:	60da      	str	r2, [r3, #12]
 8000610:	611a      	str	r2, [r3, #16]
 8000612:	615a      	str	r2, [r3, #20]
 8000614:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000616:	4b25      	ldr	r3, [pc, #148]	; (80006ac <SystemClock_Config+0xbc>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800061e:	4a23      	ldr	r2, [pc, #140]	; (80006ac <SystemClock_Config+0xbc>)
 8000620:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000624:	6013      	str	r3, [r2, #0]
 8000626:	4b21      	ldr	r3, [pc, #132]	; (80006ac <SystemClock_Config+0xbc>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800062e:	603b      	str	r3, [r7, #0]
 8000630:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000632:	2320      	movs	r3, #32
 8000634:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000636:	2301      	movs	r3, #1
 8000638:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800063a:	2300      	movs	r3, #0
 800063c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_8;
 800063e:	2380      	movs	r3, #128	; 0x80
 8000640:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000642:	2302      	movs	r3, #2
 8000644:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000646:	2301      	movs	r3, #1
 8000648:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800064a:	2330      	movs	r3, #48	; 0x30
 800064c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 24;
 800064e:	2318      	movs	r3, #24
 8000650:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000652:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000656:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000658:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800065c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800065e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000662:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000664:	f107 0320 	add.w	r3, r7, #32
 8000668:	4618      	mov	r0, r3
 800066a:	f000 fffd 	bl	8001668 <HAL_RCC_OscConfig>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000674:	f000 f884 	bl	8000780 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8000678:	234f      	movs	r3, #79	; 0x4f
 800067a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067c:	2303      	movs	r3, #3
 800067e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000680:	2300      	movs	r3, #0
 8000682:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000690:	1d3b      	adds	r3, r7, #4
 8000692:	2102      	movs	r1, #2
 8000694:	4618      	mov	r0, r3
 8000696:	f001 fb69 	bl	8001d6c <HAL_RCC_ClockConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80006a0:	f000 f86e 	bl	8000780 <Error_Handler>
  }
}
 80006a4:	bf00      	nop
 80006a6:	3768      	adds	r7, #104	; 0x68
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	58000400 	.word	0x58000400

080006b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006b4:	4b23      	ldr	r3, [pc, #140]	; (8000744 <MX_USART2_UART_Init+0x94>)
 80006b6:	4a24      	ldr	r2, [pc, #144]	; (8000748 <MX_USART2_UART_Init+0x98>)
 80006b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006ba:	4b22      	ldr	r3, [pc, #136]	; (8000744 <MX_USART2_UART_Init+0x94>)
 80006bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006c2:	4b20      	ldr	r3, [pc, #128]	; (8000744 <MX_USART2_UART_Init+0x94>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006c8:	4b1e      	ldr	r3, [pc, #120]	; (8000744 <MX_USART2_UART_Init+0x94>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_ODD;
 80006ce:	4b1d      	ldr	r3, [pc, #116]	; (8000744 <MX_USART2_UART_Init+0x94>)
 80006d0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80006d4:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006d6:	4b1b      	ldr	r3, [pc, #108]	; (8000744 <MX_USART2_UART_Init+0x94>)
 80006d8:	220c      	movs	r2, #12
 80006da:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006dc:	4b19      	ldr	r3, [pc, #100]	; (8000744 <MX_USART2_UART_Init+0x94>)
 80006de:	2200      	movs	r2, #0
 80006e0:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e2:	4b18      	ldr	r3, [pc, #96]	; (8000744 <MX_USART2_UART_Init+0x94>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006e8:	4b16      	ldr	r3, [pc, #88]	; (8000744 <MX_USART2_UART_Init+0x94>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006ee:	4b15      	ldr	r3, [pc, #84]	; (8000744 <MX_USART2_UART_Init+0x94>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006f4:	4b13      	ldr	r3, [pc, #76]	; (8000744 <MX_USART2_UART_Init+0x94>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006fa:	4812      	ldr	r0, [pc, #72]	; (8000744 <MX_USART2_UART_Init+0x94>)
 80006fc:	f002 f831 	bl	8002762 <HAL_UART_Init>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8000706:	f000 f83b 	bl	8000780 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800070a:	2100      	movs	r1, #0
 800070c:	480d      	ldr	r0, [pc, #52]	; (8000744 <MX_USART2_UART_Init+0x94>)
 800070e:	f002 fd62 	bl	80031d6 <HAL_UARTEx_SetTxFifoThreshold>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8000718:	f000 f832 	bl	8000780 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800071c:	2100      	movs	r1, #0
 800071e:	4809      	ldr	r0, [pc, #36]	; (8000744 <MX_USART2_UART_Init+0x94>)
 8000720:	f002 fd97 	bl	8003252 <HAL_UARTEx_SetRxFifoThreshold>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 800072a:	f000 f829 	bl	8000780 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800072e:	4805      	ldr	r0, [pc, #20]	; (8000744 <MX_USART2_UART_Init+0x94>)
 8000730:	f002 fd19 	bl	8003166 <HAL_UARTEx_DisableFifoMode>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 800073a:	f000 f821 	bl	8000780 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	2000009c 	.word	0x2000009c
 8000748:	40004400 	.word	0x40004400

0800074c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000750:	2001      	movs	r0, #1
 8000752:	f7ff ff10 	bl	8000576 <LL_AHB2_GRP1_EnableClock>

}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
	...

0800075c <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000764:	1d39      	adds	r1, r7, #4
 8000766:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800076a:	2201      	movs	r2, #1
 800076c:	4803      	ldr	r0, [pc, #12]	; (800077c <__io_putchar+0x20>)
 800076e:	f002 f848 	bl	8002802 <HAL_UART_Transmit>

  return ch;
 8000772:	687b      	ldr	r3, [r7, #4]
}
 8000774:	4618      	mov	r0, r3
 8000776:	3708      	adds	r7, #8
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	2000009c 	.word	0x2000009c

08000780 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  /* Turn LED3 on */
  BSP_LED_On(LED3);
 8000784:	2002      	movs	r0, #2
 8000786:	f000 f989 	bl	8000a9c <BSP_LED_On>
  while (1);
 800078a:	e7fe      	b.n	800078a <Error_Handler+0xa>

0800078c <LL_AHB2_GRP1_EnableClock>:
{
 800078c:	b480      	push	{r7}
 800078e:	b085      	sub	sp, #20
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000794:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000798:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800079a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	4313      	orrs	r3, r2
 80007a2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80007a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	4013      	ands	r3, r2
 80007ae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007b0:	68fb      	ldr	r3, [r7, #12]
}
 80007b2:	bf00      	nop
 80007b4:	3714      	adds	r7, #20
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bc80      	pop	{r7}
 80007ba:	4770      	bx	lr

080007bc <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80007bc:	b480      	push	{r7}
 80007be:	b085      	sub	sp, #20
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80007c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80007ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	4313      	orrs	r3, r2
 80007d2:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80007d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	4013      	ands	r3, r2
 80007de:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007e0:	68fb      	ldr	r3, [r7, #12]
}
 80007e2:	bf00      	nop
 80007e4:	3714      	adds	r7, #20
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bc80      	pop	{r7}
 80007ea:	4770      	bx	lr

080007ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007f0:	bf00      	nop
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bc80      	pop	{r7}
 80007f6:	4770      	bx	lr

080007f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b096      	sub	sp, #88	; 0x58
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000800:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
 8000808:	605a      	str	r2, [r3, #4]
 800080a:	609a      	str	r2, [r3, #8]
 800080c:	60da      	str	r2, [r3, #12]
 800080e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000810:	f107 030c 	add.w	r3, r7, #12
 8000814:	2238      	movs	r2, #56	; 0x38
 8000816:	2100      	movs	r1, #0
 8000818:	4618      	mov	r0, r3
 800081a:	f002 fdcf 	bl	80033bc <memset>
  if(huart->Instance==USART2)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4a17      	ldr	r2, [pc, #92]	; (8000880 <HAL_UART_MspInit+0x88>)
 8000824:	4293      	cmp	r3, r2
 8000826:	d126      	bne.n	8000876 <HAL_UART_MspInit+0x7e>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000828:	2302      	movs	r3, #2
 800082a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800082c:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8000830:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000832:	f107 030c 	add.w	r3, r7, #12
 8000836:	4618      	mov	r0, r3
 8000838:	f001 fe58 	bl	80024ec <HAL_RCCEx_PeriphCLKConfig>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000842:	f7ff ff9d 	bl	8000780 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000846:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800084a:	f7ff ffb7 	bl	80007bc <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800084e:	2001      	movs	r0, #1
 8000850:	f7ff ff9c 	bl	800078c <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 8000854:	230c      	movs	r3, #12
 8000856:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000858:	2302      	movs	r3, #2
 800085a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800085c:	2301      	movs	r3, #1
 800085e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000860:	2300      	movs	r3, #0
 8000862:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000864:	2307      	movs	r3, #7
 8000866:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000868:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800086c:	4619      	mov	r1, r3
 800086e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000872:	f000 faaf 	bl	8000dd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000876:	bf00      	nop
 8000878:	3758      	adds	r7, #88	; 0x58
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40004400 	.word	0x40004400

08000884 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000888:	bf00      	nop
 800088a:	46bd      	mov	sp, r7
 800088c:	bc80      	pop	{r7}
 800088e:	4770      	bx	lr

08000890 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000894:	e7fe      	b.n	8000894 <HardFault_Handler+0x4>

08000896 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000896:	b480      	push	{r7}
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800089a:	bf00      	nop
 800089c:	46bd      	mov	sp, r7
 800089e:	bc80      	pop	{r7}
 80008a0:	4770      	bx	lr

080008a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008a6:	bf00      	nop
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bc80      	pop	{r7}
 80008ac:	4770      	bx	lr

080008ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008ae:	b580      	push	{r7, lr}
 80008b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008b2:	f000 f96d 	bl	8000b90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}

080008ba <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008ba:	b580      	push	{r7, lr}
 80008bc:	b086      	sub	sp, #24
 80008be:	af00      	add	r7, sp, #0
 80008c0:	60f8      	str	r0, [r7, #12]
 80008c2:	60b9      	str	r1, [r7, #8]
 80008c4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008c6:	2300      	movs	r3, #0
 80008c8:	617b      	str	r3, [r7, #20]
 80008ca:	e00a      	b.n	80008e2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80008cc:	f3af 8000 	nop.w
 80008d0:	4601      	mov	r1, r0
 80008d2:	68bb      	ldr	r3, [r7, #8]
 80008d4:	1c5a      	adds	r2, r3, #1
 80008d6:	60ba      	str	r2, [r7, #8]
 80008d8:	b2ca      	uxtb	r2, r1
 80008da:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	3301      	adds	r3, #1
 80008e0:	617b      	str	r3, [r7, #20]
 80008e2:	697a      	ldr	r2, [r7, #20]
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	429a      	cmp	r2, r3
 80008e8:	dbf0      	blt.n	80008cc <_read+0x12>
	}

return len;
 80008ea:	687b      	ldr	r3, [r7, #4]
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	3718      	adds	r7, #24
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b086      	sub	sp, #24
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	60f8      	str	r0, [r7, #12]
 80008fc:	60b9      	str	r1, [r7, #8]
 80008fe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000900:	2300      	movs	r3, #0
 8000902:	617b      	str	r3, [r7, #20]
 8000904:	e009      	b.n	800091a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000906:	68bb      	ldr	r3, [r7, #8]
 8000908:	1c5a      	adds	r2, r3, #1
 800090a:	60ba      	str	r2, [r7, #8]
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	4618      	mov	r0, r3
 8000910:	f7ff ff24 	bl	800075c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	3301      	adds	r3, #1
 8000918:	617b      	str	r3, [r7, #20]
 800091a:	697a      	ldr	r2, [r7, #20]
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	429a      	cmp	r2, r3
 8000920:	dbf1      	blt.n	8000906 <_write+0x12>
	}
	return len;
 8000922:	687b      	ldr	r3, [r7, #4]
}
 8000924:	4618      	mov	r0, r3
 8000926:	3718      	adds	r7, #24
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}

0800092c <_close>:

int _close(int file)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
	return -1;
 8000934:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000938:	4618      	mov	r0, r3
 800093a:	370c      	adds	r7, #12
 800093c:	46bd      	mov	sp, r7
 800093e:	bc80      	pop	{r7}
 8000940:	4770      	bx	lr

08000942 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000942:	b480      	push	{r7}
 8000944:	b083      	sub	sp, #12
 8000946:	af00      	add	r7, sp, #0
 8000948:	6078      	str	r0, [r7, #4]
 800094a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000952:	605a      	str	r2, [r3, #4]
	return 0;
 8000954:	2300      	movs	r3, #0
}
 8000956:	4618      	mov	r0, r3
 8000958:	370c      	adds	r7, #12
 800095a:	46bd      	mov	sp, r7
 800095c:	bc80      	pop	{r7}
 800095e:	4770      	bx	lr

08000960 <_isatty>:

int _isatty(int file)
{
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
	return 1;
 8000968:	2301      	movs	r3, #1
}
 800096a:	4618      	mov	r0, r3
 800096c:	370c      	adds	r7, #12
 800096e:	46bd      	mov	sp, r7
 8000970:	bc80      	pop	{r7}
 8000972:	4770      	bx	lr

08000974 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000974:	b480      	push	{r7}
 8000976:	b085      	sub	sp, #20
 8000978:	af00      	add	r7, sp, #0
 800097a:	60f8      	str	r0, [r7, #12]
 800097c:	60b9      	str	r1, [r7, #8]
 800097e:	607a      	str	r2, [r7, #4]
	return 0;
 8000980:	2300      	movs	r3, #0
}
 8000982:	4618      	mov	r0, r3
 8000984:	3714      	adds	r7, #20
 8000986:	46bd      	mov	sp, r7
 8000988:	bc80      	pop	{r7}
 800098a:	4770      	bx	lr

0800098c <_sbrk>:
  *
  * @param incr Memory size
  * @return Pointer to allocated memory
  */
void *_sbrk(ptrdiff_t incr)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b086      	sub	sp, #24
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000994:	4a14      	ldr	r2, [pc, #80]	; (80009e8 <_sbrk+0x5c>)
 8000996:	4b15      	ldr	r3, [pc, #84]	; (80009ec <_sbrk+0x60>)
 8000998:	1ad3      	subs	r3, r2, r3
 800099a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize  heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009a0:	4b13      	ldr	r3, [pc, #76]	; (80009f0 <_sbrk+0x64>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d102      	bne.n	80009ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009a8:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <_sbrk+0x64>)
 80009aa:	4a12      	ldr	r2, [pc, #72]	; (80009f4 <_sbrk+0x68>)
 80009ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009ae:	4b10      	ldr	r3, [pc, #64]	; (80009f0 <_sbrk+0x64>)
 80009b0:	681a      	ldr	r2, [r3, #0]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	4413      	add	r3, r2
 80009b6:	693a      	ldr	r2, [r7, #16]
 80009b8:	429a      	cmp	r2, r3
 80009ba:	d207      	bcs.n	80009cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009bc:	f002 fcd4 	bl	8003368 <__errno>
 80009c0:	4603      	mov	r3, r0
 80009c2:	220c      	movs	r2, #12
 80009c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009c6:	f04f 33ff 	mov.w	r3, #4294967295
 80009ca:	e009      	b.n	80009e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009cc:	4b08      	ldr	r3, [pc, #32]	; (80009f0 <_sbrk+0x64>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009d2:	4b07      	ldr	r3, [pc, #28]	; (80009f0 <_sbrk+0x64>)
 80009d4:	681a      	ldr	r2, [r3, #0]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4413      	add	r3, r2
 80009da:	4a05      	ldr	r2, [pc, #20]	; (80009f0 <_sbrk+0x64>)
 80009dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009de:	68fb      	ldr	r3, [r7, #12]
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	3718      	adds	r7, #24
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	20008000 	.word	0x20008000
 80009ec:	00000400 	.word	0x00000400
 80009f0:	20000134 	.word	0x20000134
 80009f4:	20000150 	.word	0x20000150

080009f8 <LL_AHB2_GRP1_EnableClock>:
{
 80009f8:	b480      	push	{r7}
 80009fa:	b085      	sub	sp, #20
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000a00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a04:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000a10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a14:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4013      	ands	r3, r2
 8000a1a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a1c:	68fb      	ldr	r3, [r7, #12]
}
 8000a1e:	bf00      	nop
 8000a20:	3714      	adds	r7, #20
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bc80      	pop	{r7}
 8000a26:	4770      	bx	lr

08000a28 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b088      	sub	sp, #32
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8000a32:	f107 030c 	add.w	r3, r7, #12
 8000a36:	2200      	movs	r2, #0
 8000a38:	601a      	str	r2, [r3, #0]
 8000a3a:	605a      	str	r2, [r3, #4]
 8000a3c:	609a      	str	r2, [r3, #8]
 8000a3e:	60da      	str	r2, [r3, #12]
 8000a40:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8000a42:	2002      	movs	r0, #2
 8000a44:	f7ff ffd8 	bl	80009f8 <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN[Led];
 8000a48:	79fb      	ldrb	r3, [r7, #7]
 8000a4a:	4a12      	ldr	r2, [pc, #72]	; (8000a94 <BSP_LED_Init+0x6c>)
 8000a4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a50:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8000a52:	2301      	movs	r3, #1
 8000a54:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	4a0d      	ldr	r2, [pc, #52]	; (8000a98 <BSP_LED_Init+0x70>)
 8000a62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a66:	f107 020c 	add.w	r2, r7, #12
 8000a6a:	4611      	mov	r1, r2
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f000 f9b1 	bl	8000dd4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000a72:	79fb      	ldrb	r3, [r7, #7]
 8000a74:	4a08      	ldr	r2, [pc, #32]	; (8000a98 <BSP_LED_Init+0x70>)
 8000a76:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	4a05      	ldr	r2, [pc, #20]	; (8000a94 <BSP_LED_Init+0x6c>)
 8000a7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a82:	2200      	movs	r2, #0
 8000a84:	4619      	mov	r1, r3
 8000a86:	f000 fb05 	bl	8001094 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8000a8a:	2300      	movs	r3, #0
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	3720      	adds	r7, #32
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	08004384 	.word	0x08004384
 8000a98:	20000000 	.word	0x20000000

08000a9c <BSP_LED_On>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET); 
 8000aa6:	79fb      	ldrb	r3, [r7, #7]
 8000aa8:	4a07      	ldr	r2, [pc, #28]	; (8000ac8 <BSP_LED_On+0x2c>)
 8000aaa:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000aae:	79fb      	ldrb	r3, [r7, #7]
 8000ab0:	4a06      	ldr	r2, [pc, #24]	; (8000acc <BSP_LED_On+0x30>)
 8000ab2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	f000 faeb 	bl	8001094 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8000abe:	2300      	movs	r3, #0
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3708      	adds	r7, #8
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	20000000 	.word	0x20000000
 8000acc:	08004384 	.word	0x08004384

08000ad0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bc80      	pop	{r7}
 8000ada:	4770      	bx	lr

08000adc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ae6:	2003      	movs	r0, #3
 8000ae8:	f000 f942 	bl	8000d70 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000aec:	f001 fb20 	bl	8002130 <HAL_RCC_GetHCLKFreq>
 8000af0:	4603      	mov	r3, r0
 8000af2:	4a09      	ldr	r2, [pc, #36]	; (8000b18 <HAL_Init+0x3c>)
 8000af4:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000af6:	200f      	movs	r0, #15
 8000af8:	f000 f810 	bl	8000b1c <HAL_InitTick>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d002      	beq.n	8000b08 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000b02:	2301      	movs	r3, #1
 8000b04:	71fb      	strb	r3, [r7, #7]
 8000b06:	e001      	b.n	8000b0c <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b08:	f7ff fe70 	bl	80007ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b0c:	79fb      	ldrb	r3, [r7, #7]
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	2000000c 	.word	0x2000000c

08000b1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b24:	2300      	movs	r3, #0
 8000b26:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b28:	4b17      	ldr	r3, [pc, #92]	; (8000b88 <HAL_InitTick+0x6c>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d024      	beq.n	8000b7a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b30:	f001 fafe 	bl	8002130 <HAL_RCC_GetHCLKFreq>
 8000b34:	4602      	mov	r2, r0
 8000b36:	4b14      	ldr	r3, [pc, #80]	; (8000b88 <HAL_InitTick+0x6c>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b40:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f000 f936 	bl	8000dba <HAL_SYSTICK_Config>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d10f      	bne.n	8000b74 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2b0f      	cmp	r3, #15
 8000b58:	d809      	bhi.n	8000b6e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	6879      	ldr	r1, [r7, #4]
 8000b5e:	f04f 30ff 	mov.w	r0, #4294967295
 8000b62:	f000 f910 	bl	8000d86 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b66:	4a09      	ldr	r2, [pc, #36]	; (8000b8c <HAL_InitTick+0x70>)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	6013      	str	r3, [r2, #0]
 8000b6c:	e007      	b.n	8000b7e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	73fb      	strb	r3, [r7, #15]
 8000b72:	e004      	b.n	8000b7e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b74:	2301      	movs	r3, #1
 8000b76:	73fb      	strb	r3, [r7, #15]
 8000b78:	e001      	b.n	8000b7e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3710      	adds	r7, #16
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	20000014 	.word	0x20000014
 8000b8c:	20000010 	.word	0x20000010

08000b90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b94:	4b05      	ldr	r3, [pc, #20]	; (8000bac <HAL_IncTick+0x1c>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	461a      	mov	r2, r3
 8000b9a:	4b05      	ldr	r3, [pc, #20]	; (8000bb0 <HAL_IncTick+0x20>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4413      	add	r3, r2
 8000ba0:	4a03      	ldr	r2, [pc, #12]	; (8000bb0 <HAL_IncTick+0x20>)
 8000ba2:	6013      	str	r3, [r2, #0]
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bc80      	pop	{r7}
 8000baa:	4770      	bx	lr
 8000bac:	20000014 	.word	0x20000014
 8000bb0:	20000138 	.word	0x20000138

08000bb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bb8:	4b02      	ldr	r3, [pc, #8]	; (8000bc4 <HAL_GetTick+0x10>)
 8000bba:	681b      	ldr	r3, [r3, #0]
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bc80      	pop	{r7}
 8000bc2:	4770      	bx	lr
 8000bc4:	20000138 	.word	0x20000138

08000bc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bd0:	f7ff fff0 	bl	8000bb4 <HAL_GetTick>
 8000bd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000be0:	d005      	beq.n	8000bee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000be2:	4b0a      	ldr	r3, [pc, #40]	; (8000c0c <HAL_Delay+0x44>)
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	461a      	mov	r2, r3
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	4413      	add	r3, r2
 8000bec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bee:	bf00      	nop
 8000bf0:	f7ff ffe0 	bl	8000bb4 <HAL_GetTick>
 8000bf4:	4602      	mov	r2, r0
 8000bf6:	68bb      	ldr	r3, [r7, #8]
 8000bf8:	1ad3      	subs	r3, r2, r3
 8000bfa:	68fa      	ldr	r2, [r7, #12]
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	d8f7      	bhi.n	8000bf0 <HAL_Delay+0x28>
  {
  }
}
 8000c00:	bf00      	nop
 8000c02:	bf00      	nop
 8000c04:	3710      	adds	r7, #16
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20000014 	.word	0x20000014

08000c10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b085      	sub	sp, #20
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	f003 0307 	and.w	r3, r3, #7
 8000c1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c20:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <__NVIC_SetPriorityGrouping+0x44>)
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c26:	68ba      	ldr	r2, [r7, #8]
 8000c28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c42:	4a04      	ldr	r2, [pc, #16]	; (8000c54 <__NVIC_SetPriorityGrouping+0x44>)
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	60d3      	str	r3, [r2, #12]
}
 8000c48:	bf00      	nop
 8000c4a:	3714      	adds	r7, #20
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bc80      	pop	{r7}
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c5c:	4b04      	ldr	r3, [pc, #16]	; (8000c70 <__NVIC_GetPriorityGrouping+0x18>)
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	0a1b      	lsrs	r3, r3, #8
 8000c62:	f003 0307 	and.w	r3, r3, #7
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bc80      	pop	{r7}
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	e000ed00 	.word	0xe000ed00

08000c74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	6039      	str	r1, [r7, #0]
 8000c7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	db0a      	blt.n	8000c9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	b2da      	uxtb	r2, r3
 8000c8c:	490c      	ldr	r1, [pc, #48]	; (8000cc0 <__NVIC_SetPriority+0x4c>)
 8000c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c92:	0112      	lsls	r2, r2, #4
 8000c94:	b2d2      	uxtb	r2, r2
 8000c96:	440b      	add	r3, r1
 8000c98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c9c:	e00a      	b.n	8000cb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	b2da      	uxtb	r2, r3
 8000ca2:	4908      	ldr	r1, [pc, #32]	; (8000cc4 <__NVIC_SetPriority+0x50>)
 8000ca4:	79fb      	ldrb	r3, [r7, #7]
 8000ca6:	f003 030f 	and.w	r3, r3, #15
 8000caa:	3b04      	subs	r3, #4
 8000cac:	0112      	lsls	r2, r2, #4
 8000cae:	b2d2      	uxtb	r2, r2
 8000cb0:	440b      	add	r3, r1
 8000cb2:	761a      	strb	r2, [r3, #24]
}
 8000cb4:	bf00      	nop
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bc80      	pop	{r7}
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	e000e100 	.word	0xe000e100
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b089      	sub	sp, #36	; 0x24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	60f8      	str	r0, [r7, #12]
 8000cd0:	60b9      	str	r1, [r7, #8]
 8000cd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	f003 0307 	and.w	r3, r3, #7
 8000cda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cdc:	69fb      	ldr	r3, [r7, #28]
 8000cde:	f1c3 0307 	rsb	r3, r3, #7
 8000ce2:	2b04      	cmp	r3, #4
 8000ce4:	bf28      	it	cs
 8000ce6:	2304      	movcs	r3, #4
 8000ce8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	3304      	adds	r3, #4
 8000cee:	2b06      	cmp	r3, #6
 8000cf0:	d902      	bls.n	8000cf8 <NVIC_EncodePriority+0x30>
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	3b03      	subs	r3, #3
 8000cf6:	e000      	b.n	8000cfa <NVIC_EncodePriority+0x32>
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8000d00:	69bb      	ldr	r3, [r7, #24]
 8000d02:	fa02 f303 	lsl.w	r3, r2, r3
 8000d06:	43da      	mvns	r2, r3
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	401a      	ands	r2, r3
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d10:	f04f 31ff 	mov.w	r1, #4294967295
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	fa01 f303 	lsl.w	r3, r1, r3
 8000d1a:	43d9      	mvns	r1, r3
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d20:	4313      	orrs	r3, r2
         );
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3724      	adds	r7, #36	; 0x24
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bc80      	pop	{r7}
 8000d2a:	4770      	bx	lr

08000d2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	3b01      	subs	r3, #1
 8000d38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d3c:	d301      	bcc.n	8000d42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e00f      	b.n	8000d62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d42:	4a0a      	ldr	r2, [pc, #40]	; (8000d6c <SysTick_Config+0x40>)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	3b01      	subs	r3, #1
 8000d48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d4a:	210f      	movs	r1, #15
 8000d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d50:	f7ff ff90 	bl	8000c74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d54:	4b05      	ldr	r3, [pc, #20]	; (8000d6c <SysTick_Config+0x40>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d5a:	4b04      	ldr	r3, [pc, #16]	; (8000d6c <SysTick_Config+0x40>)
 8000d5c:	2207      	movs	r2, #7
 8000d5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d60:	2300      	movs	r3, #0
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	e000e010 	.word	0xe000e010

08000d70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d78:	6878      	ldr	r0, [r7, #4]
 8000d7a:	f7ff ff49 	bl	8000c10 <__NVIC_SetPriorityGrouping>
}
 8000d7e:	bf00      	nop
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b086      	sub	sp, #24
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	60b9      	str	r1, [r7, #8]
 8000d90:	607a      	str	r2, [r7, #4]
 8000d92:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d94:	f7ff ff60 	bl	8000c58 <__NVIC_GetPriorityGrouping>
 8000d98:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d9a:	687a      	ldr	r2, [r7, #4]
 8000d9c:	68b9      	ldr	r1, [r7, #8]
 8000d9e:	6978      	ldr	r0, [r7, #20]
 8000da0:	f7ff ff92 	bl	8000cc8 <NVIC_EncodePriority>
 8000da4:	4602      	mov	r2, r0
 8000da6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000daa:	4611      	mov	r1, r2
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff ff61 	bl	8000c74 <__NVIC_SetPriority>
}
 8000db2:	bf00      	nop
 8000db4:	3718      	adds	r7, #24
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}

08000dba <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b082      	sub	sp, #8
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000dc2:	6878      	ldr	r0, [r7, #4]
 8000dc4:	f7ff ffb2 	bl	8000d2c <SysTick_Config>
 8000dc8:	4603      	mov	r3, r0
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
	...

08000dd4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b087      	sub	sp, #28
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dde:	2300      	movs	r3, #0
 8000de0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000de2:	e140      	b.n	8001066 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	2101      	movs	r1, #1
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	fa01 f303 	lsl.w	r3, r1, r3
 8000df0:	4013      	ands	r3, r2
 8000df2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	f000 8132 	beq.w	8001060 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f003 0303 	and.w	r3, r3, #3
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d005      	beq.n	8000e14 <HAL_GPIO_Init+0x40>
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f003 0303 	and.w	r3, r3, #3
 8000e10:	2b02      	cmp	r3, #2
 8000e12:	d130      	bne.n	8000e76 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	689b      	ldr	r3, [r3, #8]
 8000e18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	2203      	movs	r2, #3
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	43db      	mvns	r3, r3
 8000e26:	693a      	ldr	r2, [r7, #16]
 8000e28:	4013      	ands	r3, r2
 8000e2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	68da      	ldr	r2, [r3, #12]
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	693a      	ldr	r2, [r7, #16]
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	693a      	ldr	r2, [r7, #16]
 8000e42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	43db      	mvns	r3, r3
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	4013      	ands	r3, r2
 8000e58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	091b      	lsrs	r3, r3, #4
 8000e60:	f003 0201 	and.w	r2, r3, #1
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f003 0303 	and.w	r3, r3, #3
 8000e7e:	2b03      	cmp	r3, #3
 8000e80:	d017      	beq.n	8000eb2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	68db      	ldr	r3, [r3, #12]
 8000e86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	2203      	movs	r2, #3
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	43db      	mvns	r3, r3
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	4013      	ands	r3, r2
 8000e98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	689a      	ldr	r2, [r3, #8]
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	f003 0303 	and.w	r3, r3, #3
 8000eba:	2b02      	cmp	r3, #2
 8000ebc:	d123      	bne.n	8000f06 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	08da      	lsrs	r2, r3, #3
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	3208      	adds	r2, #8
 8000ec6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	f003 0307 	and.w	r3, r3, #7
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	220f      	movs	r2, #15
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	43db      	mvns	r3, r3
 8000edc:	693a      	ldr	r2, [r7, #16]
 8000ede:	4013      	ands	r3, r2
 8000ee0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	691a      	ldr	r2, [r3, #16]
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	f003 0307 	and.w	r3, r3, #7
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	08da      	lsrs	r2, r3, #3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3208      	adds	r2, #8
 8000f00:	6939      	ldr	r1, [r7, #16]
 8000f02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	2203      	movs	r2, #3
 8000f12:	fa02 f303 	lsl.w	r3, r2, r3
 8000f16:	43db      	mvns	r3, r3
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f003 0203 	and.w	r2, r3, #3
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	f000 808c 	beq.w	8001060 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000f48:	4a4e      	ldr	r2, [pc, #312]	; (8001084 <HAL_GPIO_Init+0x2b0>)
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	089b      	lsrs	r3, r3, #2
 8000f4e:	3302      	adds	r3, #2
 8000f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	f003 0303 	and.w	r3, r3, #3
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	2207      	movs	r2, #7
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	43db      	mvns	r3, r3
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f72:	d00d      	beq.n	8000f90 <HAL_GPIO_Init+0x1bc>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	4a44      	ldr	r2, [pc, #272]	; (8001088 <HAL_GPIO_Init+0x2b4>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d007      	beq.n	8000f8c <HAL_GPIO_Init+0x1b8>
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	4a43      	ldr	r2, [pc, #268]	; (800108c <HAL_GPIO_Init+0x2b8>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d101      	bne.n	8000f88 <HAL_GPIO_Init+0x1b4>
 8000f84:	2302      	movs	r3, #2
 8000f86:	e004      	b.n	8000f92 <HAL_GPIO_Init+0x1be>
 8000f88:	2307      	movs	r3, #7
 8000f8a:	e002      	b.n	8000f92 <HAL_GPIO_Init+0x1be>
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	e000      	b.n	8000f92 <HAL_GPIO_Init+0x1be>
 8000f90:	2300      	movs	r3, #0
 8000f92:	697a      	ldr	r2, [r7, #20]
 8000f94:	f002 0203 	and.w	r2, r2, #3
 8000f98:	0092      	lsls	r2, r2, #2
 8000f9a:	4093      	lsls	r3, r2
 8000f9c:	693a      	ldr	r2, [r7, #16]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fa2:	4938      	ldr	r1, [pc, #224]	; (8001084 <HAL_GPIO_Init+0x2b0>)
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	089b      	lsrs	r3, r3, #2
 8000fa8:	3302      	adds	r3, #2
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000fb0:	4b37      	ldr	r3, [pc, #220]	; (8001090 <HAL_GPIO_Init+0x2bc>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d003      	beq.n	8000fd4 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8000fcc:	693a      	ldr	r2, [r7, #16]
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000fd4:	4a2e      	ldr	r2, [pc, #184]	; (8001090 <HAL_GPIO_Init+0x2bc>)
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000fda:	4b2d      	ldr	r3, [pc, #180]	; (8001090 <HAL_GPIO_Init+0x2bc>)
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	693a      	ldr	r2, [r7, #16]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d003      	beq.n	8000ffe <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ffe:	4a24      	ldr	r2, [pc, #144]	; (8001090 <HAL_GPIO_Init+0x2bc>)
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8001004:	4b22      	ldr	r3, [pc, #136]	; (8001090 <HAL_GPIO_Init+0x2bc>)
 8001006:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800100a:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	43db      	mvns	r3, r3
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	4013      	ands	r3, r2
 8001014:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800101e:	2b00      	cmp	r3, #0
 8001020:	d003      	beq.n	800102a <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	4313      	orrs	r3, r2
 8001028:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 800102a:	4a19      	ldr	r2, [pc, #100]	; (8001090 <HAL_GPIO_Init+0x2bc>)
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8001032:	4b17      	ldr	r3, [pc, #92]	; (8001090 <HAL_GPIO_Init+0x2bc>)
 8001034:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001038:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	43db      	mvns	r3, r3
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	4013      	ands	r3, r2
 8001042:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800104c:	2b00      	cmp	r3, #0
 800104e:	d003      	beq.n	8001058 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001050:	693a      	ldr	r2, [r7, #16]
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	4313      	orrs	r3, r2
 8001056:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8001058:	4a0d      	ldr	r2, [pc, #52]	; (8001090 <HAL_GPIO_Init+0x2bc>)
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	3301      	adds	r3, #1
 8001064:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	fa22 f303 	lsr.w	r3, r2, r3
 8001070:	2b00      	cmp	r3, #0
 8001072:	f47f aeb7 	bne.w	8000de4 <HAL_GPIO_Init+0x10>
  }
}
 8001076:	bf00      	nop
 8001078:	bf00      	nop
 800107a:	371c      	adds	r7, #28
 800107c:	46bd      	mov	sp, r7
 800107e:	bc80      	pop	{r7}
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	40010000 	.word	0x40010000
 8001088:	48000400 	.word	0x48000400
 800108c:	48000800 	.word	0x48000800
 8001090:	58000800 	.word	0x58000800

08001094 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	460b      	mov	r3, r1
 800109e:	807b      	strh	r3, [r7, #2]
 80010a0:	4613      	mov	r3, r2
 80010a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010a4:	787b      	ldrb	r3, [r7, #1]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d003      	beq.n	80010b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010aa:	887a      	ldrh	r2, [r7, #2]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010b0:	e002      	b.n	80010b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010b2:	887a      	ldrh	r2, [r7, #2]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010b8:	bf00      	nop
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	bc80      	pop	{r7}
 80010c0:	4770      	bx	lr
	...

080010c4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80010c8:	4b04      	ldr	r3, [pc, #16]	; (80010dc <HAL_PWR_EnableBkUpAccess+0x18>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a03      	ldr	r2, [pc, #12]	; (80010dc <HAL_PWR_EnableBkUpAccess+0x18>)
 80010ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010d2:	6013      	str	r3, [r2, #0]
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bc80      	pop	{r7}
 80010da:	4770      	bx	lr
 80010dc:	58000400 	.word	0x58000400

080010e0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80010e4:	4b03      	ldr	r3, [pc, #12]	; (80010f4 <HAL_PWREx_GetVoltageRange+0x14>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bc80      	pop	{r7}
 80010f2:	4770      	bx	lr
 80010f4:	58000400 	.word	0x58000400

080010f8 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80010fc:	4b06      	ldr	r3, [pc, #24]	; (8001118 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001104:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001108:	d101      	bne.n	800110e <LL_PWR_IsEnabledBkUpAccess+0x16>
 800110a:	2301      	movs	r3, #1
 800110c:	e000      	b.n	8001110 <LL_PWR_IsEnabledBkUpAccess+0x18>
 800110e:	2300      	movs	r3, #0
}
 8001110:	4618      	mov	r0, r3
 8001112:	46bd      	mov	sp, r7
 8001114:	bc80      	pop	{r7}
 8001116:	4770      	bx	lr
 8001118:	58000400 	.word	0x58000400

0800111c <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001120:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800112a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800112e:	6013      	str	r3, [r2, #0]
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	bc80      	pop	{r7}
 8001136:	4770      	bx	lr

08001138 <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800113c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001146:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800114a:	6013      	str	r3, [r2, #0]
}
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	bc80      	pop	{r7}
 8001152:	4770      	bx	lr

08001154 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001158:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001162:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001166:	d101      	bne.n	800116c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001168:	2301      	movs	r3, #1
 800116a:	e000      	b.n	800116e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800116c:	2300      	movs	r3, #0
}
 800116e:	4618      	mov	r0, r3
 8001170:	46bd      	mov	sp, r7
 8001172:	bc80      	pop	{r7}
 8001174:	4770      	bx	lr

08001176 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8001176:	b480      	push	{r7}
 8001178:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800117a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001184:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001188:	6013      	str	r3, [r2, #0]
}
 800118a:	bf00      	nop
 800118c:	46bd      	mov	sp, r7
 800118e:	bc80      	pop	{r7}
 8001190:	4770      	bx	lr

08001192 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8001192:	b480      	push	{r7}
 8001194:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001196:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011a4:	6013      	str	r3, [r2, #0]
}
 80011a6:	bf00      	nop
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bc80      	pop	{r7}
 80011ac:	4770      	bx	lr

080011ae <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80011ae:	b480      	push	{r7}
 80011b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80011b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80011c0:	d101      	bne.n	80011c6 <LL_RCC_HSE_IsReady+0x18>
 80011c2:	2301      	movs	r3, #1
 80011c4:	e000      	b.n	80011c8 <LL_RCC_HSE_IsReady+0x1a>
 80011c6:	2300      	movs	r3, #0
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bc80      	pop	{r7}
 80011ce:	4770      	bx	lr

080011d0 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80011d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011e2:	6013      	str	r3, [r2, #0]
}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bc80      	pop	{r7}
 80011ea:	4770      	bx	lr

080011ec <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80011f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80011fe:	6013      	str	r3, [r2, #0]
}
 8001200:	bf00      	nop
 8001202:	46bd      	mov	sp, r7
 8001204:	bc80      	pop	{r7}
 8001206:	4770      	bx	lr

08001208 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800120c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001216:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800121a:	d101      	bne.n	8001220 <LL_RCC_HSI_IsReady+0x18>
 800121c:	2301      	movs	r3, #1
 800121e:	e000      	b.n	8001222 <LL_RCC_HSI_IsReady+0x1a>
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	46bd      	mov	sp, r7
 8001226:	bc80      	pop	{r7}
 8001228:	4770      	bx	lr

0800122a <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800122a:	b480      	push	{r7}
 800122c:	b083      	sub	sp, #12
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001232:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	061b      	lsls	r3, r3, #24
 8001240:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001244:	4313      	orrs	r3, r2
 8001246:	604b      	str	r3, [r1, #4]
}
 8001248:	bf00      	nop
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	bc80      	pop	{r7}
 8001250:	4770      	bx	lr

08001252 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001252:	b480      	push	{r7}
 8001254:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001256:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800125a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	2b02      	cmp	r3, #2
 8001264:	d101      	bne.n	800126a <LL_RCC_LSE_IsReady+0x18>
 8001266:	2301      	movs	r3, #1
 8001268:	e000      	b.n	800126c <LL_RCC_LSE_IsReady+0x1a>
 800126a:	2300      	movs	r3, #0
}
 800126c:	4618      	mov	r0, r3
 800126e:	46bd      	mov	sp, r7
 8001270:	bc80      	pop	{r7}
 8001272:	4770      	bx	lr

08001274 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8001278:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800127c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001280:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001284:	f043 0301 	orr.w	r3, r3, #1
 8001288:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800128c:	bf00      	nop
 800128e:	46bd      	mov	sp, r7
 8001290:	bc80      	pop	{r7}
 8001292:	4770      	bx	lr

08001294 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8001298:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800129c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012a4:	f023 0301 	bic.w	r3, r3, #1
 80012a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bc80      	pop	{r7}
 80012b2:	4770      	bx	lr

080012b4 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80012b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012c0:	f003 0302 	and.w	r3, r3, #2
 80012c4:	2b02      	cmp	r3, #2
 80012c6:	d101      	bne.n	80012cc <LL_RCC_LSI_IsReady+0x18>
 80012c8:	2301      	movs	r3, #1
 80012ca:	e000      	b.n	80012ce <LL_RCC_LSI_IsReady+0x1a>
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bc80      	pop	{r7}
 80012d4:	4770      	bx	lr

080012d6 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80012d6:	b480      	push	{r7}
 80012d8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80012da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	6013      	str	r3, [r2, #0]
}
 80012ea:	bf00      	nop
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bc80      	pop	{r7}
 80012f0:	4770      	bx	lr

080012f2 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80012f2:	b480      	push	{r7}
 80012f4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80012f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001300:	f023 0301 	bic.w	r3, r3, #1
 8001304:	6013      	str	r3, [r2, #0]
}
 8001306:	bf00      	nop
 8001308:	46bd      	mov	sp, r7
 800130a:	bc80      	pop	{r7}
 800130c:	4770      	bx	lr

0800130e <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 800130e:	b480      	push	{r7}
 8001310:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001312:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f003 0302 	and.w	r3, r3, #2
 800131c:	2b02      	cmp	r3, #2
 800131e:	d101      	bne.n	8001324 <LL_RCC_MSI_IsReady+0x16>
 8001320:	2301      	movs	r3, #1
 8001322:	e000      	b.n	8001326 <LL_RCC_MSI_IsReady+0x18>
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	46bd      	mov	sp, r7
 800132a:	bc80      	pop	{r7}
 800132c:	4770      	bx	lr

0800132e <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 800132e:	b480      	push	{r7}
 8001330:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8001332:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 0308 	and.w	r3, r3, #8
 800133c:	2b08      	cmp	r3, #8
 800133e:	d101      	bne.n	8001344 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8001340:	2301      	movs	r3, #1
 8001342:	e000      	b.n	8001346 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8001344:	2300      	movs	r3, #0
}
 8001346:	4618      	mov	r0, r3
 8001348:	46bd      	mov	sp, r7
 800134a:	bc80      	pop	{r7}
 800134c:	4770      	bx	lr

0800134e <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800134e:	b480      	push	{r7}
 8001350:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8001352:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800135c:	4618      	mov	r0, r3
 800135e:	46bd      	mov	sp, r7
 8001360:	bc80      	pop	{r7}
 8001362:	4770      	bx	lr

08001364 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8001368:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800136c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001370:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8001374:	4618      	mov	r0, r3
 8001376:	46bd      	mov	sp, r7
 8001378:	bc80      	pop	{r7}
 800137a:	4770      	bx	lr

0800137c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001384:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	021b      	lsls	r3, r3, #8
 8001392:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001396:	4313      	orrs	r3, r2
 8001398:	604b      	str	r3, [r1, #4]
}
 800139a:	bf00      	nop
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	bc80      	pop	{r7}
 80013a2:	4770      	bx	lr

080013a4 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80013ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	f023 0203 	bic.w	r2, r3, #3
 80013b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4313      	orrs	r3, r2
 80013be:	608b      	str	r3, [r1, #8]
}
 80013c0:	bf00      	nop
 80013c2:	370c      	adds	r7, #12
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bc80      	pop	{r7}
 80013c8:	4770      	bx	lr

080013ca <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80013ca:	b480      	push	{r7}
 80013cc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80013ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	f003 030c 	and.w	r3, r3, #12
}
 80013d8:	4618      	mov	r0, r3
 80013da:	46bd      	mov	sp, r7
 80013dc:	bc80      	pop	{r7}
 80013de:	4770      	bx	lr

080013e0 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80013e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	608b      	str	r3, [r1, #8]
}
 80013fc:	bf00      	nop
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	bc80      	pop	{r7}
 8001404:	4770      	bx	lr

08001406 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001406:	b480      	push	{r7}
 8001408:	b083      	sub	sp, #12
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800140e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001412:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001416:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800141a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4313      	orrs	r3, r2
 8001422:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001426:	bf00      	nop
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	bc80      	pop	{r7}
 800142e:	4770      	bx	lr

08001430 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001438:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800143c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001440:	f023 020f 	bic.w	r2, r3, #15
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	091b      	lsrs	r3, r3, #4
 8001448:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800144c:	4313      	orrs	r3, r2
 800144e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001452:	bf00      	nop
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	bc80      	pop	{r7}
 800145a:	4770      	bx	lr

0800145c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001464:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800146e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4313      	orrs	r3, r2
 8001476:	608b      	str	r3, [r1, #8]
}
 8001478:	bf00      	nop
 800147a:	370c      	adds	r7, #12
 800147c:	46bd      	mov	sp, r7
 800147e:	bc80      	pop	{r7}
 8001480:	4770      	bx	lr

08001482 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001482:	b480      	push	{r7}
 8001484:	b083      	sub	sp, #12
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800148a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001494:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	4313      	orrs	r3, r2
 800149c:	608b      	str	r3, [r1, #8]
}
 800149e:	bf00      	nop
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bc80      	pop	{r7}
 80014a6:	4770      	bx	lr

080014a8 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80014ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bc80      	pop	{r7}
 80014bc:	4770      	bx	lr

080014be <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 80014be:	b480      	push	{r7}
 80014c0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80014c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014c6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80014ca:	011b      	lsls	r3, r3, #4
 80014cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bc80      	pop	{r7}
 80014d6:	4770      	bx	lr

080014d8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80014dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bc80      	pop	{r7}
 80014ec:	4770      	bx	lr

080014ee <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80014ee:	b480      	push	{r7}
 80014f0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80014f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	46bd      	mov	sp, r7
 8001500:	bc80      	pop	{r7}
 8001502:	4770      	bx	lr

08001504 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001508:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001512:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001516:	6013      	str	r3, [r2, #0]
}
 8001518:	bf00      	nop
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr

08001520 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001524:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800152e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001532:	6013      	str	r3, [r2, #0]
}
 8001534:	bf00      	nop
 8001536:	46bd      	mov	sp, r7
 8001538:	bc80      	pop	{r7}
 800153a:	4770      	bx	lr

0800153c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001540:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800154a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800154e:	d101      	bne.n	8001554 <LL_RCC_PLL_IsReady+0x18>
 8001550:	2301      	movs	r3, #1
 8001552:	e000      	b.n	8001556 <LL_RCC_PLL_IsReady+0x1a>
 8001554:	2300      	movs	r3, #0
}
 8001556:	4618      	mov	r0, r3
 8001558:	46bd      	mov	sp, r7
 800155a:	bc80      	pop	{r7}
 800155c:	4770      	bx	lr

0800155e <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800155e:	b480      	push	{r7}
 8001560:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001562:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	0a1b      	lsrs	r3, r3, #8
 800156a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800156e:	4618      	mov	r0, r3
 8001570:	46bd      	mov	sp, r7
 8001572:	bc80      	pop	{r7}
 8001574:	4770      	bx	lr

08001576 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001576:	b480      	push	{r7}
 8001578:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800157a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001584:	4618      	mov	r0, r3
 8001586:	46bd      	mov	sp, r7
 8001588:	bc80      	pop	{r7}
 800158a:	4770      	bx	lr

0800158c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001590:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001594:	68db      	ldr	r3, [r3, #12]
 8001596:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800159a:	4618      	mov	r0, r3
 800159c:	46bd      	mov	sp, r7
 800159e:	bc80      	pop	{r7}
 80015a0:	4770      	bx	lr

080015a2 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80015a2:	b480      	push	{r7}
 80015a4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80015a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	f003 0303 	and.w	r3, r3, #3
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bc80      	pop	{r7}
 80015b6:	4770      	bx	lr

080015b8 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80015bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015ca:	d101      	bne.n	80015d0 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80015cc:	2301      	movs	r3, #1
 80015ce:	e000      	b.n	80015d2 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bc80      	pop	{r7}
 80015d8:	4770      	bx	lr

080015da <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80015da:	b480      	push	{r7}
 80015dc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80015de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015e2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80015e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80015ee:	d101      	bne.n	80015f4 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80015f0:	2301      	movs	r3, #1
 80015f2:	e000      	b.n	80015f6 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bc80      	pop	{r7}
 80015fc:	4770      	bx	lr

080015fe <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80015fe:	b480      	push	{r7}
 8001600:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001602:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001606:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800160a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800160e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001612:	d101      	bne.n	8001618 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001614:	2301      	movs	r3, #1
 8001616:	e000      	b.n	800161a <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001618:	2300      	movs	r3, #0
}
 800161a:	4618      	mov	r0, r3
 800161c:	46bd      	mov	sp, r7
 800161e:	bc80      	pop	{r7}
 8001620:	4770      	bx	lr

08001622 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001622:	b480      	push	{r7}
 8001624:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001626:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001630:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001634:	d101      	bne.n	800163a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001636:	2301      	movs	r3, #1
 8001638:	e000      	b.n	800163c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800163a:	2300      	movs	r3, #0
}
 800163c:	4618      	mov	r0, r3
 800163e:	46bd      	mov	sp, r7
 8001640:	bc80      	pop	{r7}
 8001642:	4770      	bx	lr

08001644 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001648:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001652:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001656:	d101      	bne.n	800165c <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001658:	2301      	movs	r3, #1
 800165a:	e000      	b.n	800165e <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800165c:	2300      	movs	r3, #0
}
 800165e:	4618      	mov	r0, r3
 8001660:	46bd      	mov	sp, r7
 8001662:	bc80      	pop	{r7}
 8001664:	4770      	bx	lr
	...

08001668 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b088      	sub	sp, #32
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d101      	bne.n	800167a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e36f      	b.n	8001d5a <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800167a:	f7ff fea6 	bl	80013ca <LL_RCC_GetSysClkSource>
 800167e:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001680:	f7ff ff8f 	bl	80015a2 <LL_RCC_PLL_GetMainSource>
 8001684:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0320 	and.w	r3, r3, #32
 800168e:	2b00      	cmp	r3, #0
 8001690:	f000 80c4 	beq.w	800181c <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d005      	beq.n	80016a6 <HAL_RCC_OscConfig+0x3e>
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	2b0c      	cmp	r3, #12
 800169e:	d176      	bne.n	800178e <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d173      	bne.n	800178e <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6a1b      	ldr	r3, [r3, #32]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d101      	bne.n	80016b2 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e353      	b.n	8001d5a <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0308 	and.w	r3, r3, #8
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d005      	beq.n	80016d0 <HAL_RCC_OscConfig+0x68>
 80016c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016ce:	e006      	b.n	80016de <HAL_RCC_OscConfig+0x76>
 80016d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016d8:	091b      	lsrs	r3, r3, #4
 80016da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016de:	4293      	cmp	r3, r2
 80016e0:	d222      	bcs.n	8001728 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e6:	4618      	mov	r0, r3
 80016e8:	f000 fd5a 	bl	80021a0 <RCC_SetFlashLatencyFromMSIRange>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e331      	b.n	8001d5a <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001700:	f043 0308 	orr.w	r3, r3, #8
 8001704:	6013      	str	r3, [r2, #0]
 8001706:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001714:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001718:	4313      	orrs	r3, r2
 800171a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff fe2b 	bl	800137c <LL_RCC_MSI_SetCalibTrimming>
 8001726:	e021      	b.n	800176c <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001728:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001732:	f043 0308 	orr.w	r3, r3, #8
 8001736:	6013      	str	r3, [r2, #0]
 8001738:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001746:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800174a:	4313      	orrs	r3, r2
 800174c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001752:	4618      	mov	r0, r3
 8001754:	f7ff fe12 	bl	800137c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800175c:	4618      	mov	r0, r3
 800175e:	f000 fd1f 	bl	80021a0 <RCC_SetFlashLatencyFromMSIRange>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e2f6      	b.n	8001d5a <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800176c:	f000 fce0 	bl	8002130 <HAL_RCC_GetHCLKFreq>
 8001770:	4603      	mov	r3, r0
 8001772:	4aa7      	ldr	r2, [pc, #668]	; (8001a10 <HAL_RCC_OscConfig+0x3a8>)
 8001774:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8001776:	4ba7      	ldr	r3, [pc, #668]	; (8001a14 <HAL_RCC_OscConfig+0x3ac>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff f9ce 	bl	8000b1c <HAL_InitTick>
 8001780:	4603      	mov	r3, r0
 8001782:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8001784:	7cfb      	ldrb	r3, [r7, #19]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d047      	beq.n	800181a <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 800178a:	7cfb      	ldrb	r3, [r7, #19]
 800178c:	e2e5      	b.n	8001d5a <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a1b      	ldr	r3, [r3, #32]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d02c      	beq.n	80017f0 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001796:	f7ff fd9e 	bl	80012d6 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800179a:	f7ff fa0b 	bl	8000bb4 <HAL_GetTick>
 800179e:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80017a0:	e008      	b.n	80017b4 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017a2:	f7ff fa07 	bl	8000bb4 <HAL_GetTick>
 80017a6:	4602      	mov	r2, r0
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d901      	bls.n	80017b4 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 80017b0:	2303      	movs	r3, #3
 80017b2:	e2d2      	b.n	8001d5a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 80017b4:	f7ff fdab 	bl	800130e <LL_RCC_MSI_IsReady>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d0f1      	beq.n	80017a2 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017c8:	f043 0308 	orr.w	r3, r3, #8
 80017cc:	6013      	str	r3, [r2, #0]
 80017ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017e0:	4313      	orrs	r3, r2
 80017e2:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7ff fdc7 	bl	800137c <LL_RCC_MSI_SetCalibTrimming>
 80017ee:	e015      	b.n	800181c <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80017f0:	f7ff fd7f 	bl	80012f2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017f4:	f7ff f9de 	bl	8000bb4 <HAL_GetTick>
 80017f8:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80017fa:	e008      	b.n	800180e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017fc:	f7ff f9da 	bl	8000bb4 <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b02      	cmp	r3, #2
 8001808:	d901      	bls.n	800180e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e2a5      	b.n	8001d5a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 800180e:	f7ff fd7e 	bl	800130e <LL_RCC_MSI_IsReady>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d1f1      	bne.n	80017fc <HAL_RCC_OscConfig+0x194>
 8001818:	e000      	b.n	800181c <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800181a:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0301 	and.w	r3, r3, #1
 8001824:	2b00      	cmp	r3, #0
 8001826:	d058      	beq.n	80018da <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	2b08      	cmp	r3, #8
 800182c:	d005      	beq.n	800183a <HAL_RCC_OscConfig+0x1d2>
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	2b0c      	cmp	r3, #12
 8001832:	d108      	bne.n	8001846 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	2b03      	cmp	r3, #3
 8001838:	d105      	bne.n	8001846 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d14b      	bne.n	80018da <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e289      	b.n	8001d5a <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8001846:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001858:	4313      	orrs	r3, r2
 800185a:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001864:	d102      	bne.n	800186c <HAL_RCC_OscConfig+0x204>
 8001866:	f7ff fc86 	bl	8001176 <LL_RCC_HSE_Enable>
 800186a:	e00d      	b.n	8001888 <HAL_RCC_OscConfig+0x220>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8001874:	d104      	bne.n	8001880 <HAL_RCC_OscConfig+0x218>
 8001876:	f7ff fc51 	bl	800111c <LL_RCC_HSE_EnableTcxo>
 800187a:	f7ff fc7c 	bl	8001176 <LL_RCC_HSE_Enable>
 800187e:	e003      	b.n	8001888 <HAL_RCC_OscConfig+0x220>
 8001880:	f7ff fc87 	bl	8001192 <LL_RCC_HSE_Disable>
 8001884:	f7ff fc58 	bl	8001138 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d012      	beq.n	80018b6 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001890:	f7ff f990 	bl	8000bb4 <HAL_GetTick>
 8001894:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001896:	e008      	b.n	80018aa <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001898:	f7ff f98c 	bl	8000bb4 <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b64      	cmp	r3, #100	; 0x64
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e257      	b.n	8001d5a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 80018aa:	f7ff fc80 	bl	80011ae <LL_RCC_HSE_IsReady>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d0f1      	beq.n	8001898 <HAL_RCC_OscConfig+0x230>
 80018b4:	e011      	b.n	80018da <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b6:	f7ff f97d 	bl	8000bb4 <HAL_GetTick>
 80018ba:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80018bc:	e008      	b.n	80018d0 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018be:	f7ff f979 	bl	8000bb4 <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	2b64      	cmp	r3, #100	; 0x64
 80018ca:	d901      	bls.n	80018d0 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80018cc:	2303      	movs	r3, #3
 80018ce:	e244      	b.n	8001d5a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 80018d0:	f7ff fc6d 	bl	80011ae <LL_RCC_HSE_IsReady>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d1f1      	bne.n	80018be <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d046      	beq.n	8001974 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	2b04      	cmp	r3, #4
 80018ea:	d005      	beq.n	80018f8 <HAL_RCC_OscConfig+0x290>
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	2b0c      	cmp	r3, #12
 80018f0:	d10e      	bne.n	8001910 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d10b      	bne.n	8001910 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	691b      	ldr	r3, [r3, #16]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d101      	bne.n	8001904 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e22a      	b.n	8001d5a <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	695b      	ldr	r3, [r3, #20]
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff fc8e 	bl	800122a <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800190e:	e031      	b.n	8001974 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	691b      	ldr	r3, [r3, #16]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d019      	beq.n	800194c <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001918:	f7ff fc5a 	bl	80011d0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800191c:	f7ff f94a 	bl	8000bb4 <HAL_GetTick>
 8001920:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001922:	e008      	b.n	8001936 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001924:	f7ff f946 	bl	8000bb4 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b02      	cmp	r3, #2
 8001930:	d901      	bls.n	8001936 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e211      	b.n	8001d5a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001936:	f7ff fc67 	bl	8001208 <LL_RCC_HSI_IsReady>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d0f1      	beq.n	8001924 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	695b      	ldr	r3, [r3, #20]
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff fc70 	bl	800122a <LL_RCC_HSI_SetCalibTrimming>
 800194a:	e013      	b.n	8001974 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800194c:	f7ff fc4e 	bl	80011ec <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001950:	f7ff f930 	bl	8000bb4 <HAL_GetTick>
 8001954:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001956:	e008      	b.n	800196a <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001958:	f7ff f92c 	bl	8000bb4 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b02      	cmp	r3, #2
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e1f7      	b.n	8001d5a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 800196a:	f7ff fc4d 	bl	8001208 <LL_RCC_HSI_IsReady>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d1f1      	bne.n	8001958 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0308 	and.w	r3, r3, #8
 800197c:	2b00      	cmp	r3, #0
 800197e:	d06e      	beq.n	8001a5e <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d056      	beq.n	8001a36 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8001988:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800198c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001990:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	69da      	ldr	r2, [r3, #28]
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	f003 0310 	and.w	r3, r3, #16
 800199c:	429a      	cmp	r2, r3
 800199e:	d031      	beq.n	8001a04 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d006      	beq.n	80019b8 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d101      	bne.n	80019b8 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e1d0      	b.n	8001d5a <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d013      	beq.n	80019ea <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 80019c2:	f7ff fc67 	bl	8001294 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80019c6:	f7ff f8f5 	bl	8000bb4 <HAL_GetTick>
 80019ca:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80019cc:	e008      	b.n	80019e0 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019ce:	f7ff f8f1 	bl	8000bb4 <HAL_GetTick>
 80019d2:	4602      	mov	r2, r0
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	2b11      	cmp	r3, #17
 80019da:	d901      	bls.n	80019e0 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 80019dc:	2303      	movs	r3, #3
 80019de:	e1bc      	b.n	8001d5a <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 80019e0:	f7ff fc68 	bl	80012b4 <LL_RCC_LSI_IsReady>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d1f1      	bne.n	80019ce <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80019ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019f2:	f023 0210 	bic.w	r2, r3, #16
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	69db      	ldr	r3, [r3, #28]
 80019fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019fe:	4313      	orrs	r3, r2
 8001a00:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a04:	f7ff fc36 	bl	8001274 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a08:	f7ff f8d4 	bl	8000bb4 <HAL_GetTick>
 8001a0c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8001a0e:	e00c      	b.n	8001a2a <HAL_RCC_OscConfig+0x3c2>
 8001a10:	2000000c 	.word	0x2000000c
 8001a14:	20000010 	.word	0x20000010
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a18:	f7ff f8cc 	bl	8000bb4 <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	2b11      	cmp	r3, #17
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e197      	b.n	8001d5a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8001a2a:	f7ff fc43 	bl	80012b4 <LL_RCC_LSI_IsReady>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d0f1      	beq.n	8001a18 <HAL_RCC_OscConfig+0x3b0>
 8001a34:	e013      	b.n	8001a5e <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a36:	f7ff fc2d 	bl	8001294 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a3a:	f7ff f8bb 	bl	8000bb4 <HAL_GetTick>
 8001a3e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8001a40:	e008      	b.n	8001a54 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a42:	f7ff f8b7 	bl	8000bb4 <HAL_GetTick>
 8001a46:	4602      	mov	r2, r0
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	2b11      	cmp	r3, #17
 8001a4e:	d901      	bls.n	8001a54 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	e182      	b.n	8001d5a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8001a54:	f7ff fc2e 	bl	80012b4 <LL_RCC_LSI_IsReady>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d1f1      	bne.n	8001a42 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0304 	and.w	r3, r3, #4
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	f000 80d8 	beq.w	8001c1c <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001a6c:	f7ff fb44 	bl	80010f8 <LL_PWR_IsEnabledBkUpAccess>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d113      	bne.n	8001a9e <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001a76:	f7ff fb25 	bl	80010c4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a7a:	f7ff f89b 	bl	8000bb4 <HAL_GetTick>
 8001a7e:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001a80:	e008      	b.n	8001a94 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a82:	f7ff f897 	bl	8000bb4 <HAL_GetTick>
 8001a86:	4602      	mov	r2, r0
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d901      	bls.n	8001a94 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	e162      	b.n	8001d5a <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001a94:	f7ff fb30 	bl	80010f8 <LL_PWR_IsEnabledBkUpAccess>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d0f1      	beq.n	8001a82 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	68db      	ldr	r3, [r3, #12]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d07b      	beq.n	8001b9e <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	2b85      	cmp	r3, #133	; 0x85
 8001aac:	d003      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	2b05      	cmp	r3, #5
 8001ab4:	d109      	bne.n	8001aca <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001ab6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001abe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ac2:	f043 0304 	orr.w	r3, r3, #4
 8001ac6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aca:	f7ff f873 	bl	8000bb4 <HAL_GetTick>
 8001ace:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001ad0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ad8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001adc:	f043 0301 	orr.w	r3, r3, #1
 8001ae0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8001ae4:	e00a      	b.n	8001afc <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ae6:	f7ff f865 	bl	8000bb4 <HAL_GetTick>
 8001aea:	4602      	mov	r2, r0
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d901      	bls.n	8001afc <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e12e      	b.n	8001d5a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8001afc:	f7ff fba9 	bl	8001252 <LL_RCC_LSE_IsReady>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d0ef      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	2b81      	cmp	r3, #129	; 0x81
 8001b0c:	d003      	beq.n	8001b16 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	2b85      	cmp	r3, #133	; 0x85
 8001b14:	d121      	bne.n	8001b5a <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b16:	f7ff f84d 	bl	8000bb4 <HAL_GetTick>
 8001b1a:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001b1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001b30:	e00a      	b.n	8001b48 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b32:	f7ff f83f 	bl	8000bb4 <HAL_GetTick>
 8001b36:	4602      	mov	r2, r0
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d901      	bls.n	8001b48 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e108      	b.n	8001d5a <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001b48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d0ec      	beq.n	8001b32 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001b58:	e060      	b.n	8001c1c <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b5a:	f7ff f82b 	bl	8000bb4 <HAL_GetTick>
 8001b5e:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001b60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001b74:	e00a      	b.n	8001b8c <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b76:	f7ff f81d 	bl	8000bb4 <HAL_GetTick>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e0e6      	b.n	8001d5a <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001b8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d1ec      	bne.n	8001b76 <HAL_RCC_OscConfig+0x50e>
 8001b9c:	e03e      	b.n	8001c1c <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b9e:	f7ff f809 	bl	8000bb4 <HAL_GetTick>
 8001ba2:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001ba4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bb0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001bb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001bb8:	e00a      	b.n	8001bd0 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bba:	f7fe fffb 	bl	8000bb4 <HAL_GetTick>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d901      	bls.n	8001bd0 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e0c4      	b.n	8001d5a <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001bd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d1ec      	bne.n	8001bba <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001be0:	f7fe ffe8 	bl	8000bb4 <HAL_GetTick>
 8001be4:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001be6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bf2:	f023 0301 	bic.w	r3, r3, #1
 8001bf6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8001bfa:	e00a      	b.n	8001c12 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bfc:	f7fe ffda 	bl	8000bb4 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e0a3      	b.n	8001d5a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8001c12:	f7ff fb1e 	bl	8001252 <LL_RCC_LSE_IsReady>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d1ef      	bne.n	8001bfc <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	f000 8099 	beq.w	8001d58 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	2b0c      	cmp	r3, #12
 8001c2a:	d06c      	beq.n	8001d06 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d14b      	bne.n	8001ccc <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c34:	f7ff fc74 	bl	8001520 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c38:	f7fe ffbc 	bl	8000bb4 <HAL_GetTick>
 8001c3c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8001c3e:	e008      	b.n	8001c52 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c40:	f7fe ffb8 	bl	8000bb4 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b0a      	cmp	r3, #10
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e083      	b.n	8001d5a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8001c52:	f7ff fc73 	bl	800153c <LL_RCC_PLL_IsReady>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d1f1      	bne.n	8001c40 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c60:	68da      	ldr	r2, [r3, #12]
 8001c62:	4b40      	ldr	r3, [pc, #256]	; (8001d64 <HAL_RCC_OscConfig+0x6fc>)
 8001c64:	4013      	ands	r3, r2
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c6e:	4311      	orrs	r1, r2
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c74:	0212      	lsls	r2, r2, #8
 8001c76:	4311      	orrs	r1, r2
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001c7c:	4311      	orrs	r1, r2
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c82:	4311      	orrs	r1, r2
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001c88:	430a      	orrs	r2, r1
 8001c8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c92:	f7ff fc37 	bl	8001504 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ca4:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca6:	f7fe ff85 	bl	8000bb4 <HAL_GetTick>
 8001caa:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8001cac:	e008      	b.n	8001cc0 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cae:	f7fe ff81 	bl	8000bb4 <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	2b0a      	cmp	r3, #10
 8001cba:	d901      	bls.n	8001cc0 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	e04c      	b.n	8001d5a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8001cc0:	f7ff fc3c 	bl	800153c <LL_RCC_PLL_IsReady>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d0f1      	beq.n	8001cae <HAL_RCC_OscConfig+0x646>
 8001cca:	e045      	b.n	8001d58 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ccc:	f7ff fc28 	bl	8001520 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd0:	f7fe ff70 	bl	8000bb4 <HAL_GetTick>
 8001cd4:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8001cd6:	e008      	b.n	8001cea <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cd8:	f7fe ff6c 	bl	8000bb4 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b0a      	cmp	r3, #10
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e037      	b.n	8001d5a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8001cea:	f7ff fc27 	bl	800153c <LL_RCC_PLL_IsReady>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d1f1      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8001cf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cf8:	68da      	ldr	r2, [r3, #12]
 8001cfa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cfe:	4b1a      	ldr	r3, [pc, #104]	; (8001d68 <HAL_RCC_OscConfig+0x700>)
 8001d00:	4013      	ands	r3, r2
 8001d02:	60cb      	str	r3, [r1, #12]
 8001d04:	e028      	b.n	8001d58 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d101      	bne.n	8001d12 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e023      	b.n	8001d5a <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	f003 0203 	and.w	r2, r3, #3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d115      	bne.n	8001d54 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d10e      	bne.n	8001d54 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d40:	021b      	lsls	r3, r3, #8
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d106      	bne.n	8001d54 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d001      	beq.n	8001d58 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e000      	b.n	8001d5a <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3720      	adds	r7, #32
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	11c1808c 	.word	0x11c1808c
 8001d68:	eefefffc 	.word	0xeefefffc

08001d6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d101      	bne.n	8001d80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e12c      	b.n	8001fda <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d80:	4b98      	ldr	r3, [pc, #608]	; (8001fe4 <HAL_RCC_ClockConfig+0x278>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0307 	and.w	r3, r3, #7
 8001d88:	683a      	ldr	r2, [r7, #0]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d91b      	bls.n	8001dc6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d8e:	4b95      	ldr	r3, [pc, #596]	; (8001fe4 <HAL_RCC_ClockConfig+0x278>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f023 0207 	bic.w	r2, r3, #7
 8001d96:	4993      	ldr	r1, [pc, #588]	; (8001fe4 <HAL_RCC_ClockConfig+0x278>)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d9e:	f7fe ff09 	bl	8000bb4 <HAL_GetTick>
 8001da2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001da4:	e008      	b.n	8001db8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001da6:	f7fe ff05 	bl	8000bb4 <HAL_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d901      	bls.n	8001db8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e110      	b.n	8001fda <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001db8:	4b8a      	ldr	r3, [pc, #552]	; (8001fe4 <HAL_RCC_ClockConfig+0x278>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0307 	and.w	r3, r3, #7
 8001dc0:	683a      	ldr	r2, [r7, #0]
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d1ef      	bne.n	8001da6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d016      	beq.n	8001e00 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7ff fb02 	bl	80013e0 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001ddc:	f7fe feea 	bl	8000bb4 <HAL_GetTick>
 8001de0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001de2:	e008      	b.n	8001df6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001de4:	f7fe fee6 	bl	8000bb4 <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e0f1      	b.n	8001fda <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001df6:	f7ff fbdf 	bl	80015b8 <LL_RCC_IsActiveFlag_HPRE>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d0f1      	beq.n	8001de4 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0320 	and.w	r3, r3, #32
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d016      	beq.n	8001e3a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	695b      	ldr	r3, [r3, #20]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff faf8 	bl	8001406 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001e16:	f7fe fecd 	bl	8000bb4 <HAL_GetTick>
 8001e1a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001e1c:	e008      	b.n	8001e30 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001e1e:	f7fe fec9 	bl	8000bb4 <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d901      	bls.n	8001e30 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e0d4      	b.n	8001fda <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001e30:	f7ff fbd3 	bl	80015da <LL_RCC_IsActiveFlag_C2HPRE>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d0f1      	beq.n	8001e1e <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d016      	beq.n	8001e74 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	699b      	ldr	r3, [r3, #24]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7ff faf0 	bl	8001430 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001e50:	f7fe feb0 	bl	8000bb4 <HAL_GetTick>
 8001e54:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001e56:	e008      	b.n	8001e6a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001e58:	f7fe feac 	bl	8000bb4 <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e0b7      	b.n	8001fda <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001e6a:	f7ff fbc8 	bl	80015fe <LL_RCC_IsActiveFlag_SHDHPRE>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d0f1      	beq.n	8001e58 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0304 	and.w	r3, r3, #4
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d016      	beq.n	8001eae <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff fae9 	bl	800145c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001e8a:	f7fe fe93 	bl	8000bb4 <HAL_GetTick>
 8001e8e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001e90:	e008      	b.n	8001ea4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001e92:	f7fe fe8f 	bl	8000bb4 <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d901      	bls.n	8001ea4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e09a      	b.n	8001fda <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001ea4:	f7ff fbbd 	bl	8001622 <LL_RCC_IsActiveFlag_PPRE1>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d0f1      	beq.n	8001e92 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0308 	and.w	r3, r3, #8
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d017      	beq.n	8001eea <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	00db      	lsls	r3, r3, #3
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff fade 	bl	8001482 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001ec6:	f7fe fe75 	bl	8000bb4 <HAL_GetTick>
 8001eca:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001ecc:	e008      	b.n	8001ee0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001ece:	f7fe fe71 	bl	8000bb4 <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d901      	bls.n	8001ee0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e07c      	b.n	8001fda <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001ee0:	f7ff fbb0 	bl	8001644 <LL_RCC_IsActiveFlag_PPRE2>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d0f1      	beq.n	8001ece <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d043      	beq.n	8001f7e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d106      	bne.n	8001f0c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8001efe:	f7ff f956 	bl	80011ae <LL_RCC_HSE_IsReady>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d11e      	bne.n	8001f46 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e066      	b.n	8001fda <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	2b03      	cmp	r3, #3
 8001f12:	d106      	bne.n	8001f22 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8001f14:	f7ff fb12 	bl	800153c <LL_RCC_PLL_IsReady>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d113      	bne.n	8001f46 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e05b      	b.n	8001fda <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d106      	bne.n	8001f38 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8001f2a:	f7ff f9f0 	bl	800130e <LL_RCC_MSI_IsReady>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d108      	bne.n	8001f46 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e050      	b.n	8001fda <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8001f38:	f7ff f966 	bl	8001208 <LL_RCC_HSI_IsReady>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d101      	bne.n	8001f46 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e049      	b.n	8001fda <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7ff fa2a 	bl	80013a4 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f50:	f7fe fe30 	bl	8000bb4 <HAL_GetTick>
 8001f54:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f56:	e00a      	b.n	8001f6e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f58:	f7fe fe2c 	bl	8000bb4 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e035      	b.n	8001fda <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f6e:	f7ff fa2c 	bl	80013ca <LL_RCC_GetSysClkSource>
 8001f72:	4602      	mov	r2, r0
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d1ec      	bne.n	8001f58 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f7e:	4b19      	ldr	r3, [pc, #100]	; (8001fe4 <HAL_RCC_ClockConfig+0x278>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0307 	and.w	r3, r3, #7
 8001f86:	683a      	ldr	r2, [r7, #0]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d21b      	bcs.n	8001fc4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f8c:	4b15      	ldr	r3, [pc, #84]	; (8001fe4 <HAL_RCC_ClockConfig+0x278>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f023 0207 	bic.w	r2, r3, #7
 8001f94:	4913      	ldr	r1, [pc, #76]	; (8001fe4 <HAL_RCC_ClockConfig+0x278>)
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f9c:	f7fe fe0a 	bl	8000bb4 <HAL_GetTick>
 8001fa0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fa2:	e008      	b.n	8001fb6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001fa4:	f7fe fe06 	bl	8000bb4 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e011      	b.n	8001fda <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fb6:	4b0b      	ldr	r3, [pc, #44]	; (8001fe4 <HAL_RCC_ClockConfig+0x278>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0307 	and.w	r3, r3, #7
 8001fbe:	683a      	ldr	r2, [r7, #0]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d1ef      	bne.n	8001fa4 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001fc4:	f000 f8b4 	bl	8002130 <HAL_RCC_GetHCLKFreq>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	4a07      	ldr	r2, [pc, #28]	; (8001fe8 <HAL_RCC_ClockConfig+0x27c>)
 8001fcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8001fce:	4b07      	ldr	r3, [pc, #28]	; (8001fec <HAL_RCC_ClockConfig+0x280>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7fe fda2 	bl	8000b1c <HAL_InitTick>
 8001fd8:	4603      	mov	r3, r0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3710      	adds	r7, #16
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	58004000 	.word	0x58004000
 8001fe8:	2000000c 	.word	0x2000000c
 8001fec:	20000010 	.word	0x20000010

08001ff0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ff0:	b590      	push	{r4, r7, lr}
 8001ff2:	b087      	sub	sp, #28
 8001ff4:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ffe:	f7ff f9e4 	bl	80013ca <LL_RCC_GetSysClkSource>
 8002002:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002004:	f7ff facd 	bl	80015a2 <LL_RCC_PLL_GetMainSource>
 8002008:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d005      	beq.n	800201c <HAL_RCC_GetSysClockFreq+0x2c>
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	2b0c      	cmp	r3, #12
 8002014:	d139      	bne.n	800208a <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2b01      	cmp	r3, #1
 800201a:	d136      	bne.n	800208a <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800201c:	f7ff f987 	bl	800132e <LL_RCC_MSI_IsEnabledRangeSelect>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d115      	bne.n	8002052 <HAL_RCC_GetSysClockFreq+0x62>
 8002026:	f7ff f982 	bl	800132e <LL_RCC_MSI_IsEnabledRangeSelect>
 800202a:	4603      	mov	r3, r0
 800202c:	2b01      	cmp	r3, #1
 800202e:	d106      	bne.n	800203e <HAL_RCC_GetSysClockFreq+0x4e>
 8002030:	f7ff f98d 	bl	800134e <LL_RCC_MSI_GetRange>
 8002034:	4603      	mov	r3, r0
 8002036:	0a1b      	lsrs	r3, r3, #8
 8002038:	f003 030f 	and.w	r3, r3, #15
 800203c:	e005      	b.n	800204a <HAL_RCC_GetSysClockFreq+0x5a>
 800203e:	f7ff f991 	bl	8001364 <LL_RCC_MSI_GetRangeAfterStandby>
 8002042:	4603      	mov	r3, r0
 8002044:	0a1b      	lsrs	r3, r3, #8
 8002046:	f003 030f 	and.w	r3, r3, #15
 800204a:	4a36      	ldr	r2, [pc, #216]	; (8002124 <HAL_RCC_GetSysClockFreq+0x134>)
 800204c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002050:	e014      	b.n	800207c <HAL_RCC_GetSysClockFreq+0x8c>
 8002052:	f7ff f96c 	bl	800132e <LL_RCC_MSI_IsEnabledRangeSelect>
 8002056:	4603      	mov	r3, r0
 8002058:	2b01      	cmp	r3, #1
 800205a:	d106      	bne.n	800206a <HAL_RCC_GetSysClockFreq+0x7a>
 800205c:	f7ff f977 	bl	800134e <LL_RCC_MSI_GetRange>
 8002060:	4603      	mov	r3, r0
 8002062:	091b      	lsrs	r3, r3, #4
 8002064:	f003 030f 	and.w	r3, r3, #15
 8002068:	e005      	b.n	8002076 <HAL_RCC_GetSysClockFreq+0x86>
 800206a:	f7ff f97b 	bl	8001364 <LL_RCC_MSI_GetRangeAfterStandby>
 800206e:	4603      	mov	r3, r0
 8002070:	091b      	lsrs	r3, r3, #4
 8002072:	f003 030f 	and.w	r3, r3, #15
 8002076:	4a2b      	ldr	r2, [pc, #172]	; (8002124 <HAL_RCC_GetSysClockFreq+0x134>)
 8002078:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800207c:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d115      	bne.n	80020b0 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002088:	e012      	b.n	80020b0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	2b04      	cmp	r3, #4
 800208e:	d102      	bne.n	8002096 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002090:	4b25      	ldr	r3, [pc, #148]	; (8002128 <HAL_RCC_GetSysClockFreq+0x138>)
 8002092:	617b      	str	r3, [r7, #20]
 8002094:	e00c      	b.n	80020b0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	2b08      	cmp	r3, #8
 800209a:	d109      	bne.n	80020b0 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800209c:	f7ff f85a 	bl	8001154 <LL_RCC_HSE_IsEnabledDiv2>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d102      	bne.n	80020ac <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80020a6:	4b20      	ldr	r3, [pc, #128]	; (8002128 <HAL_RCC_GetSysClockFreq+0x138>)
 80020a8:	617b      	str	r3, [r7, #20]
 80020aa:	e001      	b.n	80020b0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80020ac:	4b1f      	ldr	r3, [pc, #124]	; (800212c <HAL_RCC_GetSysClockFreq+0x13c>)
 80020ae:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020b0:	f7ff f98b 	bl	80013ca <LL_RCC_GetSysClkSource>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b0c      	cmp	r3, #12
 80020b8:	d12f      	bne.n	800211a <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80020ba:	f7ff fa72 	bl	80015a2 <LL_RCC_PLL_GetMainSource>
 80020be:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d003      	beq.n	80020ce <HAL_RCC_GetSysClockFreq+0xde>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2b03      	cmp	r3, #3
 80020ca:	d003      	beq.n	80020d4 <HAL_RCC_GetSysClockFreq+0xe4>
 80020cc:	e00d      	b.n	80020ea <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80020ce:	4b16      	ldr	r3, [pc, #88]	; (8002128 <HAL_RCC_GetSysClockFreq+0x138>)
 80020d0:	60fb      	str	r3, [r7, #12]
        break;
 80020d2:	e00d      	b.n	80020f0 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80020d4:	f7ff f83e 	bl	8001154 <LL_RCC_HSE_IsEnabledDiv2>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d102      	bne.n	80020e4 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80020de:	4b12      	ldr	r3, [pc, #72]	; (8002128 <HAL_RCC_GetSysClockFreq+0x138>)
 80020e0:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80020e2:	e005      	b.n	80020f0 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80020e4:	4b11      	ldr	r3, [pc, #68]	; (800212c <HAL_RCC_GetSysClockFreq+0x13c>)
 80020e6:	60fb      	str	r3, [r7, #12]
        break;
 80020e8:	e002      	b.n	80020f0 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	60fb      	str	r3, [r7, #12]
        break;
 80020ee:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80020f0:	f7ff fa35 	bl	800155e <LL_RCC_PLL_GetN>
 80020f4:	4602      	mov	r2, r0
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	fb03 f402 	mul.w	r4, r3, r2
 80020fc:	f7ff fa46 	bl	800158c <LL_RCC_PLL_GetDivider>
 8002100:	4603      	mov	r3, r0
 8002102:	091b      	lsrs	r3, r3, #4
 8002104:	3301      	adds	r3, #1
 8002106:	fbb4 f4f3 	udiv	r4, r4, r3
 800210a:	f7ff fa34 	bl	8001576 <LL_RCC_PLL_GetR>
 800210e:	4603      	mov	r3, r0
 8002110:	0f5b      	lsrs	r3, r3, #29
 8002112:	3301      	adds	r3, #1
 8002114:	fbb4 f3f3 	udiv	r3, r4, r3
 8002118:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800211a:	697b      	ldr	r3, [r7, #20]
}
 800211c:	4618      	mov	r0, r3
 800211e:	371c      	adds	r7, #28
 8002120:	46bd      	mov	sp, r7
 8002122:	bd90      	pop	{r4, r7, pc}
 8002124:	080043ec 	.word	0x080043ec
 8002128:	00f42400 	.word	0x00f42400
 800212c:	01e84800 	.word	0x01e84800

08002130 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002130:	b598      	push	{r3, r4, r7, lr}
 8002132:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002134:	f7ff ff5c 	bl	8001ff0 <HAL_RCC_GetSysClockFreq>
 8002138:	4604      	mov	r4, r0
 800213a:	f7ff f9b5 	bl	80014a8 <LL_RCC_GetAHBPrescaler>
 800213e:	4603      	mov	r3, r0
 8002140:	091b      	lsrs	r3, r3, #4
 8002142:	f003 030f 	and.w	r3, r3, #15
 8002146:	4a03      	ldr	r2, [pc, #12]	; (8002154 <HAL_RCC_GetHCLKFreq+0x24>)
 8002148:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800214c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002150:	4618      	mov	r0, r3
 8002152:	bd98      	pop	{r3, r4, r7, pc}
 8002154:	0800438c 	.word	0x0800438c

08002158 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002158:	b598      	push	{r3, r4, r7, lr}
 800215a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800215c:	f7ff ffe8 	bl	8002130 <HAL_RCC_GetHCLKFreq>
 8002160:	4604      	mov	r4, r0
 8002162:	f7ff f9b9 	bl	80014d8 <LL_RCC_GetAPB1Prescaler>
 8002166:	4603      	mov	r3, r0
 8002168:	0a1b      	lsrs	r3, r3, #8
 800216a:	4a03      	ldr	r2, [pc, #12]	; (8002178 <HAL_RCC_GetPCLK1Freq+0x20>)
 800216c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002170:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002174:	4618      	mov	r0, r3
 8002176:	bd98      	pop	{r3, r4, r7, pc}
 8002178:	080043cc 	.word	0x080043cc

0800217c <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800217c:	b598      	push	{r3, r4, r7, lr}
 800217e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002180:	f7ff ffd6 	bl	8002130 <HAL_RCC_GetHCLKFreq>
 8002184:	4604      	mov	r4, r0
 8002186:	f7ff f9b2 	bl	80014ee <LL_RCC_GetAPB2Prescaler>
 800218a:	4603      	mov	r3, r0
 800218c:	0adb      	lsrs	r3, r3, #11
 800218e:	4a03      	ldr	r2, [pc, #12]	; (800219c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002194:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002198:	4618      	mov	r0, r3
 800219a:	bd98      	pop	{r3, r4, r7, pc}
 800219c:	080043cc 	.word	0x080043cc

080021a0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80021a0:	b590      	push	{r4, r7, lr}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	091b      	lsrs	r3, r3, #4
 80021ac:	f003 030f 	and.w	r3, r3, #15
 80021b0:	4a10      	ldr	r2, [pc, #64]	; (80021f4 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80021b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021b6:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80021b8:	f7ff f981 	bl	80014be <LL_RCC_GetAHB3Prescaler>
 80021bc:	4603      	mov	r3, r0
 80021be:	091b      	lsrs	r3, r3, #4
 80021c0:	f003 030f 	and.w	r3, r3, #15
 80021c4:	4a0c      	ldr	r2, [pc, #48]	; (80021f8 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80021c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ca:	68fa      	ldr	r2, [r7, #12]
 80021cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80021d0:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	4a09      	ldr	r2, [pc, #36]	; (80021fc <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80021d6:	fba2 2303 	umull	r2, r3, r2, r3
 80021da:	0c9c      	lsrs	r4, r3, #18
 80021dc:	f7fe ff80 	bl	80010e0 <HAL_PWREx_GetVoltageRange>
 80021e0:	4603      	mov	r3, r0
 80021e2:	4619      	mov	r1, r3
 80021e4:	4620      	mov	r0, r4
 80021e6:	f000 f80b 	bl	8002200 <RCC_SetFlashLatency>
 80021ea:	4603      	mov	r3, r0
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3714      	adds	r7, #20
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd90      	pop	{r4, r7, pc}
 80021f4:	080043ec 	.word	0x080043ec
 80021f8:	0800438c 	.word	0x0800438c
 80021fc:	431bde83 	.word	0x431bde83

08002200 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b08e      	sub	sp, #56	; 0x38
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800220a:	4a3a      	ldr	r2, [pc, #232]	; (80022f4 <RCC_SetFlashLatency+0xf4>)
 800220c:	f107 0320 	add.w	r3, r7, #32
 8002210:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002214:	6018      	str	r0, [r3, #0]
 8002216:	3304      	adds	r3, #4
 8002218:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800221a:	4a37      	ldr	r2, [pc, #220]	; (80022f8 <RCC_SetFlashLatency+0xf8>)
 800221c:	f107 0318 	add.w	r3, r7, #24
 8002220:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002224:	6018      	str	r0, [r3, #0]
 8002226:	3304      	adds	r3, #4
 8002228:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800222a:	4a34      	ldr	r2, [pc, #208]	; (80022fc <RCC_SetFlashLatency+0xfc>)
 800222c:	f107 030c 	add.w	r3, r7, #12
 8002230:	ca07      	ldmia	r2, {r0, r1, r2}
 8002232:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002236:	2300      	movs	r3, #0
 8002238:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002240:	d11b      	bne.n	800227a <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002242:	2300      	movs	r3, #0
 8002244:	633b      	str	r3, [r7, #48]	; 0x30
 8002246:	e014      	b.n	8002272 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	3338      	adds	r3, #56	; 0x38
 800224e:	443b      	add	r3, r7
 8002250:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002254:	461a      	mov	r2, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4293      	cmp	r3, r2
 800225a:	d807      	bhi.n	800226c <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800225c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	3338      	adds	r3, #56	; 0x38
 8002262:	443b      	add	r3, r7
 8002264:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002268:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800226a:	e021      	b.n	80022b0 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800226c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800226e:	3301      	adds	r3, #1
 8002270:	633b      	str	r3, [r7, #48]	; 0x30
 8002272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002274:	2b02      	cmp	r3, #2
 8002276:	d9e7      	bls.n	8002248 <RCC_SetFlashLatency+0x48>
 8002278:	e01a      	b.n	80022b0 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800227a:	2300      	movs	r3, #0
 800227c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800227e:	e014      	b.n	80022aa <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	3338      	adds	r3, #56	; 0x38
 8002286:	443b      	add	r3, r7
 8002288:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 800228c:	461a      	mov	r2, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4293      	cmp	r3, r2
 8002292:	d807      	bhi.n	80022a4 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	3338      	adds	r3, #56	; 0x38
 800229a:	443b      	add	r3, r7
 800229c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80022a0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80022a2:	e005      	b.n	80022b0 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80022a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022a6:	3301      	adds	r3, #1
 80022a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d9e7      	bls.n	8002280 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80022b0:	4b13      	ldr	r3, [pc, #76]	; (8002300 <RCC_SetFlashLatency+0x100>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f023 0207 	bic.w	r2, r3, #7
 80022b8:	4911      	ldr	r1, [pc, #68]	; (8002300 <RCC_SetFlashLatency+0x100>)
 80022ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022bc:	4313      	orrs	r3, r2
 80022be:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80022c0:	f7fe fc78 	bl	8000bb4 <HAL_GetTick>
 80022c4:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80022c6:	e008      	b.n	80022da <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80022c8:	f7fe fc74 	bl	8000bb4 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d901      	bls.n	80022da <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e007      	b.n	80022ea <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80022da:	4b09      	ldr	r3, [pc, #36]	; (8002300 <RCC_SetFlashLatency+0x100>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0307 	and.w	r3, r3, #7
 80022e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d1ef      	bne.n	80022c8 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3738      	adds	r7, #56	; 0x38
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	08004368 	.word	0x08004368
 80022f8:	08004370 	.word	0x08004370
 80022fc:	08004378 	.word	0x08004378
 8002300:	58004000 	.word	0x58004000

08002304 <LL_RCC_LSE_IsReady>:
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002308:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800230c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002310:	f003 0302 	and.w	r3, r3, #2
 8002314:	2b02      	cmp	r3, #2
 8002316:	d101      	bne.n	800231c <LL_RCC_LSE_IsReady+0x18>
 8002318:	2301      	movs	r3, #1
 800231a:	e000      	b.n	800231e <LL_RCC_LSE_IsReady+0x1a>
 800231c:	2300      	movs	r3, #0
}
 800231e:	4618      	mov	r0, r3
 8002320:	46bd      	mov	sp, r7
 8002322:	bc80      	pop	{r7}
 8002324:	4770      	bx	lr

08002326 <LL_RCC_SetUSARTClockSource>:
{
 8002326:	b480      	push	{r7}
 8002328:	b083      	sub	sp, #12
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 800232e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002332:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	0c1b      	lsrs	r3, r3, #16
 800233a:	43db      	mvns	r3, r3
 800233c:	401a      	ands	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	b29b      	uxth	r3, r3
 8002342:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002346:	4313      	orrs	r3, r2
 8002348:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	bc80      	pop	{r7}
 8002354:	4770      	bx	lr

08002356 <LL_RCC_SetI2SClockSource>:
{
 8002356:	b480      	push	{r7}
 8002358:	b083      	sub	sp, #12
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 800235e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002366:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800236a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4313      	orrs	r3, r2
 8002372:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002376:	bf00      	nop
 8002378:	370c      	adds	r7, #12
 800237a:	46bd      	mov	sp, r7
 800237c:	bc80      	pop	{r7}
 800237e:	4770      	bx	lr

08002380 <LL_RCC_SetLPUARTClockSource>:
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002388:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800238c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002390:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002394:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	4313      	orrs	r3, r2
 800239c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80023a0:	bf00      	nop
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bc80      	pop	{r7}
 80023a8:	4770      	bx	lr

080023aa <LL_RCC_SetI2CClockSource>:
{
 80023aa:	b480      	push	{r7}
 80023ac:	b083      	sub	sp, #12
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80023b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023b6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	091b      	lsrs	r3, r3, #4
 80023be:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80023c2:	43db      	mvns	r3, r3
 80023c4:	401a      	ands	r2, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	011b      	lsls	r3, r3, #4
 80023ca:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80023ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023d2:	4313      	orrs	r3, r2
 80023d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80023d8:	bf00      	nop
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	bc80      	pop	{r7}
 80023e0:	4770      	bx	lr

080023e2 <LL_RCC_SetLPTIMClockSource>:
{
 80023e2:	b480      	push	{r7}
 80023e4:	b083      	sub	sp, #12
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80023ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023ee:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	0c1b      	lsrs	r3, r3, #16
 80023f6:	041b      	lsls	r3, r3, #16
 80023f8:	43db      	mvns	r3, r3
 80023fa:	401a      	ands	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	041b      	lsls	r3, r3, #16
 8002400:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002404:	4313      	orrs	r3, r2
 8002406:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800240a:	bf00      	nop
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	bc80      	pop	{r7}
 8002412:	4770      	bx	lr

08002414 <LL_RCC_SetRNGClockSource>:
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800241c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002424:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002428:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	4313      	orrs	r3, r2
 8002430:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002434:	bf00      	nop
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	bc80      	pop	{r7}
 800243c:	4770      	bx	lr

0800243e <LL_RCC_SetADCClockSource>:
{
 800243e:	b480      	push	{r7}
 8002440:	b083      	sub	sp, #12
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002446:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800244a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800244e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002452:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4313      	orrs	r3, r2
 800245a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800245e:	bf00      	nop
 8002460:	370c      	adds	r7, #12
 8002462:	46bd      	mov	sp, r7
 8002464:	bc80      	pop	{r7}
 8002466:	4770      	bx	lr

08002468 <LL_RCC_SetRTCClockSource>:
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002470:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002474:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002478:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800247c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4313      	orrs	r3, r2
 8002484:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002488:	bf00      	nop
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	bc80      	pop	{r7}
 8002490:	4770      	bx	lr

08002492 <LL_RCC_GetRTCClockSource>:
{
 8002492:	b480      	push	{r7}
 8002494:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002496:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800249a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800249e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bc80      	pop	{r7}
 80024a8:	4770      	bx	lr

080024aa <LL_RCC_ForceBackupDomainReset>:
{
 80024aa:	b480      	push	{r7}
 80024ac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80024ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80024c2:	bf00      	nop
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bc80      	pop	{r7}
 80024c8:	4770      	bx	lr

080024ca <LL_RCC_ReleaseBackupDomainReset>:
{
 80024ca:	b480      	push	{r7}
 80024cc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80024ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80024e2:	bf00      	nop
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bc80      	pop	{r7}
 80024e8:	4770      	bx	lr
	...

080024ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b086      	sub	sp, #24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80024f4:	2300      	movs	r3, #0
 80024f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80024f8:	2300      	movs	r3, #0
 80024fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80024fc:	2300      	movs	r3, #0
 80024fe:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d058      	beq.n	80025be <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 800250c:	f7fe fdda 	bl	80010c4 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002510:	f7fe fb50 	bl	8000bb4 <HAL_GetTick>
 8002514:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002516:	e009      	b.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002518:	f7fe fb4c 	bl	8000bb4 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b02      	cmp	r3, #2
 8002524:	d902      	bls.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	74fb      	strb	r3, [r7, #19]
        break;
 800252a:	e006      	b.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800252c:	4b7b      	ldr	r3, [pc, #492]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002534:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002538:	d1ee      	bne.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 800253a:	7cfb      	ldrb	r3, [r7, #19]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d13c      	bne.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8002540:	f7ff ffa7 	bl	8002492 <LL_RCC_GetRTCClockSource>
 8002544:	4602      	mov	r2, r0
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800254a:	429a      	cmp	r2, r3
 800254c:	d00f      	beq.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800254e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002556:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800255a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800255c:	f7ff ffa5 	bl	80024aa <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002560:	f7ff ffb3 	bl	80024ca <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002564:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	f003 0302 	and.w	r3, r3, #2
 8002574:	2b00      	cmp	r3, #0
 8002576:	d014      	beq.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002578:	f7fe fb1c 	bl	8000bb4 <HAL_GetTick>
 800257c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 800257e:	e00b      	b.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002580:	f7fe fb18 	bl	8000bb4 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	f241 3288 	movw	r2, #5000	; 0x1388
 800258e:	4293      	cmp	r3, r2
 8002590:	d902      	bls.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	74fb      	strb	r3, [r7, #19]
            break;
 8002596:	e004      	b.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8002598:	f7ff feb4 	bl	8002304 <LL_RCC_LSE_IsReady>
 800259c:	4603      	mov	r3, r0
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d1ee      	bne.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 80025a2:	7cfb      	ldrb	r3, [r7, #19]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d105      	bne.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7ff ff5b 	bl	8002468 <LL_RCC_SetRTCClockSource>
 80025b2:	e004      	b.n	80025be <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80025b4:	7cfb      	ldrb	r3, [r7, #19]
 80025b6:	74bb      	strb	r3, [r7, #18]
 80025b8:	e001      	b.n	80025be <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025ba:	7cfb      	ldrb	r3, [r7, #19]
 80025bc:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d004      	beq.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7ff fea9 	bl	8002326 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0302 	and.w	r3, r3, #2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d004      	beq.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7ff fe9e 	bl	8002326 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0320 	and.w	r3, r3, #32
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d004      	beq.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7ff fec0 	bl	8002380 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002608:	2b00      	cmp	r3, #0
 800260a:	d004      	beq.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a1b      	ldr	r3, [r3, #32]
 8002610:	4618      	mov	r0, r3
 8002612:	f7ff fee6 	bl	80023e2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800261e:	2b00      	cmp	r3, #0
 8002620:	d004      	beq.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002626:	4618      	mov	r0, r3
 8002628:	f7ff fedb 	bl	80023e2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002634:	2b00      	cmp	r3, #0
 8002636:	d004      	beq.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800263c:	4618      	mov	r0, r3
 800263e:	f7ff fed0 	bl	80023e2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800264a:	2b00      	cmp	r3, #0
 800264c:	d004      	beq.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	4618      	mov	r0, r3
 8002654:	f7ff fea9 	bl	80023aa <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002660:	2b00      	cmp	r3, #0
 8002662:	d004      	beq.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff fe9e 	bl	80023aa <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002676:	2b00      	cmp	r3, #0
 8002678:	d004      	beq.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	69db      	ldr	r3, [r3, #28]
 800267e:	4618      	mov	r0, r3
 8002680:	f7ff fe93 	bl	80023aa <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0310 	and.w	r3, r3, #16
 800268c:	2b00      	cmp	r3, #0
 800268e:	d011      	beq.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	4618      	mov	r0, r3
 8002696:	f7ff fe5e 	bl	8002356 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026a2:	d107      	bne.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80026a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026b2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d010      	beq.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7ff fea5 	bl	8002414 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d107      	bne.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80026d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026e0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d011      	beq.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7ff fea3 	bl	800243e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002700:	d107      	bne.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002702:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800270c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002710:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8002712:	7cbb      	ldrb	r3, [r7, #18]
}
 8002714:	4618      	mov	r0, r3
 8002716:	3718      	adds	r7, #24
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	58000400 	.word	0x58000400

08002720 <LL_RCC_GetUSARTClockSource>:
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8002728:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800272c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	401a      	ands	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	041b      	lsls	r3, r3, #16
 8002738:	4313      	orrs	r3, r2
}
 800273a:	4618      	mov	r0, r3
 800273c:	370c      	adds	r7, #12
 800273e:	46bd      	mov	sp, r7
 8002740:	bc80      	pop	{r7}
 8002742:	4770      	bx	lr

08002744 <LL_RCC_GetLPUARTClockSource>:
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800274c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002750:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	4013      	ands	r3, r2
}
 8002758:	4618      	mov	r0, r3
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	bc80      	pop	{r7}
 8002760:	4770      	bx	lr

08002762 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002762:	b580      	push	{r7, lr}
 8002764:	b082      	sub	sp, #8
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d101      	bne.n	8002774 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e042      	b.n	80027fa <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800277a:	2b00      	cmp	r3, #0
 800277c:	d106      	bne.n	800278c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f7fe f836 	bl	80007f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2224      	movs	r2, #36	; 0x24
 8002790:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f022 0201 	bic.w	r2, r2, #1
 80027a2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f000 f8b3 	bl	8002910 <UART_SetConfig>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d101      	bne.n	80027b4 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e022      	b.n	80027fa <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d002      	beq.n	80027c2 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f000 fb1b 	bl	8002df8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	685a      	ldr	r2, [r3, #4]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027d0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	689a      	ldr	r2, [r3, #8]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027e0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f042 0201 	orr.w	r2, r2, #1
 80027f0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f000 fba1 	bl	8002f3a <UART_CheckIdleState>
 80027f8:	4603      	mov	r3, r0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}

08002802 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002802:	b580      	push	{r7, lr}
 8002804:	b08a      	sub	sp, #40	; 0x28
 8002806:	af02      	add	r7, sp, #8
 8002808:	60f8      	str	r0, [r7, #12]
 800280a:	60b9      	str	r1, [r7, #8]
 800280c:	603b      	str	r3, [r7, #0]
 800280e:	4613      	mov	r3, r2
 8002810:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002818:	2b20      	cmp	r3, #32
 800281a:	d173      	bne.n	8002904 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d002      	beq.n	8002828 <HAL_UART_Transmit+0x26>
 8002822:	88fb      	ldrh	r3, [r7, #6]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d101      	bne.n	800282c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e06c      	b.n	8002906 <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2200      	movs	r2, #0
 8002830:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2221      	movs	r2, #33	; 0x21
 8002838:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800283c:	f7fe f9ba 	bl	8000bb4 <HAL_GetTick>
 8002840:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	88fa      	ldrh	r2, [r7, #6]
 8002846:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	88fa      	ldrh	r2, [r7, #6]
 800284e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800285a:	d108      	bne.n	800286e <HAL_UART_Transmit+0x6c>
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d104      	bne.n	800286e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002864:	2300      	movs	r3, #0
 8002866:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	61bb      	str	r3, [r7, #24]
 800286c:	e003      	b.n	8002876 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002872:	2300      	movs	r3, #0
 8002874:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002876:	e02c      	b.n	80028d2 <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	9300      	str	r3, [sp, #0]
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	2200      	movs	r2, #0
 8002880:	2180      	movs	r1, #128	; 0x80
 8002882:	68f8      	ldr	r0, [r7, #12]
 8002884:	f000 fba7 	bl	8002fd6 <UART_WaitOnFlagUntilTimeout>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e039      	b.n	8002906 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d10b      	bne.n	80028b0 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	881b      	ldrh	r3, [r3, #0]
 800289c:	461a      	mov	r2, r3
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028a6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	3302      	adds	r3, #2
 80028ac:	61bb      	str	r3, [r7, #24]
 80028ae:	e007      	b.n	80028c0 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	781a      	ldrb	r2, [r3, #0]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	3301      	adds	r3, #1
 80028be:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	3b01      	subs	r3, #1
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80028d8:	b29b      	uxth	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1cc      	bne.n	8002878 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	9300      	str	r3, [sp, #0]
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	2200      	movs	r2, #0
 80028e6:	2140      	movs	r1, #64	; 0x40
 80028e8:	68f8      	ldr	r0, [r7, #12]
 80028ea:	f000 fb74 	bl	8002fd6 <UART_WaitOnFlagUntilTimeout>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d001      	beq.n	80028f8 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e006      	b.n	8002906 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2220      	movs	r2, #32
 80028fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8002900:	2300      	movs	r3, #0
 8002902:	e000      	b.n	8002906 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 8002904:	2302      	movs	r3, #2
  }
}
 8002906:	4618      	mov	r0, r3
 8002908:	3720      	adds	r7, #32
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
	...

08002910 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002910:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002914:	b08c      	sub	sp, #48	; 0x30
 8002916:	af00      	add	r7, sp, #0
 8002918:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800291a:	2300      	movs	r3, #0
 800291c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	689a      	ldr	r2, [r3, #8]
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	691b      	ldr	r3, [r3, #16]
 8002928:	431a      	orrs	r2, r3
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	695b      	ldr	r3, [r3, #20]
 800292e:	431a      	orrs	r2, r3
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	69db      	ldr	r3, [r3, #28]
 8002934:	4313      	orrs	r3, r2
 8002936:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	4b94      	ldr	r3, [pc, #592]	; (8002b90 <UART_SetConfig+0x280>)
 8002940:	4013      	ands	r3, r2
 8002942:	697a      	ldr	r2, [r7, #20]
 8002944:	6812      	ldr	r2, [r2, #0]
 8002946:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002948:	430b      	orrs	r3, r1
 800294a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	68da      	ldr	r2, [r3, #12]
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	430a      	orrs	r2, r1
 8002960:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	699b      	ldr	r3, [r3, #24]
 8002966:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a89      	ldr	r2, [pc, #548]	; (8002b94 <UART_SetConfig+0x284>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d004      	beq.n	800297c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	6a1b      	ldr	r3, [r3, #32]
 8002976:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002978:	4313      	orrs	r3, r2
 800297a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002986:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800298a:	697a      	ldr	r2, [r7, #20]
 800298c:	6812      	ldr	r2, [r2, #0]
 800298e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002990:	430b      	orrs	r3, r1
 8002992:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800299a:	f023 010f 	bic.w	r1, r3, #15
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	430a      	orrs	r2, r1
 80029a8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a7a      	ldr	r2, [pc, #488]	; (8002b98 <UART_SetConfig+0x288>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d127      	bne.n	8002a04 <UART_SetConfig+0xf4>
 80029b4:	2003      	movs	r0, #3
 80029b6:	f7ff feb3 	bl	8002720 <LL_RCC_GetUSARTClockSource>
 80029ba:	4603      	mov	r3, r0
 80029bc:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 80029c0:	2b03      	cmp	r3, #3
 80029c2:	d81b      	bhi.n	80029fc <UART_SetConfig+0xec>
 80029c4:	a201      	add	r2, pc, #4	; (adr r2, 80029cc <UART_SetConfig+0xbc>)
 80029c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029ca:	bf00      	nop
 80029cc:	080029dd 	.word	0x080029dd
 80029d0:	080029ed 	.word	0x080029ed
 80029d4:	080029e5 	.word	0x080029e5
 80029d8:	080029f5 	.word	0x080029f5
 80029dc:	2301      	movs	r3, #1
 80029de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80029e2:	e080      	b.n	8002ae6 <UART_SetConfig+0x1d6>
 80029e4:	2302      	movs	r3, #2
 80029e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80029ea:	e07c      	b.n	8002ae6 <UART_SetConfig+0x1d6>
 80029ec:	2304      	movs	r3, #4
 80029ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80029f2:	e078      	b.n	8002ae6 <UART_SetConfig+0x1d6>
 80029f4:	2308      	movs	r3, #8
 80029f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80029fa:	e074      	b.n	8002ae6 <UART_SetConfig+0x1d6>
 80029fc:	2310      	movs	r3, #16
 80029fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002a02:	e070      	b.n	8002ae6 <UART_SetConfig+0x1d6>
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a64      	ldr	r2, [pc, #400]	; (8002b9c <UART_SetConfig+0x28c>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d138      	bne.n	8002a80 <UART_SetConfig+0x170>
 8002a0e:	200c      	movs	r0, #12
 8002a10:	f7ff fe86 	bl	8002720 <LL_RCC_GetUSARTClockSource>
 8002a14:	4603      	mov	r3, r0
 8002a16:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8002a1a:	2b0c      	cmp	r3, #12
 8002a1c:	d82c      	bhi.n	8002a78 <UART_SetConfig+0x168>
 8002a1e:	a201      	add	r2, pc, #4	; (adr r2, 8002a24 <UART_SetConfig+0x114>)
 8002a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a24:	08002a59 	.word	0x08002a59
 8002a28:	08002a79 	.word	0x08002a79
 8002a2c:	08002a79 	.word	0x08002a79
 8002a30:	08002a79 	.word	0x08002a79
 8002a34:	08002a69 	.word	0x08002a69
 8002a38:	08002a79 	.word	0x08002a79
 8002a3c:	08002a79 	.word	0x08002a79
 8002a40:	08002a79 	.word	0x08002a79
 8002a44:	08002a61 	.word	0x08002a61
 8002a48:	08002a79 	.word	0x08002a79
 8002a4c:	08002a79 	.word	0x08002a79
 8002a50:	08002a79 	.word	0x08002a79
 8002a54:	08002a71 	.word	0x08002a71
 8002a58:	2300      	movs	r3, #0
 8002a5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002a5e:	e042      	b.n	8002ae6 <UART_SetConfig+0x1d6>
 8002a60:	2302      	movs	r3, #2
 8002a62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002a66:	e03e      	b.n	8002ae6 <UART_SetConfig+0x1d6>
 8002a68:	2304      	movs	r3, #4
 8002a6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002a6e:	e03a      	b.n	8002ae6 <UART_SetConfig+0x1d6>
 8002a70:	2308      	movs	r3, #8
 8002a72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002a76:	e036      	b.n	8002ae6 <UART_SetConfig+0x1d6>
 8002a78:	2310      	movs	r3, #16
 8002a7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002a7e:	e032      	b.n	8002ae6 <UART_SetConfig+0x1d6>
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a43      	ldr	r2, [pc, #268]	; (8002b94 <UART_SetConfig+0x284>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d12a      	bne.n	8002ae0 <UART_SetConfig+0x1d0>
 8002a8a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8002a8e:	f7ff fe59 	bl	8002744 <LL_RCC_GetLPUARTClockSource>
 8002a92:	4603      	mov	r3, r0
 8002a94:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002a98:	d01a      	beq.n	8002ad0 <UART_SetConfig+0x1c0>
 8002a9a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002a9e:	d81b      	bhi.n	8002ad8 <UART_SetConfig+0x1c8>
 8002aa0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002aa4:	d00c      	beq.n	8002ac0 <UART_SetConfig+0x1b0>
 8002aa6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002aaa:	d815      	bhi.n	8002ad8 <UART_SetConfig+0x1c8>
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d003      	beq.n	8002ab8 <UART_SetConfig+0x1a8>
 8002ab0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ab4:	d008      	beq.n	8002ac8 <UART_SetConfig+0x1b8>
 8002ab6:	e00f      	b.n	8002ad8 <UART_SetConfig+0x1c8>
 8002ab8:	2300      	movs	r3, #0
 8002aba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002abe:	e012      	b.n	8002ae6 <UART_SetConfig+0x1d6>
 8002ac0:	2302      	movs	r3, #2
 8002ac2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002ac6:	e00e      	b.n	8002ae6 <UART_SetConfig+0x1d6>
 8002ac8:	2304      	movs	r3, #4
 8002aca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002ace:	e00a      	b.n	8002ae6 <UART_SetConfig+0x1d6>
 8002ad0:	2308      	movs	r3, #8
 8002ad2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002ad6:	e006      	b.n	8002ae6 <UART_SetConfig+0x1d6>
 8002ad8:	2310      	movs	r3, #16
 8002ada:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002ade:	e002      	b.n	8002ae6 <UART_SetConfig+0x1d6>
 8002ae0:	2310      	movs	r3, #16
 8002ae2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a2a      	ldr	r2, [pc, #168]	; (8002b94 <UART_SetConfig+0x284>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	f040 80a4 	bne.w	8002c3a <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002af2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002af6:	2b08      	cmp	r3, #8
 8002af8:	d823      	bhi.n	8002b42 <UART_SetConfig+0x232>
 8002afa:	a201      	add	r2, pc, #4	; (adr r2, 8002b00 <UART_SetConfig+0x1f0>)
 8002afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b00:	08002b25 	.word	0x08002b25
 8002b04:	08002b43 	.word	0x08002b43
 8002b08:	08002b2d 	.word	0x08002b2d
 8002b0c:	08002b43 	.word	0x08002b43
 8002b10:	08002b33 	.word	0x08002b33
 8002b14:	08002b43 	.word	0x08002b43
 8002b18:	08002b43 	.word	0x08002b43
 8002b1c:	08002b43 	.word	0x08002b43
 8002b20:	08002b3b 	.word	0x08002b3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b24:	f7ff fb18 	bl	8002158 <HAL_RCC_GetPCLK1Freq>
 8002b28:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002b2a:	e010      	b.n	8002b4e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b2c:	4b1c      	ldr	r3, [pc, #112]	; (8002ba0 <UART_SetConfig+0x290>)
 8002b2e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002b30:	e00d      	b.n	8002b4e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b32:	f7ff fa5d 	bl	8001ff0 <HAL_RCC_GetSysClockFreq>
 8002b36:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002b38:	e009      	b.n	8002b4e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b3e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002b40:	e005      	b.n	8002b4e <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8002b42:	2300      	movs	r3, #0
 8002b44:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002b4c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	f000 8137 	beq.w	8002dc4 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5a:	4a12      	ldr	r2, [pc, #72]	; (8002ba4 <UART_SetConfig+0x294>)
 8002b5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b60:	461a      	mov	r2, r3
 8002b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b64:	fbb3 f3f2 	udiv	r3, r3, r2
 8002b68:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	685a      	ldr	r2, [r3, #4]
 8002b6e:	4613      	mov	r3, r2
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	4413      	add	r3, r2
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d305      	bcc.n	8002b86 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d910      	bls.n	8002ba8 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002b8c:	e11a      	b.n	8002dc4 <UART_SetConfig+0x4b4>
 8002b8e:	bf00      	nop
 8002b90:	cfff69f3 	.word	0xcfff69f3
 8002b94:	40008000 	.word	0x40008000
 8002b98:	40013800 	.word	0x40013800
 8002b9c:	40004400 	.word	0x40004400
 8002ba0:	00f42400 	.word	0x00f42400
 8002ba4:	0800442c 	.word	0x0800442c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002baa:	2200      	movs	r2, #0
 8002bac:	60bb      	str	r3, [r7, #8]
 8002bae:	60fa      	str	r2, [r7, #12]
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb4:	4a8e      	ldr	r2, [pc, #568]	; (8002df0 <UART_SetConfig+0x4e0>)
 8002bb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	603b      	str	r3, [r7, #0]
 8002bc0:	607a      	str	r2, [r7, #4]
 8002bc2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002bc6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002bca:	f7fd fb29 	bl	8000220 <__aeabi_uldivmod>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	4610      	mov	r0, r2
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	f04f 0200 	mov.w	r2, #0
 8002bda:	f04f 0300 	mov.w	r3, #0
 8002bde:	020b      	lsls	r3, r1, #8
 8002be0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002be4:	0202      	lsls	r2, r0, #8
 8002be6:	6979      	ldr	r1, [r7, #20]
 8002be8:	6849      	ldr	r1, [r1, #4]
 8002bea:	0849      	lsrs	r1, r1, #1
 8002bec:	2000      	movs	r0, #0
 8002bee:	460c      	mov	r4, r1
 8002bf0:	4605      	mov	r5, r0
 8002bf2:	eb12 0804 	adds.w	r8, r2, r4
 8002bf6:	eb43 0905 	adc.w	r9, r3, r5
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	469a      	mov	sl, r3
 8002c02:	4693      	mov	fp, r2
 8002c04:	4652      	mov	r2, sl
 8002c06:	465b      	mov	r3, fp
 8002c08:	4640      	mov	r0, r8
 8002c0a:	4649      	mov	r1, r9
 8002c0c:	f7fd fb08 	bl	8000220 <__aeabi_uldivmod>
 8002c10:	4602      	mov	r2, r0
 8002c12:	460b      	mov	r3, r1
 8002c14:	4613      	mov	r3, r2
 8002c16:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002c18:	6a3b      	ldr	r3, [r7, #32]
 8002c1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c1e:	d308      	bcc.n	8002c32 <UART_SetConfig+0x322>
 8002c20:	6a3b      	ldr	r3, [r7, #32]
 8002c22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c26:	d204      	bcs.n	8002c32 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	6a3a      	ldr	r2, [r7, #32]
 8002c2e:	60da      	str	r2, [r3, #12]
 8002c30:	e0c8      	b.n	8002dc4 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002c38:	e0c4      	b.n	8002dc4 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	69db      	ldr	r3, [r3, #28]
 8002c3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c42:	d167      	bne.n	8002d14 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8002c44:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002c48:	2b08      	cmp	r3, #8
 8002c4a:	d828      	bhi.n	8002c9e <UART_SetConfig+0x38e>
 8002c4c:	a201      	add	r2, pc, #4	; (adr r2, 8002c54 <UART_SetConfig+0x344>)
 8002c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c52:	bf00      	nop
 8002c54:	08002c79 	.word	0x08002c79
 8002c58:	08002c81 	.word	0x08002c81
 8002c5c:	08002c89 	.word	0x08002c89
 8002c60:	08002c9f 	.word	0x08002c9f
 8002c64:	08002c8f 	.word	0x08002c8f
 8002c68:	08002c9f 	.word	0x08002c9f
 8002c6c:	08002c9f 	.word	0x08002c9f
 8002c70:	08002c9f 	.word	0x08002c9f
 8002c74:	08002c97 	.word	0x08002c97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c78:	f7ff fa6e 	bl	8002158 <HAL_RCC_GetPCLK1Freq>
 8002c7c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002c7e:	e014      	b.n	8002caa <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c80:	f7ff fa7c 	bl	800217c <HAL_RCC_GetPCLK2Freq>
 8002c84:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002c86:	e010      	b.n	8002caa <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c88:	4b5a      	ldr	r3, [pc, #360]	; (8002df4 <UART_SetConfig+0x4e4>)
 8002c8a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002c8c:	e00d      	b.n	8002caa <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c8e:	f7ff f9af 	bl	8001ff0 <HAL_RCC_GetSysClockFreq>
 8002c92:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002c94:	e009      	b.n	8002caa <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c9a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002c9c:	e005      	b.n	8002caa <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002ca8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	f000 8089 	beq.w	8002dc4 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb6:	4a4e      	ldr	r2, [pc, #312]	; (8002df0 <UART_SetConfig+0x4e0>)
 8002cb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc0:	fbb3 f3f2 	udiv	r3, r3, r2
 8002cc4:	005a      	lsls	r2, r3, #1
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	085b      	lsrs	r3, r3, #1
 8002ccc:	441a      	add	r2, r3
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cd6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002cd8:	6a3b      	ldr	r3, [r7, #32]
 8002cda:	2b0f      	cmp	r3, #15
 8002cdc:	d916      	bls.n	8002d0c <UART_SetConfig+0x3fc>
 8002cde:	6a3b      	ldr	r3, [r7, #32]
 8002ce0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ce4:	d212      	bcs.n	8002d0c <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002ce6:	6a3b      	ldr	r3, [r7, #32]
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	f023 030f 	bic.w	r3, r3, #15
 8002cee:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002cf0:	6a3b      	ldr	r3, [r7, #32]
 8002cf2:	085b      	lsrs	r3, r3, #1
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	f003 0307 	and.w	r3, r3, #7
 8002cfa:	b29a      	uxth	r2, r3
 8002cfc:	8bfb      	ldrh	r3, [r7, #30]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	8bfa      	ldrh	r2, [r7, #30]
 8002d08:	60da      	str	r2, [r3, #12]
 8002d0a:	e05b      	b.n	8002dc4 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002d12:	e057      	b.n	8002dc4 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002d14:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002d18:	2b08      	cmp	r3, #8
 8002d1a:	d828      	bhi.n	8002d6e <UART_SetConfig+0x45e>
 8002d1c:	a201      	add	r2, pc, #4	; (adr r2, 8002d24 <UART_SetConfig+0x414>)
 8002d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d22:	bf00      	nop
 8002d24:	08002d49 	.word	0x08002d49
 8002d28:	08002d51 	.word	0x08002d51
 8002d2c:	08002d59 	.word	0x08002d59
 8002d30:	08002d6f 	.word	0x08002d6f
 8002d34:	08002d5f 	.word	0x08002d5f
 8002d38:	08002d6f 	.word	0x08002d6f
 8002d3c:	08002d6f 	.word	0x08002d6f
 8002d40:	08002d6f 	.word	0x08002d6f
 8002d44:	08002d67 	.word	0x08002d67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d48:	f7ff fa06 	bl	8002158 <HAL_RCC_GetPCLK1Freq>
 8002d4c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002d4e:	e014      	b.n	8002d7a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d50:	f7ff fa14 	bl	800217c <HAL_RCC_GetPCLK2Freq>
 8002d54:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002d56:	e010      	b.n	8002d7a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d58:	4b26      	ldr	r3, [pc, #152]	; (8002df4 <UART_SetConfig+0x4e4>)
 8002d5a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002d5c:	e00d      	b.n	8002d7a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d5e:	f7ff f947 	bl	8001ff0 <HAL_RCC_GetSysClockFreq>
 8002d62:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002d64:	e009      	b.n	8002d7a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d6a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002d6c:	e005      	b.n	8002d7a <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002d78:	bf00      	nop
    }

    if (pclk != 0U)
 8002d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d021      	beq.n	8002dc4 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d84:	4a1a      	ldr	r2, [pc, #104]	; (8002df0 <UART_SetConfig+0x4e0>)
 8002d86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8e:	fbb3 f2f2 	udiv	r2, r3, r2
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	085b      	lsrs	r3, r3, #1
 8002d98:	441a      	add	r2, r3
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002da2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002da4:	6a3b      	ldr	r3, [r7, #32]
 8002da6:	2b0f      	cmp	r3, #15
 8002da8:	d909      	bls.n	8002dbe <UART_SetConfig+0x4ae>
 8002daa:	6a3b      	ldr	r3, [r7, #32]
 8002dac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002db0:	d205      	bcs.n	8002dbe <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002db2:	6a3b      	ldr	r3, [r7, #32]
 8002db4:	b29a      	uxth	r2, r3
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	60da      	str	r2, [r3, #12]
 8002dbc:	e002      	b.n	8002dc4 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8002de0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3730      	adds	r7, #48	; 0x30
 8002de8:	46bd      	mov	sp, r7
 8002dea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002dee:	bf00      	nop
 8002df0:	0800442c 	.word	0x0800442c
 8002df4:	00f42400 	.word	0x00f42400

08002df8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e04:	f003 0301 	and.w	r3, r3, #1
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d00a      	beq.n	8002e22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	430a      	orrs	r2, r1
 8002e20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d00a      	beq.n	8002e44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	430a      	orrs	r2, r1
 8002e42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e48:	f003 0304 	and.w	r3, r3, #4
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d00a      	beq.n	8002e66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	430a      	orrs	r2, r1
 8002e64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e6a:	f003 0308 	and.w	r3, r3, #8
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00a      	beq.n	8002e88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	430a      	orrs	r2, r1
 8002e86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e8c:	f003 0310 	and.w	r3, r3, #16
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d00a      	beq.n	8002eaa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eae:	f003 0320 	and.w	r3, r3, #32
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d00a      	beq.n	8002ecc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	430a      	orrs	r2, r1
 8002eca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d01a      	beq.n	8002f0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	430a      	orrs	r2, r1
 8002eec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ef6:	d10a      	bne.n	8002f0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d00a      	beq.n	8002f30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	430a      	orrs	r2, r1
 8002f2e:	605a      	str	r2, [r3, #4]
  }
}
 8002f30:	bf00      	nop
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bc80      	pop	{r7}
 8002f38:	4770      	bx	lr

08002f3a <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002f3a:	b580      	push	{r7, lr}
 8002f3c:	b086      	sub	sp, #24
 8002f3e:	af02      	add	r7, sp, #8
 8002f40:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002f4a:	f7fd fe33 	bl	8000bb4 <HAL_GetTick>
 8002f4e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0308 	and.w	r3, r3, #8
 8002f5a:	2b08      	cmp	r3, #8
 8002f5c:	d10e      	bne.n	8002f7c <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f5e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002f62:	9300      	str	r3, [sp, #0]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2200      	movs	r2, #0
 8002f68:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f000 f832 	bl	8002fd6 <UART_WaitOnFlagUntilTimeout>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d001      	beq.n	8002f7c <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e028      	b.n	8002fce <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0304 	and.w	r3, r3, #4
 8002f86:	2b04      	cmp	r3, #4
 8002f88:	d10e      	bne.n	8002fa8 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f8a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002f8e:	9300      	str	r3, [sp, #0]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f000 f81c 	bl	8002fd6 <UART_WaitOnFlagUntilTimeout>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d001      	beq.n	8002fa8 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e012      	b.n	8002fce <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2220      	movs	r2, #32
 8002fac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2220      	movs	r2, #32
 8002fb4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3710      	adds	r7, #16
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}

08002fd6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	b09c      	sub	sp, #112	; 0x70
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	60f8      	str	r0, [r7, #12]
 8002fde:	60b9      	str	r1, [r7, #8]
 8002fe0:	603b      	str	r3, [r7, #0]
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fe6:	e0a9      	b.n	800313c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fe8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fee:	f000 80a5 	beq.w	800313c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ff2:	f7fd fddf 	bl	8000bb4 <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d302      	bcc.n	8003008 <UART_WaitOnFlagUntilTimeout+0x32>
 8003002:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003004:	2b00      	cmp	r3, #0
 8003006:	d140      	bne.n	800308a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800300e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003010:	e853 3f00 	ldrex	r3, [r3]
 8003014:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003016:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003018:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800301c:	667b      	str	r3, [r7, #100]	; 0x64
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	461a      	mov	r2, r3
 8003024:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003026:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003028:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800302a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800302c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800302e:	e841 2300 	strex	r3, r2, [r1]
 8003032:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003034:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1e6      	bne.n	8003008 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	3308      	adds	r3, #8
 8003040:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003042:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003044:	e853 3f00 	ldrex	r3, [r3]
 8003048:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800304a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800304c:	f023 0301 	bic.w	r3, r3, #1
 8003050:	663b      	str	r3, [r7, #96]	; 0x60
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	3308      	adds	r3, #8
 8003058:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800305a:	64ba      	str	r2, [r7, #72]	; 0x48
 800305c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800305e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003060:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003062:	e841 2300 	strex	r3, r2, [r1]
 8003066:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003068:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800306a:	2b00      	cmp	r3, #0
 800306c:	d1e5      	bne.n	800303a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2220      	movs	r2, #32
 8003072:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2220      	movs	r2, #32
 800307a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e069      	b.n	800315e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0304 	and.w	r3, r3, #4
 8003094:	2b00      	cmp	r3, #0
 8003096:	d051      	beq.n	800313c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	69db      	ldr	r3, [r3, #28]
 800309e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030a6:	d149      	bne.n	800313c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030b0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ba:	e853 3f00 	ldrex	r3, [r3]
 80030be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80030c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80030c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	461a      	mov	r2, r3
 80030ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030d0:	637b      	str	r3, [r7, #52]	; 0x34
 80030d2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80030d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030d8:	e841 2300 	strex	r3, r2, [r1]
 80030dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80030de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d1e6      	bne.n	80030b2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	3308      	adds	r3, #8
 80030ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	e853 3f00 	ldrex	r3, [r3]
 80030f2:	613b      	str	r3, [r7, #16]
   return(result);
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	f023 0301 	bic.w	r3, r3, #1
 80030fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	3308      	adds	r3, #8
 8003102:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003104:	623a      	str	r2, [r7, #32]
 8003106:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003108:	69f9      	ldr	r1, [r7, #28]
 800310a:	6a3a      	ldr	r2, [r7, #32]
 800310c:	e841 2300 	strex	r3, r2, [r1]
 8003110:	61bb      	str	r3, [r7, #24]
   return(result);
 8003112:	69bb      	ldr	r3, [r7, #24]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d1e5      	bne.n	80030e4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2220      	movs	r2, #32
 800311c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2220      	movs	r2, #32
 8003124:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2220      	movs	r2, #32
 800312c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e010      	b.n	800315e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	69da      	ldr	r2, [r3, #28]
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	4013      	ands	r3, r2
 8003146:	68ba      	ldr	r2, [r7, #8]
 8003148:	429a      	cmp	r2, r3
 800314a:	bf0c      	ite	eq
 800314c:	2301      	moveq	r3, #1
 800314e:	2300      	movne	r3, #0
 8003150:	b2db      	uxtb	r3, r3
 8003152:	461a      	mov	r2, r3
 8003154:	79fb      	ldrb	r3, [r7, #7]
 8003156:	429a      	cmp	r2, r3
 8003158:	f43f af46 	beq.w	8002fe8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800315c:	2300      	movs	r3, #0
}
 800315e:	4618      	mov	r0, r3
 8003160:	3770      	adds	r7, #112	; 0x70
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}

08003166 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003166:	b480      	push	{r7}
 8003168:	b085      	sub	sp, #20
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003174:	2b01      	cmp	r3, #1
 8003176:	d101      	bne.n	800317c <HAL_UARTEx_DisableFifoMode+0x16>
 8003178:	2302      	movs	r3, #2
 800317a:	e027      	b.n	80031cc <HAL_UARTEx_DisableFifoMode+0x66>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2224      	movs	r2, #36	; 0x24
 8003188:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f022 0201 	bic.w	r2, r2, #1
 80031a2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80031aa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	68fa      	ldr	r2, [r7, #12]
 80031b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2220      	movs	r2, #32
 80031be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80031ca:	2300      	movs	r3, #0
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3714      	adds	r7, #20
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bc80      	pop	{r7}
 80031d4:	4770      	bx	lr

080031d6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b084      	sub	sp, #16
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
 80031de:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d101      	bne.n	80031ee <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80031ea:	2302      	movs	r3, #2
 80031ec:	e02d      	b.n	800324a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2201      	movs	r2, #1
 80031f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2224      	movs	r2, #36	; 0x24
 80031fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f022 0201 	bic.w	r2, r2, #1
 8003214:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	683a      	ldr	r2, [r7, #0]
 8003226:	430a      	orrs	r2, r1
 8003228:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f000 f850 	bl	80032d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	68fa      	ldr	r2, [r7, #12]
 8003236:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2220      	movs	r2, #32
 800323c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	3710      	adds	r7, #16
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}

08003252 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003252:	b580      	push	{r7, lr}
 8003254:	b084      	sub	sp, #16
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
 800325a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003262:	2b01      	cmp	r3, #1
 8003264:	d101      	bne.n	800326a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003266:	2302      	movs	r3, #2
 8003268:	e02d      	b.n	80032c6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2201      	movs	r2, #1
 800326e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2224      	movs	r2, #36	; 0x24
 8003276:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f022 0201 	bic.w	r2, r2, #1
 8003290:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	683a      	ldr	r2, [r7, #0]
 80032a2:	430a      	orrs	r2, r1
 80032a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 f812 	bl	80032d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2220      	movs	r2, #32
 80032b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3710      	adds	r7, #16
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
	...

080032d0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b085      	sub	sp, #20
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d108      	bne.n	80032f2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80032f0:	e031      	b.n	8003356 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80032f2:	2308      	movs	r3, #8
 80032f4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80032f6:	2308      	movs	r3, #8
 80032f8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	0e5b      	lsrs	r3, r3, #25
 8003302:	b2db      	uxtb	r3, r3
 8003304:	f003 0307 	and.w	r3, r3, #7
 8003308:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	0f5b      	lsrs	r3, r3, #29
 8003312:	b2db      	uxtb	r3, r3
 8003314:	f003 0307 	and.w	r3, r3, #7
 8003318:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800331a:	7bbb      	ldrb	r3, [r7, #14]
 800331c:	7b3a      	ldrb	r2, [r7, #12]
 800331e:	4910      	ldr	r1, [pc, #64]	; (8003360 <UARTEx_SetNbDataToProcess+0x90>)
 8003320:	5c8a      	ldrb	r2, [r1, r2]
 8003322:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003326:	7b3a      	ldrb	r2, [r7, #12]
 8003328:	490e      	ldr	r1, [pc, #56]	; (8003364 <UARTEx_SetNbDataToProcess+0x94>)
 800332a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800332c:	fb93 f3f2 	sdiv	r3, r3, r2
 8003330:	b29a      	uxth	r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003338:	7bfb      	ldrb	r3, [r7, #15]
 800333a:	7b7a      	ldrb	r2, [r7, #13]
 800333c:	4908      	ldr	r1, [pc, #32]	; (8003360 <UARTEx_SetNbDataToProcess+0x90>)
 800333e:	5c8a      	ldrb	r2, [r1, r2]
 8003340:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003344:	7b7a      	ldrb	r2, [r7, #13]
 8003346:	4907      	ldr	r1, [pc, #28]	; (8003364 <UARTEx_SetNbDataToProcess+0x94>)
 8003348:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800334a:	fb93 f3f2 	sdiv	r3, r3, r2
 800334e:	b29a      	uxth	r2, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003356:	bf00      	nop
 8003358:	3714      	adds	r7, #20
 800335a:	46bd      	mov	sp, r7
 800335c:	bc80      	pop	{r7}
 800335e:	4770      	bx	lr
 8003360:	08004444 	.word	0x08004444
 8003364:	0800444c 	.word	0x0800444c

08003368 <__errno>:
 8003368:	4b01      	ldr	r3, [pc, #4]	; (8003370 <__errno+0x8>)
 800336a:	6818      	ldr	r0, [r3, #0]
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	20000018 	.word	0x20000018

08003374 <__libc_init_array>:
 8003374:	b570      	push	{r4, r5, r6, lr}
 8003376:	4d0d      	ldr	r5, [pc, #52]	; (80033ac <__libc_init_array+0x38>)
 8003378:	4c0d      	ldr	r4, [pc, #52]	; (80033b0 <__libc_init_array+0x3c>)
 800337a:	1b64      	subs	r4, r4, r5
 800337c:	10a4      	asrs	r4, r4, #2
 800337e:	2600      	movs	r6, #0
 8003380:	42a6      	cmp	r6, r4
 8003382:	d109      	bne.n	8003398 <__libc_init_array+0x24>
 8003384:	4d0b      	ldr	r5, [pc, #44]	; (80033b4 <__libc_init_array+0x40>)
 8003386:	4c0c      	ldr	r4, [pc, #48]	; (80033b8 <__libc_init_array+0x44>)
 8003388:	f000 ffa6 	bl	80042d8 <_init>
 800338c:	1b64      	subs	r4, r4, r5
 800338e:	10a4      	asrs	r4, r4, #2
 8003390:	2600      	movs	r6, #0
 8003392:	42a6      	cmp	r6, r4
 8003394:	d105      	bne.n	80033a2 <__libc_init_array+0x2e>
 8003396:	bd70      	pop	{r4, r5, r6, pc}
 8003398:	f855 3b04 	ldr.w	r3, [r5], #4
 800339c:	4798      	blx	r3
 800339e:	3601      	adds	r6, #1
 80033a0:	e7ee      	b.n	8003380 <__libc_init_array+0xc>
 80033a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80033a6:	4798      	blx	r3
 80033a8:	3601      	adds	r6, #1
 80033aa:	e7f2      	b.n	8003392 <__libc_init_array+0x1e>
 80033ac:	080044f8 	.word	0x080044f8
 80033b0:	080044f8 	.word	0x080044f8
 80033b4:	080044f8 	.word	0x080044f8
 80033b8:	080044fc 	.word	0x080044fc

080033bc <memset>:
 80033bc:	4402      	add	r2, r0
 80033be:	4603      	mov	r3, r0
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d100      	bne.n	80033c6 <memset+0xa>
 80033c4:	4770      	bx	lr
 80033c6:	f803 1b01 	strb.w	r1, [r3], #1
 80033ca:	e7f9      	b.n	80033c0 <memset+0x4>

080033cc <iprintf>:
 80033cc:	b40f      	push	{r0, r1, r2, r3}
 80033ce:	4b0a      	ldr	r3, [pc, #40]	; (80033f8 <iprintf+0x2c>)
 80033d0:	b513      	push	{r0, r1, r4, lr}
 80033d2:	681c      	ldr	r4, [r3, #0]
 80033d4:	b124      	cbz	r4, 80033e0 <iprintf+0x14>
 80033d6:	69a3      	ldr	r3, [r4, #24]
 80033d8:	b913      	cbnz	r3, 80033e0 <iprintf+0x14>
 80033da:	4620      	mov	r0, r4
 80033dc:	f000 f866 	bl	80034ac <__sinit>
 80033e0:	ab05      	add	r3, sp, #20
 80033e2:	9a04      	ldr	r2, [sp, #16]
 80033e4:	68a1      	ldr	r1, [r4, #8]
 80033e6:	9301      	str	r3, [sp, #4]
 80033e8:	4620      	mov	r0, r4
 80033ea:	f000 f9bb 	bl	8003764 <_vfiprintf_r>
 80033ee:	b002      	add	sp, #8
 80033f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033f4:	b004      	add	sp, #16
 80033f6:	4770      	bx	lr
 80033f8:	20000018 	.word	0x20000018

080033fc <std>:
 80033fc:	2300      	movs	r3, #0
 80033fe:	b510      	push	{r4, lr}
 8003400:	4604      	mov	r4, r0
 8003402:	e9c0 3300 	strd	r3, r3, [r0]
 8003406:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800340a:	6083      	str	r3, [r0, #8]
 800340c:	8181      	strh	r1, [r0, #12]
 800340e:	6643      	str	r3, [r0, #100]	; 0x64
 8003410:	81c2      	strh	r2, [r0, #14]
 8003412:	6183      	str	r3, [r0, #24]
 8003414:	4619      	mov	r1, r3
 8003416:	2208      	movs	r2, #8
 8003418:	305c      	adds	r0, #92	; 0x5c
 800341a:	f7ff ffcf 	bl	80033bc <memset>
 800341e:	4b05      	ldr	r3, [pc, #20]	; (8003434 <std+0x38>)
 8003420:	6263      	str	r3, [r4, #36]	; 0x24
 8003422:	4b05      	ldr	r3, [pc, #20]	; (8003438 <std+0x3c>)
 8003424:	62a3      	str	r3, [r4, #40]	; 0x28
 8003426:	4b05      	ldr	r3, [pc, #20]	; (800343c <std+0x40>)
 8003428:	62e3      	str	r3, [r4, #44]	; 0x2c
 800342a:	4b05      	ldr	r3, [pc, #20]	; (8003440 <std+0x44>)
 800342c:	6224      	str	r4, [r4, #32]
 800342e:	6323      	str	r3, [r4, #48]	; 0x30
 8003430:	bd10      	pop	{r4, pc}
 8003432:	bf00      	nop
 8003434:	08003d0d 	.word	0x08003d0d
 8003438:	08003d2f 	.word	0x08003d2f
 800343c:	08003d67 	.word	0x08003d67
 8003440:	08003d8b 	.word	0x08003d8b

08003444 <_cleanup_r>:
 8003444:	4901      	ldr	r1, [pc, #4]	; (800344c <_cleanup_r+0x8>)
 8003446:	f000 b8af 	b.w	80035a8 <_fwalk_reent>
 800344a:	bf00      	nop
 800344c:	0800405d 	.word	0x0800405d

08003450 <__sfmoreglue>:
 8003450:	b570      	push	{r4, r5, r6, lr}
 8003452:	2268      	movs	r2, #104	; 0x68
 8003454:	1e4d      	subs	r5, r1, #1
 8003456:	4355      	muls	r5, r2
 8003458:	460e      	mov	r6, r1
 800345a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800345e:	f000 f8e5 	bl	800362c <_malloc_r>
 8003462:	4604      	mov	r4, r0
 8003464:	b140      	cbz	r0, 8003478 <__sfmoreglue+0x28>
 8003466:	2100      	movs	r1, #0
 8003468:	e9c0 1600 	strd	r1, r6, [r0]
 800346c:	300c      	adds	r0, #12
 800346e:	60a0      	str	r0, [r4, #8]
 8003470:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003474:	f7ff ffa2 	bl	80033bc <memset>
 8003478:	4620      	mov	r0, r4
 800347a:	bd70      	pop	{r4, r5, r6, pc}

0800347c <__sfp_lock_acquire>:
 800347c:	4801      	ldr	r0, [pc, #4]	; (8003484 <__sfp_lock_acquire+0x8>)
 800347e:	f000 b8b3 	b.w	80035e8 <__retarget_lock_acquire_recursive>
 8003482:	bf00      	nop
 8003484:	2000013d 	.word	0x2000013d

08003488 <__sfp_lock_release>:
 8003488:	4801      	ldr	r0, [pc, #4]	; (8003490 <__sfp_lock_release+0x8>)
 800348a:	f000 b8ae 	b.w	80035ea <__retarget_lock_release_recursive>
 800348e:	bf00      	nop
 8003490:	2000013d 	.word	0x2000013d

08003494 <__sinit_lock_acquire>:
 8003494:	4801      	ldr	r0, [pc, #4]	; (800349c <__sinit_lock_acquire+0x8>)
 8003496:	f000 b8a7 	b.w	80035e8 <__retarget_lock_acquire_recursive>
 800349a:	bf00      	nop
 800349c:	2000013e 	.word	0x2000013e

080034a0 <__sinit_lock_release>:
 80034a0:	4801      	ldr	r0, [pc, #4]	; (80034a8 <__sinit_lock_release+0x8>)
 80034a2:	f000 b8a2 	b.w	80035ea <__retarget_lock_release_recursive>
 80034a6:	bf00      	nop
 80034a8:	2000013e 	.word	0x2000013e

080034ac <__sinit>:
 80034ac:	b510      	push	{r4, lr}
 80034ae:	4604      	mov	r4, r0
 80034b0:	f7ff fff0 	bl	8003494 <__sinit_lock_acquire>
 80034b4:	69a3      	ldr	r3, [r4, #24]
 80034b6:	b11b      	cbz	r3, 80034c0 <__sinit+0x14>
 80034b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034bc:	f7ff bff0 	b.w	80034a0 <__sinit_lock_release>
 80034c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80034c4:	6523      	str	r3, [r4, #80]	; 0x50
 80034c6:	4b13      	ldr	r3, [pc, #76]	; (8003514 <__sinit+0x68>)
 80034c8:	4a13      	ldr	r2, [pc, #76]	; (8003518 <__sinit+0x6c>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	62a2      	str	r2, [r4, #40]	; 0x28
 80034ce:	42a3      	cmp	r3, r4
 80034d0:	bf04      	itt	eq
 80034d2:	2301      	moveq	r3, #1
 80034d4:	61a3      	streq	r3, [r4, #24]
 80034d6:	4620      	mov	r0, r4
 80034d8:	f000 f820 	bl	800351c <__sfp>
 80034dc:	6060      	str	r0, [r4, #4]
 80034de:	4620      	mov	r0, r4
 80034e0:	f000 f81c 	bl	800351c <__sfp>
 80034e4:	60a0      	str	r0, [r4, #8]
 80034e6:	4620      	mov	r0, r4
 80034e8:	f000 f818 	bl	800351c <__sfp>
 80034ec:	2200      	movs	r2, #0
 80034ee:	60e0      	str	r0, [r4, #12]
 80034f0:	2104      	movs	r1, #4
 80034f2:	6860      	ldr	r0, [r4, #4]
 80034f4:	f7ff ff82 	bl	80033fc <std>
 80034f8:	68a0      	ldr	r0, [r4, #8]
 80034fa:	2201      	movs	r2, #1
 80034fc:	2109      	movs	r1, #9
 80034fe:	f7ff ff7d 	bl	80033fc <std>
 8003502:	68e0      	ldr	r0, [r4, #12]
 8003504:	2202      	movs	r2, #2
 8003506:	2112      	movs	r1, #18
 8003508:	f7ff ff78 	bl	80033fc <std>
 800350c:	2301      	movs	r3, #1
 800350e:	61a3      	str	r3, [r4, #24]
 8003510:	e7d2      	b.n	80034b8 <__sinit+0xc>
 8003512:	bf00      	nop
 8003514:	08004454 	.word	0x08004454
 8003518:	08003445 	.word	0x08003445

0800351c <__sfp>:
 800351c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800351e:	4607      	mov	r7, r0
 8003520:	f7ff ffac 	bl	800347c <__sfp_lock_acquire>
 8003524:	4b1e      	ldr	r3, [pc, #120]	; (80035a0 <__sfp+0x84>)
 8003526:	681e      	ldr	r6, [r3, #0]
 8003528:	69b3      	ldr	r3, [r6, #24]
 800352a:	b913      	cbnz	r3, 8003532 <__sfp+0x16>
 800352c:	4630      	mov	r0, r6
 800352e:	f7ff ffbd 	bl	80034ac <__sinit>
 8003532:	3648      	adds	r6, #72	; 0x48
 8003534:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003538:	3b01      	subs	r3, #1
 800353a:	d503      	bpl.n	8003544 <__sfp+0x28>
 800353c:	6833      	ldr	r3, [r6, #0]
 800353e:	b30b      	cbz	r3, 8003584 <__sfp+0x68>
 8003540:	6836      	ldr	r6, [r6, #0]
 8003542:	e7f7      	b.n	8003534 <__sfp+0x18>
 8003544:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003548:	b9d5      	cbnz	r5, 8003580 <__sfp+0x64>
 800354a:	4b16      	ldr	r3, [pc, #88]	; (80035a4 <__sfp+0x88>)
 800354c:	60e3      	str	r3, [r4, #12]
 800354e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003552:	6665      	str	r5, [r4, #100]	; 0x64
 8003554:	f000 f847 	bl	80035e6 <__retarget_lock_init_recursive>
 8003558:	f7ff ff96 	bl	8003488 <__sfp_lock_release>
 800355c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003560:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003564:	6025      	str	r5, [r4, #0]
 8003566:	61a5      	str	r5, [r4, #24]
 8003568:	2208      	movs	r2, #8
 800356a:	4629      	mov	r1, r5
 800356c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003570:	f7ff ff24 	bl	80033bc <memset>
 8003574:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003578:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800357c:	4620      	mov	r0, r4
 800357e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003580:	3468      	adds	r4, #104	; 0x68
 8003582:	e7d9      	b.n	8003538 <__sfp+0x1c>
 8003584:	2104      	movs	r1, #4
 8003586:	4638      	mov	r0, r7
 8003588:	f7ff ff62 	bl	8003450 <__sfmoreglue>
 800358c:	4604      	mov	r4, r0
 800358e:	6030      	str	r0, [r6, #0]
 8003590:	2800      	cmp	r0, #0
 8003592:	d1d5      	bne.n	8003540 <__sfp+0x24>
 8003594:	f7ff ff78 	bl	8003488 <__sfp_lock_release>
 8003598:	230c      	movs	r3, #12
 800359a:	603b      	str	r3, [r7, #0]
 800359c:	e7ee      	b.n	800357c <__sfp+0x60>
 800359e:	bf00      	nop
 80035a0:	08004454 	.word	0x08004454
 80035a4:	ffff0001 	.word	0xffff0001

080035a8 <_fwalk_reent>:
 80035a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80035ac:	4606      	mov	r6, r0
 80035ae:	4688      	mov	r8, r1
 80035b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80035b4:	2700      	movs	r7, #0
 80035b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80035ba:	f1b9 0901 	subs.w	r9, r9, #1
 80035be:	d505      	bpl.n	80035cc <_fwalk_reent+0x24>
 80035c0:	6824      	ldr	r4, [r4, #0]
 80035c2:	2c00      	cmp	r4, #0
 80035c4:	d1f7      	bne.n	80035b6 <_fwalk_reent+0xe>
 80035c6:	4638      	mov	r0, r7
 80035c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80035cc:	89ab      	ldrh	r3, [r5, #12]
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d907      	bls.n	80035e2 <_fwalk_reent+0x3a>
 80035d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80035d6:	3301      	adds	r3, #1
 80035d8:	d003      	beq.n	80035e2 <_fwalk_reent+0x3a>
 80035da:	4629      	mov	r1, r5
 80035dc:	4630      	mov	r0, r6
 80035de:	47c0      	blx	r8
 80035e0:	4307      	orrs	r7, r0
 80035e2:	3568      	adds	r5, #104	; 0x68
 80035e4:	e7e9      	b.n	80035ba <_fwalk_reent+0x12>

080035e6 <__retarget_lock_init_recursive>:
 80035e6:	4770      	bx	lr

080035e8 <__retarget_lock_acquire_recursive>:
 80035e8:	4770      	bx	lr

080035ea <__retarget_lock_release_recursive>:
 80035ea:	4770      	bx	lr

080035ec <sbrk_aligned>:
 80035ec:	b570      	push	{r4, r5, r6, lr}
 80035ee:	4e0e      	ldr	r6, [pc, #56]	; (8003628 <sbrk_aligned+0x3c>)
 80035f0:	460c      	mov	r4, r1
 80035f2:	6831      	ldr	r1, [r6, #0]
 80035f4:	4605      	mov	r5, r0
 80035f6:	b911      	cbnz	r1, 80035fe <sbrk_aligned+0x12>
 80035f8:	f000 fb78 	bl	8003cec <_sbrk_r>
 80035fc:	6030      	str	r0, [r6, #0]
 80035fe:	4621      	mov	r1, r4
 8003600:	4628      	mov	r0, r5
 8003602:	f000 fb73 	bl	8003cec <_sbrk_r>
 8003606:	1c43      	adds	r3, r0, #1
 8003608:	d00a      	beq.n	8003620 <sbrk_aligned+0x34>
 800360a:	1cc4      	adds	r4, r0, #3
 800360c:	f024 0403 	bic.w	r4, r4, #3
 8003610:	42a0      	cmp	r0, r4
 8003612:	d007      	beq.n	8003624 <sbrk_aligned+0x38>
 8003614:	1a21      	subs	r1, r4, r0
 8003616:	4628      	mov	r0, r5
 8003618:	f000 fb68 	bl	8003cec <_sbrk_r>
 800361c:	3001      	adds	r0, #1
 800361e:	d101      	bne.n	8003624 <sbrk_aligned+0x38>
 8003620:	f04f 34ff 	mov.w	r4, #4294967295
 8003624:	4620      	mov	r0, r4
 8003626:	bd70      	pop	{r4, r5, r6, pc}
 8003628:	20000144 	.word	0x20000144

0800362c <_malloc_r>:
 800362c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003630:	1ccd      	adds	r5, r1, #3
 8003632:	f025 0503 	bic.w	r5, r5, #3
 8003636:	3508      	adds	r5, #8
 8003638:	2d0c      	cmp	r5, #12
 800363a:	bf38      	it	cc
 800363c:	250c      	movcc	r5, #12
 800363e:	2d00      	cmp	r5, #0
 8003640:	4607      	mov	r7, r0
 8003642:	db01      	blt.n	8003648 <_malloc_r+0x1c>
 8003644:	42a9      	cmp	r1, r5
 8003646:	d905      	bls.n	8003654 <_malloc_r+0x28>
 8003648:	230c      	movs	r3, #12
 800364a:	603b      	str	r3, [r7, #0]
 800364c:	2600      	movs	r6, #0
 800364e:	4630      	mov	r0, r6
 8003650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003654:	4e2e      	ldr	r6, [pc, #184]	; (8003710 <_malloc_r+0xe4>)
 8003656:	f000 fdb5 	bl	80041c4 <__malloc_lock>
 800365a:	6833      	ldr	r3, [r6, #0]
 800365c:	461c      	mov	r4, r3
 800365e:	bb34      	cbnz	r4, 80036ae <_malloc_r+0x82>
 8003660:	4629      	mov	r1, r5
 8003662:	4638      	mov	r0, r7
 8003664:	f7ff ffc2 	bl	80035ec <sbrk_aligned>
 8003668:	1c43      	adds	r3, r0, #1
 800366a:	4604      	mov	r4, r0
 800366c:	d14d      	bne.n	800370a <_malloc_r+0xde>
 800366e:	6834      	ldr	r4, [r6, #0]
 8003670:	4626      	mov	r6, r4
 8003672:	2e00      	cmp	r6, #0
 8003674:	d140      	bne.n	80036f8 <_malloc_r+0xcc>
 8003676:	6823      	ldr	r3, [r4, #0]
 8003678:	4631      	mov	r1, r6
 800367a:	4638      	mov	r0, r7
 800367c:	eb04 0803 	add.w	r8, r4, r3
 8003680:	f000 fb34 	bl	8003cec <_sbrk_r>
 8003684:	4580      	cmp	r8, r0
 8003686:	d13a      	bne.n	80036fe <_malloc_r+0xd2>
 8003688:	6821      	ldr	r1, [r4, #0]
 800368a:	3503      	adds	r5, #3
 800368c:	1a6d      	subs	r5, r5, r1
 800368e:	f025 0503 	bic.w	r5, r5, #3
 8003692:	3508      	adds	r5, #8
 8003694:	2d0c      	cmp	r5, #12
 8003696:	bf38      	it	cc
 8003698:	250c      	movcc	r5, #12
 800369a:	4629      	mov	r1, r5
 800369c:	4638      	mov	r0, r7
 800369e:	f7ff ffa5 	bl	80035ec <sbrk_aligned>
 80036a2:	3001      	adds	r0, #1
 80036a4:	d02b      	beq.n	80036fe <_malloc_r+0xd2>
 80036a6:	6823      	ldr	r3, [r4, #0]
 80036a8:	442b      	add	r3, r5
 80036aa:	6023      	str	r3, [r4, #0]
 80036ac:	e00e      	b.n	80036cc <_malloc_r+0xa0>
 80036ae:	6822      	ldr	r2, [r4, #0]
 80036b0:	1b52      	subs	r2, r2, r5
 80036b2:	d41e      	bmi.n	80036f2 <_malloc_r+0xc6>
 80036b4:	2a0b      	cmp	r2, #11
 80036b6:	d916      	bls.n	80036e6 <_malloc_r+0xba>
 80036b8:	1961      	adds	r1, r4, r5
 80036ba:	42a3      	cmp	r3, r4
 80036bc:	6025      	str	r5, [r4, #0]
 80036be:	bf18      	it	ne
 80036c0:	6059      	strne	r1, [r3, #4]
 80036c2:	6863      	ldr	r3, [r4, #4]
 80036c4:	bf08      	it	eq
 80036c6:	6031      	streq	r1, [r6, #0]
 80036c8:	5162      	str	r2, [r4, r5]
 80036ca:	604b      	str	r3, [r1, #4]
 80036cc:	4638      	mov	r0, r7
 80036ce:	f104 060b 	add.w	r6, r4, #11
 80036d2:	f000 fd7d 	bl	80041d0 <__malloc_unlock>
 80036d6:	f026 0607 	bic.w	r6, r6, #7
 80036da:	1d23      	adds	r3, r4, #4
 80036dc:	1af2      	subs	r2, r6, r3
 80036de:	d0b6      	beq.n	800364e <_malloc_r+0x22>
 80036e0:	1b9b      	subs	r3, r3, r6
 80036e2:	50a3      	str	r3, [r4, r2]
 80036e4:	e7b3      	b.n	800364e <_malloc_r+0x22>
 80036e6:	6862      	ldr	r2, [r4, #4]
 80036e8:	42a3      	cmp	r3, r4
 80036ea:	bf0c      	ite	eq
 80036ec:	6032      	streq	r2, [r6, #0]
 80036ee:	605a      	strne	r2, [r3, #4]
 80036f0:	e7ec      	b.n	80036cc <_malloc_r+0xa0>
 80036f2:	4623      	mov	r3, r4
 80036f4:	6864      	ldr	r4, [r4, #4]
 80036f6:	e7b2      	b.n	800365e <_malloc_r+0x32>
 80036f8:	4634      	mov	r4, r6
 80036fa:	6876      	ldr	r6, [r6, #4]
 80036fc:	e7b9      	b.n	8003672 <_malloc_r+0x46>
 80036fe:	230c      	movs	r3, #12
 8003700:	603b      	str	r3, [r7, #0]
 8003702:	4638      	mov	r0, r7
 8003704:	f000 fd64 	bl	80041d0 <__malloc_unlock>
 8003708:	e7a1      	b.n	800364e <_malloc_r+0x22>
 800370a:	6025      	str	r5, [r4, #0]
 800370c:	e7de      	b.n	80036cc <_malloc_r+0xa0>
 800370e:	bf00      	nop
 8003710:	20000140 	.word	0x20000140

08003714 <__sfputc_r>:
 8003714:	6893      	ldr	r3, [r2, #8]
 8003716:	3b01      	subs	r3, #1
 8003718:	2b00      	cmp	r3, #0
 800371a:	b410      	push	{r4}
 800371c:	6093      	str	r3, [r2, #8]
 800371e:	da07      	bge.n	8003730 <__sfputc_r+0x1c>
 8003720:	6994      	ldr	r4, [r2, #24]
 8003722:	42a3      	cmp	r3, r4
 8003724:	db01      	blt.n	800372a <__sfputc_r+0x16>
 8003726:	290a      	cmp	r1, #10
 8003728:	d102      	bne.n	8003730 <__sfputc_r+0x1c>
 800372a:	bc10      	pop	{r4}
 800372c:	f000 bb32 	b.w	8003d94 <__swbuf_r>
 8003730:	6813      	ldr	r3, [r2, #0]
 8003732:	1c58      	adds	r0, r3, #1
 8003734:	6010      	str	r0, [r2, #0]
 8003736:	7019      	strb	r1, [r3, #0]
 8003738:	4608      	mov	r0, r1
 800373a:	bc10      	pop	{r4}
 800373c:	4770      	bx	lr

0800373e <__sfputs_r>:
 800373e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003740:	4606      	mov	r6, r0
 8003742:	460f      	mov	r7, r1
 8003744:	4614      	mov	r4, r2
 8003746:	18d5      	adds	r5, r2, r3
 8003748:	42ac      	cmp	r4, r5
 800374a:	d101      	bne.n	8003750 <__sfputs_r+0x12>
 800374c:	2000      	movs	r0, #0
 800374e:	e007      	b.n	8003760 <__sfputs_r+0x22>
 8003750:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003754:	463a      	mov	r2, r7
 8003756:	4630      	mov	r0, r6
 8003758:	f7ff ffdc 	bl	8003714 <__sfputc_r>
 800375c:	1c43      	adds	r3, r0, #1
 800375e:	d1f3      	bne.n	8003748 <__sfputs_r+0xa>
 8003760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003764 <_vfiprintf_r>:
 8003764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003768:	460d      	mov	r5, r1
 800376a:	b09d      	sub	sp, #116	; 0x74
 800376c:	4614      	mov	r4, r2
 800376e:	4698      	mov	r8, r3
 8003770:	4606      	mov	r6, r0
 8003772:	b118      	cbz	r0, 800377c <_vfiprintf_r+0x18>
 8003774:	6983      	ldr	r3, [r0, #24]
 8003776:	b90b      	cbnz	r3, 800377c <_vfiprintf_r+0x18>
 8003778:	f7ff fe98 	bl	80034ac <__sinit>
 800377c:	4b89      	ldr	r3, [pc, #548]	; (80039a4 <_vfiprintf_r+0x240>)
 800377e:	429d      	cmp	r5, r3
 8003780:	d11b      	bne.n	80037ba <_vfiprintf_r+0x56>
 8003782:	6875      	ldr	r5, [r6, #4]
 8003784:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003786:	07d9      	lsls	r1, r3, #31
 8003788:	d405      	bmi.n	8003796 <_vfiprintf_r+0x32>
 800378a:	89ab      	ldrh	r3, [r5, #12]
 800378c:	059a      	lsls	r2, r3, #22
 800378e:	d402      	bmi.n	8003796 <_vfiprintf_r+0x32>
 8003790:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003792:	f7ff ff29 	bl	80035e8 <__retarget_lock_acquire_recursive>
 8003796:	89ab      	ldrh	r3, [r5, #12]
 8003798:	071b      	lsls	r3, r3, #28
 800379a:	d501      	bpl.n	80037a0 <_vfiprintf_r+0x3c>
 800379c:	692b      	ldr	r3, [r5, #16]
 800379e:	b9eb      	cbnz	r3, 80037dc <_vfiprintf_r+0x78>
 80037a0:	4629      	mov	r1, r5
 80037a2:	4630      	mov	r0, r6
 80037a4:	f000 fb5a 	bl	8003e5c <__swsetup_r>
 80037a8:	b1c0      	cbz	r0, 80037dc <_vfiprintf_r+0x78>
 80037aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80037ac:	07dc      	lsls	r4, r3, #31
 80037ae:	d50e      	bpl.n	80037ce <_vfiprintf_r+0x6a>
 80037b0:	f04f 30ff 	mov.w	r0, #4294967295
 80037b4:	b01d      	add	sp, #116	; 0x74
 80037b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037ba:	4b7b      	ldr	r3, [pc, #492]	; (80039a8 <_vfiprintf_r+0x244>)
 80037bc:	429d      	cmp	r5, r3
 80037be:	d101      	bne.n	80037c4 <_vfiprintf_r+0x60>
 80037c0:	68b5      	ldr	r5, [r6, #8]
 80037c2:	e7df      	b.n	8003784 <_vfiprintf_r+0x20>
 80037c4:	4b79      	ldr	r3, [pc, #484]	; (80039ac <_vfiprintf_r+0x248>)
 80037c6:	429d      	cmp	r5, r3
 80037c8:	bf08      	it	eq
 80037ca:	68f5      	ldreq	r5, [r6, #12]
 80037cc:	e7da      	b.n	8003784 <_vfiprintf_r+0x20>
 80037ce:	89ab      	ldrh	r3, [r5, #12]
 80037d0:	0598      	lsls	r0, r3, #22
 80037d2:	d4ed      	bmi.n	80037b0 <_vfiprintf_r+0x4c>
 80037d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80037d6:	f7ff ff08 	bl	80035ea <__retarget_lock_release_recursive>
 80037da:	e7e9      	b.n	80037b0 <_vfiprintf_r+0x4c>
 80037dc:	2300      	movs	r3, #0
 80037de:	9309      	str	r3, [sp, #36]	; 0x24
 80037e0:	2320      	movs	r3, #32
 80037e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80037e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80037ea:	2330      	movs	r3, #48	; 0x30
 80037ec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80039b0 <_vfiprintf_r+0x24c>
 80037f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80037f4:	f04f 0901 	mov.w	r9, #1
 80037f8:	4623      	mov	r3, r4
 80037fa:	469a      	mov	sl, r3
 80037fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003800:	b10a      	cbz	r2, 8003806 <_vfiprintf_r+0xa2>
 8003802:	2a25      	cmp	r2, #37	; 0x25
 8003804:	d1f9      	bne.n	80037fa <_vfiprintf_r+0x96>
 8003806:	ebba 0b04 	subs.w	fp, sl, r4
 800380a:	d00b      	beq.n	8003824 <_vfiprintf_r+0xc0>
 800380c:	465b      	mov	r3, fp
 800380e:	4622      	mov	r2, r4
 8003810:	4629      	mov	r1, r5
 8003812:	4630      	mov	r0, r6
 8003814:	f7ff ff93 	bl	800373e <__sfputs_r>
 8003818:	3001      	adds	r0, #1
 800381a:	f000 80aa 	beq.w	8003972 <_vfiprintf_r+0x20e>
 800381e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003820:	445a      	add	r2, fp
 8003822:	9209      	str	r2, [sp, #36]	; 0x24
 8003824:	f89a 3000 	ldrb.w	r3, [sl]
 8003828:	2b00      	cmp	r3, #0
 800382a:	f000 80a2 	beq.w	8003972 <_vfiprintf_r+0x20e>
 800382e:	2300      	movs	r3, #0
 8003830:	f04f 32ff 	mov.w	r2, #4294967295
 8003834:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003838:	f10a 0a01 	add.w	sl, sl, #1
 800383c:	9304      	str	r3, [sp, #16]
 800383e:	9307      	str	r3, [sp, #28]
 8003840:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003844:	931a      	str	r3, [sp, #104]	; 0x68
 8003846:	4654      	mov	r4, sl
 8003848:	2205      	movs	r2, #5
 800384a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800384e:	4858      	ldr	r0, [pc, #352]	; (80039b0 <_vfiprintf_r+0x24c>)
 8003850:	f7fc fc96 	bl	8000180 <memchr>
 8003854:	9a04      	ldr	r2, [sp, #16]
 8003856:	b9d8      	cbnz	r0, 8003890 <_vfiprintf_r+0x12c>
 8003858:	06d1      	lsls	r1, r2, #27
 800385a:	bf44      	itt	mi
 800385c:	2320      	movmi	r3, #32
 800385e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003862:	0713      	lsls	r3, r2, #28
 8003864:	bf44      	itt	mi
 8003866:	232b      	movmi	r3, #43	; 0x2b
 8003868:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800386c:	f89a 3000 	ldrb.w	r3, [sl]
 8003870:	2b2a      	cmp	r3, #42	; 0x2a
 8003872:	d015      	beq.n	80038a0 <_vfiprintf_r+0x13c>
 8003874:	9a07      	ldr	r2, [sp, #28]
 8003876:	4654      	mov	r4, sl
 8003878:	2000      	movs	r0, #0
 800387a:	f04f 0c0a 	mov.w	ip, #10
 800387e:	4621      	mov	r1, r4
 8003880:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003884:	3b30      	subs	r3, #48	; 0x30
 8003886:	2b09      	cmp	r3, #9
 8003888:	d94e      	bls.n	8003928 <_vfiprintf_r+0x1c4>
 800388a:	b1b0      	cbz	r0, 80038ba <_vfiprintf_r+0x156>
 800388c:	9207      	str	r2, [sp, #28]
 800388e:	e014      	b.n	80038ba <_vfiprintf_r+0x156>
 8003890:	eba0 0308 	sub.w	r3, r0, r8
 8003894:	fa09 f303 	lsl.w	r3, r9, r3
 8003898:	4313      	orrs	r3, r2
 800389a:	9304      	str	r3, [sp, #16]
 800389c:	46a2      	mov	sl, r4
 800389e:	e7d2      	b.n	8003846 <_vfiprintf_r+0xe2>
 80038a0:	9b03      	ldr	r3, [sp, #12]
 80038a2:	1d19      	adds	r1, r3, #4
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	9103      	str	r1, [sp, #12]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	bfbb      	ittet	lt
 80038ac:	425b      	neglt	r3, r3
 80038ae:	f042 0202 	orrlt.w	r2, r2, #2
 80038b2:	9307      	strge	r3, [sp, #28]
 80038b4:	9307      	strlt	r3, [sp, #28]
 80038b6:	bfb8      	it	lt
 80038b8:	9204      	strlt	r2, [sp, #16]
 80038ba:	7823      	ldrb	r3, [r4, #0]
 80038bc:	2b2e      	cmp	r3, #46	; 0x2e
 80038be:	d10c      	bne.n	80038da <_vfiprintf_r+0x176>
 80038c0:	7863      	ldrb	r3, [r4, #1]
 80038c2:	2b2a      	cmp	r3, #42	; 0x2a
 80038c4:	d135      	bne.n	8003932 <_vfiprintf_r+0x1ce>
 80038c6:	9b03      	ldr	r3, [sp, #12]
 80038c8:	1d1a      	adds	r2, r3, #4
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	9203      	str	r2, [sp, #12]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	bfb8      	it	lt
 80038d2:	f04f 33ff 	movlt.w	r3, #4294967295
 80038d6:	3402      	adds	r4, #2
 80038d8:	9305      	str	r3, [sp, #20]
 80038da:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80039b4 <_vfiprintf_r+0x250>
 80038de:	7821      	ldrb	r1, [r4, #0]
 80038e0:	2203      	movs	r2, #3
 80038e2:	4650      	mov	r0, sl
 80038e4:	f7fc fc4c 	bl	8000180 <memchr>
 80038e8:	b140      	cbz	r0, 80038fc <_vfiprintf_r+0x198>
 80038ea:	2340      	movs	r3, #64	; 0x40
 80038ec:	eba0 000a 	sub.w	r0, r0, sl
 80038f0:	fa03 f000 	lsl.w	r0, r3, r0
 80038f4:	9b04      	ldr	r3, [sp, #16]
 80038f6:	4303      	orrs	r3, r0
 80038f8:	3401      	adds	r4, #1
 80038fa:	9304      	str	r3, [sp, #16]
 80038fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003900:	482d      	ldr	r0, [pc, #180]	; (80039b8 <_vfiprintf_r+0x254>)
 8003902:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003906:	2206      	movs	r2, #6
 8003908:	f7fc fc3a 	bl	8000180 <memchr>
 800390c:	2800      	cmp	r0, #0
 800390e:	d03f      	beq.n	8003990 <_vfiprintf_r+0x22c>
 8003910:	4b2a      	ldr	r3, [pc, #168]	; (80039bc <_vfiprintf_r+0x258>)
 8003912:	bb1b      	cbnz	r3, 800395c <_vfiprintf_r+0x1f8>
 8003914:	9b03      	ldr	r3, [sp, #12]
 8003916:	3307      	adds	r3, #7
 8003918:	f023 0307 	bic.w	r3, r3, #7
 800391c:	3308      	adds	r3, #8
 800391e:	9303      	str	r3, [sp, #12]
 8003920:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003922:	443b      	add	r3, r7
 8003924:	9309      	str	r3, [sp, #36]	; 0x24
 8003926:	e767      	b.n	80037f8 <_vfiprintf_r+0x94>
 8003928:	fb0c 3202 	mla	r2, ip, r2, r3
 800392c:	460c      	mov	r4, r1
 800392e:	2001      	movs	r0, #1
 8003930:	e7a5      	b.n	800387e <_vfiprintf_r+0x11a>
 8003932:	2300      	movs	r3, #0
 8003934:	3401      	adds	r4, #1
 8003936:	9305      	str	r3, [sp, #20]
 8003938:	4619      	mov	r1, r3
 800393a:	f04f 0c0a 	mov.w	ip, #10
 800393e:	4620      	mov	r0, r4
 8003940:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003944:	3a30      	subs	r2, #48	; 0x30
 8003946:	2a09      	cmp	r2, #9
 8003948:	d903      	bls.n	8003952 <_vfiprintf_r+0x1ee>
 800394a:	2b00      	cmp	r3, #0
 800394c:	d0c5      	beq.n	80038da <_vfiprintf_r+0x176>
 800394e:	9105      	str	r1, [sp, #20]
 8003950:	e7c3      	b.n	80038da <_vfiprintf_r+0x176>
 8003952:	fb0c 2101 	mla	r1, ip, r1, r2
 8003956:	4604      	mov	r4, r0
 8003958:	2301      	movs	r3, #1
 800395a:	e7f0      	b.n	800393e <_vfiprintf_r+0x1da>
 800395c:	ab03      	add	r3, sp, #12
 800395e:	9300      	str	r3, [sp, #0]
 8003960:	462a      	mov	r2, r5
 8003962:	4b17      	ldr	r3, [pc, #92]	; (80039c0 <_vfiprintf_r+0x25c>)
 8003964:	a904      	add	r1, sp, #16
 8003966:	4630      	mov	r0, r6
 8003968:	f3af 8000 	nop.w
 800396c:	4607      	mov	r7, r0
 800396e:	1c78      	adds	r0, r7, #1
 8003970:	d1d6      	bne.n	8003920 <_vfiprintf_r+0x1bc>
 8003972:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003974:	07d9      	lsls	r1, r3, #31
 8003976:	d405      	bmi.n	8003984 <_vfiprintf_r+0x220>
 8003978:	89ab      	ldrh	r3, [r5, #12]
 800397a:	059a      	lsls	r2, r3, #22
 800397c:	d402      	bmi.n	8003984 <_vfiprintf_r+0x220>
 800397e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003980:	f7ff fe33 	bl	80035ea <__retarget_lock_release_recursive>
 8003984:	89ab      	ldrh	r3, [r5, #12]
 8003986:	065b      	lsls	r3, r3, #25
 8003988:	f53f af12 	bmi.w	80037b0 <_vfiprintf_r+0x4c>
 800398c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800398e:	e711      	b.n	80037b4 <_vfiprintf_r+0x50>
 8003990:	ab03      	add	r3, sp, #12
 8003992:	9300      	str	r3, [sp, #0]
 8003994:	462a      	mov	r2, r5
 8003996:	4b0a      	ldr	r3, [pc, #40]	; (80039c0 <_vfiprintf_r+0x25c>)
 8003998:	a904      	add	r1, sp, #16
 800399a:	4630      	mov	r0, r6
 800399c:	f000 f880 	bl	8003aa0 <_printf_i>
 80039a0:	e7e4      	b.n	800396c <_vfiprintf_r+0x208>
 80039a2:	bf00      	nop
 80039a4:	08004478 	.word	0x08004478
 80039a8:	08004498 	.word	0x08004498
 80039ac:	08004458 	.word	0x08004458
 80039b0:	080044b8 	.word	0x080044b8
 80039b4:	080044be 	.word	0x080044be
 80039b8:	080044c2 	.word	0x080044c2
 80039bc:	00000000 	.word	0x00000000
 80039c0:	0800373f 	.word	0x0800373f

080039c4 <_printf_common>:
 80039c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039c8:	4616      	mov	r6, r2
 80039ca:	4699      	mov	r9, r3
 80039cc:	688a      	ldr	r2, [r1, #8]
 80039ce:	690b      	ldr	r3, [r1, #16]
 80039d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80039d4:	4293      	cmp	r3, r2
 80039d6:	bfb8      	it	lt
 80039d8:	4613      	movlt	r3, r2
 80039da:	6033      	str	r3, [r6, #0]
 80039dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80039e0:	4607      	mov	r7, r0
 80039e2:	460c      	mov	r4, r1
 80039e4:	b10a      	cbz	r2, 80039ea <_printf_common+0x26>
 80039e6:	3301      	adds	r3, #1
 80039e8:	6033      	str	r3, [r6, #0]
 80039ea:	6823      	ldr	r3, [r4, #0]
 80039ec:	0699      	lsls	r1, r3, #26
 80039ee:	bf42      	ittt	mi
 80039f0:	6833      	ldrmi	r3, [r6, #0]
 80039f2:	3302      	addmi	r3, #2
 80039f4:	6033      	strmi	r3, [r6, #0]
 80039f6:	6825      	ldr	r5, [r4, #0]
 80039f8:	f015 0506 	ands.w	r5, r5, #6
 80039fc:	d106      	bne.n	8003a0c <_printf_common+0x48>
 80039fe:	f104 0a19 	add.w	sl, r4, #25
 8003a02:	68e3      	ldr	r3, [r4, #12]
 8003a04:	6832      	ldr	r2, [r6, #0]
 8003a06:	1a9b      	subs	r3, r3, r2
 8003a08:	42ab      	cmp	r3, r5
 8003a0a:	dc26      	bgt.n	8003a5a <_printf_common+0x96>
 8003a0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003a10:	1e13      	subs	r3, r2, #0
 8003a12:	6822      	ldr	r2, [r4, #0]
 8003a14:	bf18      	it	ne
 8003a16:	2301      	movne	r3, #1
 8003a18:	0692      	lsls	r2, r2, #26
 8003a1a:	d42b      	bmi.n	8003a74 <_printf_common+0xb0>
 8003a1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003a20:	4649      	mov	r1, r9
 8003a22:	4638      	mov	r0, r7
 8003a24:	47c0      	blx	r8
 8003a26:	3001      	adds	r0, #1
 8003a28:	d01e      	beq.n	8003a68 <_printf_common+0xa4>
 8003a2a:	6823      	ldr	r3, [r4, #0]
 8003a2c:	68e5      	ldr	r5, [r4, #12]
 8003a2e:	6832      	ldr	r2, [r6, #0]
 8003a30:	f003 0306 	and.w	r3, r3, #6
 8003a34:	2b04      	cmp	r3, #4
 8003a36:	bf08      	it	eq
 8003a38:	1aad      	subeq	r5, r5, r2
 8003a3a:	68a3      	ldr	r3, [r4, #8]
 8003a3c:	6922      	ldr	r2, [r4, #16]
 8003a3e:	bf0c      	ite	eq
 8003a40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003a44:	2500      	movne	r5, #0
 8003a46:	4293      	cmp	r3, r2
 8003a48:	bfc4      	itt	gt
 8003a4a:	1a9b      	subgt	r3, r3, r2
 8003a4c:	18ed      	addgt	r5, r5, r3
 8003a4e:	2600      	movs	r6, #0
 8003a50:	341a      	adds	r4, #26
 8003a52:	42b5      	cmp	r5, r6
 8003a54:	d11a      	bne.n	8003a8c <_printf_common+0xc8>
 8003a56:	2000      	movs	r0, #0
 8003a58:	e008      	b.n	8003a6c <_printf_common+0xa8>
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	4652      	mov	r2, sl
 8003a5e:	4649      	mov	r1, r9
 8003a60:	4638      	mov	r0, r7
 8003a62:	47c0      	blx	r8
 8003a64:	3001      	adds	r0, #1
 8003a66:	d103      	bne.n	8003a70 <_printf_common+0xac>
 8003a68:	f04f 30ff 	mov.w	r0, #4294967295
 8003a6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a70:	3501      	adds	r5, #1
 8003a72:	e7c6      	b.n	8003a02 <_printf_common+0x3e>
 8003a74:	18e1      	adds	r1, r4, r3
 8003a76:	1c5a      	adds	r2, r3, #1
 8003a78:	2030      	movs	r0, #48	; 0x30
 8003a7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003a7e:	4422      	add	r2, r4
 8003a80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003a84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003a88:	3302      	adds	r3, #2
 8003a8a:	e7c7      	b.n	8003a1c <_printf_common+0x58>
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	4622      	mov	r2, r4
 8003a90:	4649      	mov	r1, r9
 8003a92:	4638      	mov	r0, r7
 8003a94:	47c0      	blx	r8
 8003a96:	3001      	adds	r0, #1
 8003a98:	d0e6      	beq.n	8003a68 <_printf_common+0xa4>
 8003a9a:	3601      	adds	r6, #1
 8003a9c:	e7d9      	b.n	8003a52 <_printf_common+0x8e>
	...

08003aa0 <_printf_i>:
 8003aa0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003aa4:	7e0f      	ldrb	r7, [r1, #24]
 8003aa6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003aa8:	2f78      	cmp	r7, #120	; 0x78
 8003aaa:	4691      	mov	r9, r2
 8003aac:	4680      	mov	r8, r0
 8003aae:	460c      	mov	r4, r1
 8003ab0:	469a      	mov	sl, r3
 8003ab2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003ab6:	d807      	bhi.n	8003ac8 <_printf_i+0x28>
 8003ab8:	2f62      	cmp	r7, #98	; 0x62
 8003aba:	d80a      	bhi.n	8003ad2 <_printf_i+0x32>
 8003abc:	2f00      	cmp	r7, #0
 8003abe:	f000 80d8 	beq.w	8003c72 <_printf_i+0x1d2>
 8003ac2:	2f58      	cmp	r7, #88	; 0x58
 8003ac4:	f000 80a3 	beq.w	8003c0e <_printf_i+0x16e>
 8003ac8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003acc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003ad0:	e03a      	b.n	8003b48 <_printf_i+0xa8>
 8003ad2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003ad6:	2b15      	cmp	r3, #21
 8003ad8:	d8f6      	bhi.n	8003ac8 <_printf_i+0x28>
 8003ada:	a101      	add	r1, pc, #4	; (adr r1, 8003ae0 <_printf_i+0x40>)
 8003adc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003ae0:	08003b39 	.word	0x08003b39
 8003ae4:	08003b4d 	.word	0x08003b4d
 8003ae8:	08003ac9 	.word	0x08003ac9
 8003aec:	08003ac9 	.word	0x08003ac9
 8003af0:	08003ac9 	.word	0x08003ac9
 8003af4:	08003ac9 	.word	0x08003ac9
 8003af8:	08003b4d 	.word	0x08003b4d
 8003afc:	08003ac9 	.word	0x08003ac9
 8003b00:	08003ac9 	.word	0x08003ac9
 8003b04:	08003ac9 	.word	0x08003ac9
 8003b08:	08003ac9 	.word	0x08003ac9
 8003b0c:	08003c59 	.word	0x08003c59
 8003b10:	08003b7d 	.word	0x08003b7d
 8003b14:	08003c3b 	.word	0x08003c3b
 8003b18:	08003ac9 	.word	0x08003ac9
 8003b1c:	08003ac9 	.word	0x08003ac9
 8003b20:	08003c7b 	.word	0x08003c7b
 8003b24:	08003ac9 	.word	0x08003ac9
 8003b28:	08003b7d 	.word	0x08003b7d
 8003b2c:	08003ac9 	.word	0x08003ac9
 8003b30:	08003ac9 	.word	0x08003ac9
 8003b34:	08003c43 	.word	0x08003c43
 8003b38:	682b      	ldr	r3, [r5, #0]
 8003b3a:	1d1a      	adds	r2, r3, #4
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	602a      	str	r2, [r5, #0]
 8003b40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e0a3      	b.n	8003c94 <_printf_i+0x1f4>
 8003b4c:	6820      	ldr	r0, [r4, #0]
 8003b4e:	6829      	ldr	r1, [r5, #0]
 8003b50:	0606      	lsls	r6, r0, #24
 8003b52:	f101 0304 	add.w	r3, r1, #4
 8003b56:	d50a      	bpl.n	8003b6e <_printf_i+0xce>
 8003b58:	680e      	ldr	r6, [r1, #0]
 8003b5a:	602b      	str	r3, [r5, #0]
 8003b5c:	2e00      	cmp	r6, #0
 8003b5e:	da03      	bge.n	8003b68 <_printf_i+0xc8>
 8003b60:	232d      	movs	r3, #45	; 0x2d
 8003b62:	4276      	negs	r6, r6
 8003b64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b68:	485e      	ldr	r0, [pc, #376]	; (8003ce4 <_printf_i+0x244>)
 8003b6a:	230a      	movs	r3, #10
 8003b6c:	e019      	b.n	8003ba2 <_printf_i+0x102>
 8003b6e:	680e      	ldr	r6, [r1, #0]
 8003b70:	602b      	str	r3, [r5, #0]
 8003b72:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003b76:	bf18      	it	ne
 8003b78:	b236      	sxthne	r6, r6
 8003b7a:	e7ef      	b.n	8003b5c <_printf_i+0xbc>
 8003b7c:	682b      	ldr	r3, [r5, #0]
 8003b7e:	6820      	ldr	r0, [r4, #0]
 8003b80:	1d19      	adds	r1, r3, #4
 8003b82:	6029      	str	r1, [r5, #0]
 8003b84:	0601      	lsls	r1, r0, #24
 8003b86:	d501      	bpl.n	8003b8c <_printf_i+0xec>
 8003b88:	681e      	ldr	r6, [r3, #0]
 8003b8a:	e002      	b.n	8003b92 <_printf_i+0xf2>
 8003b8c:	0646      	lsls	r6, r0, #25
 8003b8e:	d5fb      	bpl.n	8003b88 <_printf_i+0xe8>
 8003b90:	881e      	ldrh	r6, [r3, #0]
 8003b92:	4854      	ldr	r0, [pc, #336]	; (8003ce4 <_printf_i+0x244>)
 8003b94:	2f6f      	cmp	r7, #111	; 0x6f
 8003b96:	bf0c      	ite	eq
 8003b98:	2308      	moveq	r3, #8
 8003b9a:	230a      	movne	r3, #10
 8003b9c:	2100      	movs	r1, #0
 8003b9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003ba2:	6865      	ldr	r5, [r4, #4]
 8003ba4:	60a5      	str	r5, [r4, #8]
 8003ba6:	2d00      	cmp	r5, #0
 8003ba8:	bfa2      	ittt	ge
 8003baa:	6821      	ldrge	r1, [r4, #0]
 8003bac:	f021 0104 	bicge.w	r1, r1, #4
 8003bb0:	6021      	strge	r1, [r4, #0]
 8003bb2:	b90e      	cbnz	r6, 8003bb8 <_printf_i+0x118>
 8003bb4:	2d00      	cmp	r5, #0
 8003bb6:	d04d      	beq.n	8003c54 <_printf_i+0x1b4>
 8003bb8:	4615      	mov	r5, r2
 8003bba:	fbb6 f1f3 	udiv	r1, r6, r3
 8003bbe:	fb03 6711 	mls	r7, r3, r1, r6
 8003bc2:	5dc7      	ldrb	r7, [r0, r7]
 8003bc4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003bc8:	4637      	mov	r7, r6
 8003bca:	42bb      	cmp	r3, r7
 8003bcc:	460e      	mov	r6, r1
 8003bce:	d9f4      	bls.n	8003bba <_printf_i+0x11a>
 8003bd0:	2b08      	cmp	r3, #8
 8003bd2:	d10b      	bne.n	8003bec <_printf_i+0x14c>
 8003bd4:	6823      	ldr	r3, [r4, #0]
 8003bd6:	07de      	lsls	r6, r3, #31
 8003bd8:	d508      	bpl.n	8003bec <_printf_i+0x14c>
 8003bda:	6923      	ldr	r3, [r4, #16]
 8003bdc:	6861      	ldr	r1, [r4, #4]
 8003bde:	4299      	cmp	r1, r3
 8003be0:	bfde      	ittt	le
 8003be2:	2330      	movle	r3, #48	; 0x30
 8003be4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003be8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003bec:	1b52      	subs	r2, r2, r5
 8003bee:	6122      	str	r2, [r4, #16]
 8003bf0:	f8cd a000 	str.w	sl, [sp]
 8003bf4:	464b      	mov	r3, r9
 8003bf6:	aa03      	add	r2, sp, #12
 8003bf8:	4621      	mov	r1, r4
 8003bfa:	4640      	mov	r0, r8
 8003bfc:	f7ff fee2 	bl	80039c4 <_printf_common>
 8003c00:	3001      	adds	r0, #1
 8003c02:	d14c      	bne.n	8003c9e <_printf_i+0x1fe>
 8003c04:	f04f 30ff 	mov.w	r0, #4294967295
 8003c08:	b004      	add	sp, #16
 8003c0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c0e:	4835      	ldr	r0, [pc, #212]	; (8003ce4 <_printf_i+0x244>)
 8003c10:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003c14:	6829      	ldr	r1, [r5, #0]
 8003c16:	6823      	ldr	r3, [r4, #0]
 8003c18:	f851 6b04 	ldr.w	r6, [r1], #4
 8003c1c:	6029      	str	r1, [r5, #0]
 8003c1e:	061d      	lsls	r5, r3, #24
 8003c20:	d514      	bpl.n	8003c4c <_printf_i+0x1ac>
 8003c22:	07df      	lsls	r7, r3, #31
 8003c24:	bf44      	itt	mi
 8003c26:	f043 0320 	orrmi.w	r3, r3, #32
 8003c2a:	6023      	strmi	r3, [r4, #0]
 8003c2c:	b91e      	cbnz	r6, 8003c36 <_printf_i+0x196>
 8003c2e:	6823      	ldr	r3, [r4, #0]
 8003c30:	f023 0320 	bic.w	r3, r3, #32
 8003c34:	6023      	str	r3, [r4, #0]
 8003c36:	2310      	movs	r3, #16
 8003c38:	e7b0      	b.n	8003b9c <_printf_i+0xfc>
 8003c3a:	6823      	ldr	r3, [r4, #0]
 8003c3c:	f043 0320 	orr.w	r3, r3, #32
 8003c40:	6023      	str	r3, [r4, #0]
 8003c42:	2378      	movs	r3, #120	; 0x78
 8003c44:	4828      	ldr	r0, [pc, #160]	; (8003ce8 <_printf_i+0x248>)
 8003c46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003c4a:	e7e3      	b.n	8003c14 <_printf_i+0x174>
 8003c4c:	0659      	lsls	r1, r3, #25
 8003c4e:	bf48      	it	mi
 8003c50:	b2b6      	uxthmi	r6, r6
 8003c52:	e7e6      	b.n	8003c22 <_printf_i+0x182>
 8003c54:	4615      	mov	r5, r2
 8003c56:	e7bb      	b.n	8003bd0 <_printf_i+0x130>
 8003c58:	682b      	ldr	r3, [r5, #0]
 8003c5a:	6826      	ldr	r6, [r4, #0]
 8003c5c:	6961      	ldr	r1, [r4, #20]
 8003c5e:	1d18      	adds	r0, r3, #4
 8003c60:	6028      	str	r0, [r5, #0]
 8003c62:	0635      	lsls	r5, r6, #24
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	d501      	bpl.n	8003c6c <_printf_i+0x1cc>
 8003c68:	6019      	str	r1, [r3, #0]
 8003c6a:	e002      	b.n	8003c72 <_printf_i+0x1d2>
 8003c6c:	0670      	lsls	r0, r6, #25
 8003c6e:	d5fb      	bpl.n	8003c68 <_printf_i+0x1c8>
 8003c70:	8019      	strh	r1, [r3, #0]
 8003c72:	2300      	movs	r3, #0
 8003c74:	6123      	str	r3, [r4, #16]
 8003c76:	4615      	mov	r5, r2
 8003c78:	e7ba      	b.n	8003bf0 <_printf_i+0x150>
 8003c7a:	682b      	ldr	r3, [r5, #0]
 8003c7c:	1d1a      	adds	r2, r3, #4
 8003c7e:	602a      	str	r2, [r5, #0]
 8003c80:	681d      	ldr	r5, [r3, #0]
 8003c82:	6862      	ldr	r2, [r4, #4]
 8003c84:	2100      	movs	r1, #0
 8003c86:	4628      	mov	r0, r5
 8003c88:	f7fc fa7a 	bl	8000180 <memchr>
 8003c8c:	b108      	cbz	r0, 8003c92 <_printf_i+0x1f2>
 8003c8e:	1b40      	subs	r0, r0, r5
 8003c90:	6060      	str	r0, [r4, #4]
 8003c92:	6863      	ldr	r3, [r4, #4]
 8003c94:	6123      	str	r3, [r4, #16]
 8003c96:	2300      	movs	r3, #0
 8003c98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c9c:	e7a8      	b.n	8003bf0 <_printf_i+0x150>
 8003c9e:	6923      	ldr	r3, [r4, #16]
 8003ca0:	462a      	mov	r2, r5
 8003ca2:	4649      	mov	r1, r9
 8003ca4:	4640      	mov	r0, r8
 8003ca6:	47d0      	blx	sl
 8003ca8:	3001      	adds	r0, #1
 8003caa:	d0ab      	beq.n	8003c04 <_printf_i+0x164>
 8003cac:	6823      	ldr	r3, [r4, #0]
 8003cae:	079b      	lsls	r3, r3, #30
 8003cb0:	d413      	bmi.n	8003cda <_printf_i+0x23a>
 8003cb2:	68e0      	ldr	r0, [r4, #12]
 8003cb4:	9b03      	ldr	r3, [sp, #12]
 8003cb6:	4298      	cmp	r0, r3
 8003cb8:	bfb8      	it	lt
 8003cba:	4618      	movlt	r0, r3
 8003cbc:	e7a4      	b.n	8003c08 <_printf_i+0x168>
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	4632      	mov	r2, r6
 8003cc2:	4649      	mov	r1, r9
 8003cc4:	4640      	mov	r0, r8
 8003cc6:	47d0      	blx	sl
 8003cc8:	3001      	adds	r0, #1
 8003cca:	d09b      	beq.n	8003c04 <_printf_i+0x164>
 8003ccc:	3501      	adds	r5, #1
 8003cce:	68e3      	ldr	r3, [r4, #12]
 8003cd0:	9903      	ldr	r1, [sp, #12]
 8003cd2:	1a5b      	subs	r3, r3, r1
 8003cd4:	42ab      	cmp	r3, r5
 8003cd6:	dcf2      	bgt.n	8003cbe <_printf_i+0x21e>
 8003cd8:	e7eb      	b.n	8003cb2 <_printf_i+0x212>
 8003cda:	2500      	movs	r5, #0
 8003cdc:	f104 0619 	add.w	r6, r4, #25
 8003ce0:	e7f5      	b.n	8003cce <_printf_i+0x22e>
 8003ce2:	bf00      	nop
 8003ce4:	080044c9 	.word	0x080044c9
 8003ce8:	080044da 	.word	0x080044da

08003cec <_sbrk_r>:
 8003cec:	b538      	push	{r3, r4, r5, lr}
 8003cee:	4d06      	ldr	r5, [pc, #24]	; (8003d08 <_sbrk_r+0x1c>)
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	4604      	mov	r4, r0
 8003cf4:	4608      	mov	r0, r1
 8003cf6:	602b      	str	r3, [r5, #0]
 8003cf8:	f7fc fe48 	bl	800098c <_sbrk>
 8003cfc:	1c43      	adds	r3, r0, #1
 8003cfe:	d102      	bne.n	8003d06 <_sbrk_r+0x1a>
 8003d00:	682b      	ldr	r3, [r5, #0]
 8003d02:	b103      	cbz	r3, 8003d06 <_sbrk_r+0x1a>
 8003d04:	6023      	str	r3, [r4, #0]
 8003d06:	bd38      	pop	{r3, r4, r5, pc}
 8003d08:	20000148 	.word	0x20000148

08003d0c <__sread>:
 8003d0c:	b510      	push	{r4, lr}
 8003d0e:	460c      	mov	r4, r1
 8003d10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d14:	f000 faac 	bl	8004270 <_read_r>
 8003d18:	2800      	cmp	r0, #0
 8003d1a:	bfab      	itete	ge
 8003d1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003d1e:	89a3      	ldrhlt	r3, [r4, #12]
 8003d20:	181b      	addge	r3, r3, r0
 8003d22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003d26:	bfac      	ite	ge
 8003d28:	6563      	strge	r3, [r4, #84]	; 0x54
 8003d2a:	81a3      	strhlt	r3, [r4, #12]
 8003d2c:	bd10      	pop	{r4, pc}

08003d2e <__swrite>:
 8003d2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d32:	461f      	mov	r7, r3
 8003d34:	898b      	ldrh	r3, [r1, #12]
 8003d36:	05db      	lsls	r3, r3, #23
 8003d38:	4605      	mov	r5, r0
 8003d3a:	460c      	mov	r4, r1
 8003d3c:	4616      	mov	r6, r2
 8003d3e:	d505      	bpl.n	8003d4c <__swrite+0x1e>
 8003d40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d44:	2302      	movs	r3, #2
 8003d46:	2200      	movs	r2, #0
 8003d48:	f000 f9c4 	bl	80040d4 <_lseek_r>
 8003d4c:	89a3      	ldrh	r3, [r4, #12]
 8003d4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d56:	81a3      	strh	r3, [r4, #12]
 8003d58:	4632      	mov	r2, r6
 8003d5a:	463b      	mov	r3, r7
 8003d5c:	4628      	mov	r0, r5
 8003d5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d62:	f000 b869 	b.w	8003e38 <_write_r>

08003d66 <__sseek>:
 8003d66:	b510      	push	{r4, lr}
 8003d68:	460c      	mov	r4, r1
 8003d6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d6e:	f000 f9b1 	bl	80040d4 <_lseek_r>
 8003d72:	1c43      	adds	r3, r0, #1
 8003d74:	89a3      	ldrh	r3, [r4, #12]
 8003d76:	bf15      	itete	ne
 8003d78:	6560      	strne	r0, [r4, #84]	; 0x54
 8003d7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003d7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003d82:	81a3      	strheq	r3, [r4, #12]
 8003d84:	bf18      	it	ne
 8003d86:	81a3      	strhne	r3, [r4, #12]
 8003d88:	bd10      	pop	{r4, pc}

08003d8a <__sclose>:
 8003d8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d8e:	f000 b8d3 	b.w	8003f38 <_close_r>
	...

08003d94 <__swbuf_r>:
 8003d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d96:	460e      	mov	r6, r1
 8003d98:	4614      	mov	r4, r2
 8003d9a:	4605      	mov	r5, r0
 8003d9c:	b118      	cbz	r0, 8003da6 <__swbuf_r+0x12>
 8003d9e:	6983      	ldr	r3, [r0, #24]
 8003da0:	b90b      	cbnz	r3, 8003da6 <__swbuf_r+0x12>
 8003da2:	f7ff fb83 	bl	80034ac <__sinit>
 8003da6:	4b21      	ldr	r3, [pc, #132]	; (8003e2c <__swbuf_r+0x98>)
 8003da8:	429c      	cmp	r4, r3
 8003daa:	d12b      	bne.n	8003e04 <__swbuf_r+0x70>
 8003dac:	686c      	ldr	r4, [r5, #4]
 8003dae:	69a3      	ldr	r3, [r4, #24]
 8003db0:	60a3      	str	r3, [r4, #8]
 8003db2:	89a3      	ldrh	r3, [r4, #12]
 8003db4:	071a      	lsls	r2, r3, #28
 8003db6:	d52f      	bpl.n	8003e18 <__swbuf_r+0x84>
 8003db8:	6923      	ldr	r3, [r4, #16]
 8003dba:	b36b      	cbz	r3, 8003e18 <__swbuf_r+0x84>
 8003dbc:	6923      	ldr	r3, [r4, #16]
 8003dbe:	6820      	ldr	r0, [r4, #0]
 8003dc0:	1ac0      	subs	r0, r0, r3
 8003dc2:	6963      	ldr	r3, [r4, #20]
 8003dc4:	b2f6      	uxtb	r6, r6
 8003dc6:	4283      	cmp	r3, r0
 8003dc8:	4637      	mov	r7, r6
 8003dca:	dc04      	bgt.n	8003dd6 <__swbuf_r+0x42>
 8003dcc:	4621      	mov	r1, r4
 8003dce:	4628      	mov	r0, r5
 8003dd0:	f000 f944 	bl	800405c <_fflush_r>
 8003dd4:	bb30      	cbnz	r0, 8003e24 <__swbuf_r+0x90>
 8003dd6:	68a3      	ldr	r3, [r4, #8]
 8003dd8:	3b01      	subs	r3, #1
 8003dda:	60a3      	str	r3, [r4, #8]
 8003ddc:	6823      	ldr	r3, [r4, #0]
 8003dde:	1c5a      	adds	r2, r3, #1
 8003de0:	6022      	str	r2, [r4, #0]
 8003de2:	701e      	strb	r6, [r3, #0]
 8003de4:	6963      	ldr	r3, [r4, #20]
 8003de6:	3001      	adds	r0, #1
 8003de8:	4283      	cmp	r3, r0
 8003dea:	d004      	beq.n	8003df6 <__swbuf_r+0x62>
 8003dec:	89a3      	ldrh	r3, [r4, #12]
 8003dee:	07db      	lsls	r3, r3, #31
 8003df0:	d506      	bpl.n	8003e00 <__swbuf_r+0x6c>
 8003df2:	2e0a      	cmp	r6, #10
 8003df4:	d104      	bne.n	8003e00 <__swbuf_r+0x6c>
 8003df6:	4621      	mov	r1, r4
 8003df8:	4628      	mov	r0, r5
 8003dfa:	f000 f92f 	bl	800405c <_fflush_r>
 8003dfe:	b988      	cbnz	r0, 8003e24 <__swbuf_r+0x90>
 8003e00:	4638      	mov	r0, r7
 8003e02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e04:	4b0a      	ldr	r3, [pc, #40]	; (8003e30 <__swbuf_r+0x9c>)
 8003e06:	429c      	cmp	r4, r3
 8003e08:	d101      	bne.n	8003e0e <__swbuf_r+0x7a>
 8003e0a:	68ac      	ldr	r4, [r5, #8]
 8003e0c:	e7cf      	b.n	8003dae <__swbuf_r+0x1a>
 8003e0e:	4b09      	ldr	r3, [pc, #36]	; (8003e34 <__swbuf_r+0xa0>)
 8003e10:	429c      	cmp	r4, r3
 8003e12:	bf08      	it	eq
 8003e14:	68ec      	ldreq	r4, [r5, #12]
 8003e16:	e7ca      	b.n	8003dae <__swbuf_r+0x1a>
 8003e18:	4621      	mov	r1, r4
 8003e1a:	4628      	mov	r0, r5
 8003e1c:	f000 f81e 	bl	8003e5c <__swsetup_r>
 8003e20:	2800      	cmp	r0, #0
 8003e22:	d0cb      	beq.n	8003dbc <__swbuf_r+0x28>
 8003e24:	f04f 37ff 	mov.w	r7, #4294967295
 8003e28:	e7ea      	b.n	8003e00 <__swbuf_r+0x6c>
 8003e2a:	bf00      	nop
 8003e2c:	08004478 	.word	0x08004478
 8003e30:	08004498 	.word	0x08004498
 8003e34:	08004458 	.word	0x08004458

08003e38 <_write_r>:
 8003e38:	b538      	push	{r3, r4, r5, lr}
 8003e3a:	4d07      	ldr	r5, [pc, #28]	; (8003e58 <_write_r+0x20>)
 8003e3c:	4604      	mov	r4, r0
 8003e3e:	4608      	mov	r0, r1
 8003e40:	4611      	mov	r1, r2
 8003e42:	2200      	movs	r2, #0
 8003e44:	602a      	str	r2, [r5, #0]
 8003e46:	461a      	mov	r2, r3
 8003e48:	f7fc fd54 	bl	80008f4 <_write>
 8003e4c:	1c43      	adds	r3, r0, #1
 8003e4e:	d102      	bne.n	8003e56 <_write_r+0x1e>
 8003e50:	682b      	ldr	r3, [r5, #0]
 8003e52:	b103      	cbz	r3, 8003e56 <_write_r+0x1e>
 8003e54:	6023      	str	r3, [r4, #0]
 8003e56:	bd38      	pop	{r3, r4, r5, pc}
 8003e58:	20000148 	.word	0x20000148

08003e5c <__swsetup_r>:
 8003e5c:	4b32      	ldr	r3, [pc, #200]	; (8003f28 <__swsetup_r+0xcc>)
 8003e5e:	b570      	push	{r4, r5, r6, lr}
 8003e60:	681d      	ldr	r5, [r3, #0]
 8003e62:	4606      	mov	r6, r0
 8003e64:	460c      	mov	r4, r1
 8003e66:	b125      	cbz	r5, 8003e72 <__swsetup_r+0x16>
 8003e68:	69ab      	ldr	r3, [r5, #24]
 8003e6a:	b913      	cbnz	r3, 8003e72 <__swsetup_r+0x16>
 8003e6c:	4628      	mov	r0, r5
 8003e6e:	f7ff fb1d 	bl	80034ac <__sinit>
 8003e72:	4b2e      	ldr	r3, [pc, #184]	; (8003f2c <__swsetup_r+0xd0>)
 8003e74:	429c      	cmp	r4, r3
 8003e76:	d10f      	bne.n	8003e98 <__swsetup_r+0x3c>
 8003e78:	686c      	ldr	r4, [r5, #4]
 8003e7a:	89a3      	ldrh	r3, [r4, #12]
 8003e7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003e80:	0719      	lsls	r1, r3, #28
 8003e82:	d42c      	bmi.n	8003ede <__swsetup_r+0x82>
 8003e84:	06dd      	lsls	r5, r3, #27
 8003e86:	d411      	bmi.n	8003eac <__swsetup_r+0x50>
 8003e88:	2309      	movs	r3, #9
 8003e8a:	6033      	str	r3, [r6, #0]
 8003e8c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003e90:	81a3      	strh	r3, [r4, #12]
 8003e92:	f04f 30ff 	mov.w	r0, #4294967295
 8003e96:	e03e      	b.n	8003f16 <__swsetup_r+0xba>
 8003e98:	4b25      	ldr	r3, [pc, #148]	; (8003f30 <__swsetup_r+0xd4>)
 8003e9a:	429c      	cmp	r4, r3
 8003e9c:	d101      	bne.n	8003ea2 <__swsetup_r+0x46>
 8003e9e:	68ac      	ldr	r4, [r5, #8]
 8003ea0:	e7eb      	b.n	8003e7a <__swsetup_r+0x1e>
 8003ea2:	4b24      	ldr	r3, [pc, #144]	; (8003f34 <__swsetup_r+0xd8>)
 8003ea4:	429c      	cmp	r4, r3
 8003ea6:	bf08      	it	eq
 8003ea8:	68ec      	ldreq	r4, [r5, #12]
 8003eaa:	e7e6      	b.n	8003e7a <__swsetup_r+0x1e>
 8003eac:	0758      	lsls	r0, r3, #29
 8003eae:	d512      	bpl.n	8003ed6 <__swsetup_r+0x7a>
 8003eb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003eb2:	b141      	cbz	r1, 8003ec6 <__swsetup_r+0x6a>
 8003eb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003eb8:	4299      	cmp	r1, r3
 8003eba:	d002      	beq.n	8003ec2 <__swsetup_r+0x66>
 8003ebc:	4630      	mov	r0, r6
 8003ebe:	f000 f98d 	bl	80041dc <_free_r>
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	6363      	str	r3, [r4, #52]	; 0x34
 8003ec6:	89a3      	ldrh	r3, [r4, #12]
 8003ec8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003ecc:	81a3      	strh	r3, [r4, #12]
 8003ece:	2300      	movs	r3, #0
 8003ed0:	6063      	str	r3, [r4, #4]
 8003ed2:	6923      	ldr	r3, [r4, #16]
 8003ed4:	6023      	str	r3, [r4, #0]
 8003ed6:	89a3      	ldrh	r3, [r4, #12]
 8003ed8:	f043 0308 	orr.w	r3, r3, #8
 8003edc:	81a3      	strh	r3, [r4, #12]
 8003ede:	6923      	ldr	r3, [r4, #16]
 8003ee0:	b94b      	cbnz	r3, 8003ef6 <__swsetup_r+0x9a>
 8003ee2:	89a3      	ldrh	r3, [r4, #12]
 8003ee4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003ee8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003eec:	d003      	beq.n	8003ef6 <__swsetup_r+0x9a>
 8003eee:	4621      	mov	r1, r4
 8003ef0:	4630      	mov	r0, r6
 8003ef2:	f000 f927 	bl	8004144 <__smakebuf_r>
 8003ef6:	89a0      	ldrh	r0, [r4, #12]
 8003ef8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003efc:	f010 0301 	ands.w	r3, r0, #1
 8003f00:	d00a      	beq.n	8003f18 <__swsetup_r+0xbc>
 8003f02:	2300      	movs	r3, #0
 8003f04:	60a3      	str	r3, [r4, #8]
 8003f06:	6963      	ldr	r3, [r4, #20]
 8003f08:	425b      	negs	r3, r3
 8003f0a:	61a3      	str	r3, [r4, #24]
 8003f0c:	6923      	ldr	r3, [r4, #16]
 8003f0e:	b943      	cbnz	r3, 8003f22 <__swsetup_r+0xc6>
 8003f10:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003f14:	d1ba      	bne.n	8003e8c <__swsetup_r+0x30>
 8003f16:	bd70      	pop	{r4, r5, r6, pc}
 8003f18:	0781      	lsls	r1, r0, #30
 8003f1a:	bf58      	it	pl
 8003f1c:	6963      	ldrpl	r3, [r4, #20]
 8003f1e:	60a3      	str	r3, [r4, #8]
 8003f20:	e7f4      	b.n	8003f0c <__swsetup_r+0xb0>
 8003f22:	2000      	movs	r0, #0
 8003f24:	e7f7      	b.n	8003f16 <__swsetup_r+0xba>
 8003f26:	bf00      	nop
 8003f28:	20000018 	.word	0x20000018
 8003f2c:	08004478 	.word	0x08004478
 8003f30:	08004498 	.word	0x08004498
 8003f34:	08004458 	.word	0x08004458

08003f38 <_close_r>:
 8003f38:	b538      	push	{r3, r4, r5, lr}
 8003f3a:	4d06      	ldr	r5, [pc, #24]	; (8003f54 <_close_r+0x1c>)
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	4604      	mov	r4, r0
 8003f40:	4608      	mov	r0, r1
 8003f42:	602b      	str	r3, [r5, #0]
 8003f44:	f7fc fcf2 	bl	800092c <_close>
 8003f48:	1c43      	adds	r3, r0, #1
 8003f4a:	d102      	bne.n	8003f52 <_close_r+0x1a>
 8003f4c:	682b      	ldr	r3, [r5, #0]
 8003f4e:	b103      	cbz	r3, 8003f52 <_close_r+0x1a>
 8003f50:	6023      	str	r3, [r4, #0]
 8003f52:	bd38      	pop	{r3, r4, r5, pc}
 8003f54:	20000148 	.word	0x20000148

08003f58 <__sflush_r>:
 8003f58:	898a      	ldrh	r2, [r1, #12]
 8003f5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f5c:	4605      	mov	r5, r0
 8003f5e:	0710      	lsls	r0, r2, #28
 8003f60:	460c      	mov	r4, r1
 8003f62:	d457      	bmi.n	8004014 <__sflush_r+0xbc>
 8003f64:	684b      	ldr	r3, [r1, #4]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	dc04      	bgt.n	8003f74 <__sflush_r+0x1c>
 8003f6a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	dc01      	bgt.n	8003f74 <__sflush_r+0x1c>
 8003f70:	2000      	movs	r0, #0
 8003f72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003f76:	2e00      	cmp	r6, #0
 8003f78:	d0fa      	beq.n	8003f70 <__sflush_r+0x18>
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003f80:	682f      	ldr	r7, [r5, #0]
 8003f82:	602b      	str	r3, [r5, #0]
 8003f84:	d032      	beq.n	8003fec <__sflush_r+0x94>
 8003f86:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003f88:	89a3      	ldrh	r3, [r4, #12]
 8003f8a:	075a      	lsls	r2, r3, #29
 8003f8c:	d505      	bpl.n	8003f9a <__sflush_r+0x42>
 8003f8e:	6863      	ldr	r3, [r4, #4]
 8003f90:	1ac0      	subs	r0, r0, r3
 8003f92:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003f94:	b10b      	cbz	r3, 8003f9a <__sflush_r+0x42>
 8003f96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003f98:	1ac0      	subs	r0, r0, r3
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003fa0:	6a21      	ldr	r1, [r4, #32]
 8003fa2:	4628      	mov	r0, r5
 8003fa4:	47b0      	blx	r6
 8003fa6:	1c43      	adds	r3, r0, #1
 8003fa8:	89a3      	ldrh	r3, [r4, #12]
 8003faa:	d106      	bne.n	8003fba <__sflush_r+0x62>
 8003fac:	6829      	ldr	r1, [r5, #0]
 8003fae:	291d      	cmp	r1, #29
 8003fb0:	d82c      	bhi.n	800400c <__sflush_r+0xb4>
 8003fb2:	4a29      	ldr	r2, [pc, #164]	; (8004058 <__sflush_r+0x100>)
 8003fb4:	40ca      	lsrs	r2, r1
 8003fb6:	07d6      	lsls	r6, r2, #31
 8003fb8:	d528      	bpl.n	800400c <__sflush_r+0xb4>
 8003fba:	2200      	movs	r2, #0
 8003fbc:	6062      	str	r2, [r4, #4]
 8003fbe:	04d9      	lsls	r1, r3, #19
 8003fc0:	6922      	ldr	r2, [r4, #16]
 8003fc2:	6022      	str	r2, [r4, #0]
 8003fc4:	d504      	bpl.n	8003fd0 <__sflush_r+0x78>
 8003fc6:	1c42      	adds	r2, r0, #1
 8003fc8:	d101      	bne.n	8003fce <__sflush_r+0x76>
 8003fca:	682b      	ldr	r3, [r5, #0]
 8003fcc:	b903      	cbnz	r3, 8003fd0 <__sflush_r+0x78>
 8003fce:	6560      	str	r0, [r4, #84]	; 0x54
 8003fd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003fd2:	602f      	str	r7, [r5, #0]
 8003fd4:	2900      	cmp	r1, #0
 8003fd6:	d0cb      	beq.n	8003f70 <__sflush_r+0x18>
 8003fd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003fdc:	4299      	cmp	r1, r3
 8003fde:	d002      	beq.n	8003fe6 <__sflush_r+0x8e>
 8003fe0:	4628      	mov	r0, r5
 8003fe2:	f000 f8fb 	bl	80041dc <_free_r>
 8003fe6:	2000      	movs	r0, #0
 8003fe8:	6360      	str	r0, [r4, #52]	; 0x34
 8003fea:	e7c2      	b.n	8003f72 <__sflush_r+0x1a>
 8003fec:	6a21      	ldr	r1, [r4, #32]
 8003fee:	2301      	movs	r3, #1
 8003ff0:	4628      	mov	r0, r5
 8003ff2:	47b0      	blx	r6
 8003ff4:	1c41      	adds	r1, r0, #1
 8003ff6:	d1c7      	bne.n	8003f88 <__sflush_r+0x30>
 8003ff8:	682b      	ldr	r3, [r5, #0]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d0c4      	beq.n	8003f88 <__sflush_r+0x30>
 8003ffe:	2b1d      	cmp	r3, #29
 8004000:	d001      	beq.n	8004006 <__sflush_r+0xae>
 8004002:	2b16      	cmp	r3, #22
 8004004:	d101      	bne.n	800400a <__sflush_r+0xb2>
 8004006:	602f      	str	r7, [r5, #0]
 8004008:	e7b2      	b.n	8003f70 <__sflush_r+0x18>
 800400a:	89a3      	ldrh	r3, [r4, #12]
 800400c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004010:	81a3      	strh	r3, [r4, #12]
 8004012:	e7ae      	b.n	8003f72 <__sflush_r+0x1a>
 8004014:	690f      	ldr	r7, [r1, #16]
 8004016:	2f00      	cmp	r7, #0
 8004018:	d0aa      	beq.n	8003f70 <__sflush_r+0x18>
 800401a:	0793      	lsls	r3, r2, #30
 800401c:	680e      	ldr	r6, [r1, #0]
 800401e:	bf08      	it	eq
 8004020:	694b      	ldreq	r3, [r1, #20]
 8004022:	600f      	str	r7, [r1, #0]
 8004024:	bf18      	it	ne
 8004026:	2300      	movne	r3, #0
 8004028:	1bf6      	subs	r6, r6, r7
 800402a:	608b      	str	r3, [r1, #8]
 800402c:	2e00      	cmp	r6, #0
 800402e:	dd9f      	ble.n	8003f70 <__sflush_r+0x18>
 8004030:	6a21      	ldr	r1, [r4, #32]
 8004032:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8004036:	4633      	mov	r3, r6
 8004038:	463a      	mov	r2, r7
 800403a:	4628      	mov	r0, r5
 800403c:	47e0      	blx	ip
 800403e:	2800      	cmp	r0, #0
 8004040:	dc06      	bgt.n	8004050 <__sflush_r+0xf8>
 8004042:	89a3      	ldrh	r3, [r4, #12]
 8004044:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004048:	81a3      	strh	r3, [r4, #12]
 800404a:	f04f 30ff 	mov.w	r0, #4294967295
 800404e:	e790      	b.n	8003f72 <__sflush_r+0x1a>
 8004050:	4407      	add	r7, r0
 8004052:	1a36      	subs	r6, r6, r0
 8004054:	e7ea      	b.n	800402c <__sflush_r+0xd4>
 8004056:	bf00      	nop
 8004058:	20400001 	.word	0x20400001

0800405c <_fflush_r>:
 800405c:	b538      	push	{r3, r4, r5, lr}
 800405e:	690b      	ldr	r3, [r1, #16]
 8004060:	4605      	mov	r5, r0
 8004062:	460c      	mov	r4, r1
 8004064:	b913      	cbnz	r3, 800406c <_fflush_r+0x10>
 8004066:	2500      	movs	r5, #0
 8004068:	4628      	mov	r0, r5
 800406a:	bd38      	pop	{r3, r4, r5, pc}
 800406c:	b118      	cbz	r0, 8004076 <_fflush_r+0x1a>
 800406e:	6983      	ldr	r3, [r0, #24]
 8004070:	b90b      	cbnz	r3, 8004076 <_fflush_r+0x1a>
 8004072:	f7ff fa1b 	bl	80034ac <__sinit>
 8004076:	4b14      	ldr	r3, [pc, #80]	; (80040c8 <_fflush_r+0x6c>)
 8004078:	429c      	cmp	r4, r3
 800407a:	d11b      	bne.n	80040b4 <_fflush_r+0x58>
 800407c:	686c      	ldr	r4, [r5, #4]
 800407e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d0ef      	beq.n	8004066 <_fflush_r+0xa>
 8004086:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004088:	07d0      	lsls	r0, r2, #31
 800408a:	d404      	bmi.n	8004096 <_fflush_r+0x3a>
 800408c:	0599      	lsls	r1, r3, #22
 800408e:	d402      	bmi.n	8004096 <_fflush_r+0x3a>
 8004090:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004092:	f7ff faa9 	bl	80035e8 <__retarget_lock_acquire_recursive>
 8004096:	4628      	mov	r0, r5
 8004098:	4621      	mov	r1, r4
 800409a:	f7ff ff5d 	bl	8003f58 <__sflush_r>
 800409e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80040a0:	07da      	lsls	r2, r3, #31
 80040a2:	4605      	mov	r5, r0
 80040a4:	d4e0      	bmi.n	8004068 <_fflush_r+0xc>
 80040a6:	89a3      	ldrh	r3, [r4, #12]
 80040a8:	059b      	lsls	r3, r3, #22
 80040aa:	d4dd      	bmi.n	8004068 <_fflush_r+0xc>
 80040ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80040ae:	f7ff fa9c 	bl	80035ea <__retarget_lock_release_recursive>
 80040b2:	e7d9      	b.n	8004068 <_fflush_r+0xc>
 80040b4:	4b05      	ldr	r3, [pc, #20]	; (80040cc <_fflush_r+0x70>)
 80040b6:	429c      	cmp	r4, r3
 80040b8:	d101      	bne.n	80040be <_fflush_r+0x62>
 80040ba:	68ac      	ldr	r4, [r5, #8]
 80040bc:	e7df      	b.n	800407e <_fflush_r+0x22>
 80040be:	4b04      	ldr	r3, [pc, #16]	; (80040d0 <_fflush_r+0x74>)
 80040c0:	429c      	cmp	r4, r3
 80040c2:	bf08      	it	eq
 80040c4:	68ec      	ldreq	r4, [r5, #12]
 80040c6:	e7da      	b.n	800407e <_fflush_r+0x22>
 80040c8:	08004478 	.word	0x08004478
 80040cc:	08004498 	.word	0x08004498
 80040d0:	08004458 	.word	0x08004458

080040d4 <_lseek_r>:
 80040d4:	b538      	push	{r3, r4, r5, lr}
 80040d6:	4d07      	ldr	r5, [pc, #28]	; (80040f4 <_lseek_r+0x20>)
 80040d8:	4604      	mov	r4, r0
 80040da:	4608      	mov	r0, r1
 80040dc:	4611      	mov	r1, r2
 80040de:	2200      	movs	r2, #0
 80040e0:	602a      	str	r2, [r5, #0]
 80040e2:	461a      	mov	r2, r3
 80040e4:	f7fc fc46 	bl	8000974 <_lseek>
 80040e8:	1c43      	adds	r3, r0, #1
 80040ea:	d102      	bne.n	80040f2 <_lseek_r+0x1e>
 80040ec:	682b      	ldr	r3, [r5, #0]
 80040ee:	b103      	cbz	r3, 80040f2 <_lseek_r+0x1e>
 80040f0:	6023      	str	r3, [r4, #0]
 80040f2:	bd38      	pop	{r3, r4, r5, pc}
 80040f4:	20000148 	.word	0x20000148

080040f8 <__swhatbuf_r>:
 80040f8:	b570      	push	{r4, r5, r6, lr}
 80040fa:	460e      	mov	r6, r1
 80040fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004100:	2900      	cmp	r1, #0
 8004102:	b096      	sub	sp, #88	; 0x58
 8004104:	4614      	mov	r4, r2
 8004106:	461d      	mov	r5, r3
 8004108:	da08      	bge.n	800411c <__swhatbuf_r+0x24>
 800410a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800410e:	2200      	movs	r2, #0
 8004110:	602a      	str	r2, [r5, #0]
 8004112:	061a      	lsls	r2, r3, #24
 8004114:	d410      	bmi.n	8004138 <__swhatbuf_r+0x40>
 8004116:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800411a:	e00e      	b.n	800413a <__swhatbuf_r+0x42>
 800411c:	466a      	mov	r2, sp
 800411e:	f000 f8b9 	bl	8004294 <_fstat_r>
 8004122:	2800      	cmp	r0, #0
 8004124:	dbf1      	blt.n	800410a <__swhatbuf_r+0x12>
 8004126:	9a01      	ldr	r2, [sp, #4]
 8004128:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800412c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004130:	425a      	negs	r2, r3
 8004132:	415a      	adcs	r2, r3
 8004134:	602a      	str	r2, [r5, #0]
 8004136:	e7ee      	b.n	8004116 <__swhatbuf_r+0x1e>
 8004138:	2340      	movs	r3, #64	; 0x40
 800413a:	2000      	movs	r0, #0
 800413c:	6023      	str	r3, [r4, #0]
 800413e:	b016      	add	sp, #88	; 0x58
 8004140:	bd70      	pop	{r4, r5, r6, pc}
	...

08004144 <__smakebuf_r>:
 8004144:	898b      	ldrh	r3, [r1, #12]
 8004146:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004148:	079d      	lsls	r5, r3, #30
 800414a:	4606      	mov	r6, r0
 800414c:	460c      	mov	r4, r1
 800414e:	d507      	bpl.n	8004160 <__smakebuf_r+0x1c>
 8004150:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004154:	6023      	str	r3, [r4, #0]
 8004156:	6123      	str	r3, [r4, #16]
 8004158:	2301      	movs	r3, #1
 800415a:	6163      	str	r3, [r4, #20]
 800415c:	b002      	add	sp, #8
 800415e:	bd70      	pop	{r4, r5, r6, pc}
 8004160:	ab01      	add	r3, sp, #4
 8004162:	466a      	mov	r2, sp
 8004164:	f7ff ffc8 	bl	80040f8 <__swhatbuf_r>
 8004168:	9900      	ldr	r1, [sp, #0]
 800416a:	4605      	mov	r5, r0
 800416c:	4630      	mov	r0, r6
 800416e:	f7ff fa5d 	bl	800362c <_malloc_r>
 8004172:	b948      	cbnz	r0, 8004188 <__smakebuf_r+0x44>
 8004174:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004178:	059a      	lsls	r2, r3, #22
 800417a:	d4ef      	bmi.n	800415c <__smakebuf_r+0x18>
 800417c:	f023 0303 	bic.w	r3, r3, #3
 8004180:	f043 0302 	orr.w	r3, r3, #2
 8004184:	81a3      	strh	r3, [r4, #12]
 8004186:	e7e3      	b.n	8004150 <__smakebuf_r+0xc>
 8004188:	4b0d      	ldr	r3, [pc, #52]	; (80041c0 <__smakebuf_r+0x7c>)
 800418a:	62b3      	str	r3, [r6, #40]	; 0x28
 800418c:	89a3      	ldrh	r3, [r4, #12]
 800418e:	6020      	str	r0, [r4, #0]
 8004190:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004194:	81a3      	strh	r3, [r4, #12]
 8004196:	9b00      	ldr	r3, [sp, #0]
 8004198:	6163      	str	r3, [r4, #20]
 800419a:	9b01      	ldr	r3, [sp, #4]
 800419c:	6120      	str	r0, [r4, #16]
 800419e:	b15b      	cbz	r3, 80041b8 <__smakebuf_r+0x74>
 80041a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80041a4:	4630      	mov	r0, r6
 80041a6:	f000 f887 	bl	80042b8 <_isatty_r>
 80041aa:	b128      	cbz	r0, 80041b8 <__smakebuf_r+0x74>
 80041ac:	89a3      	ldrh	r3, [r4, #12]
 80041ae:	f023 0303 	bic.w	r3, r3, #3
 80041b2:	f043 0301 	orr.w	r3, r3, #1
 80041b6:	81a3      	strh	r3, [r4, #12]
 80041b8:	89a0      	ldrh	r0, [r4, #12]
 80041ba:	4305      	orrs	r5, r0
 80041bc:	81a5      	strh	r5, [r4, #12]
 80041be:	e7cd      	b.n	800415c <__smakebuf_r+0x18>
 80041c0:	08003445 	.word	0x08003445

080041c4 <__malloc_lock>:
 80041c4:	4801      	ldr	r0, [pc, #4]	; (80041cc <__malloc_lock+0x8>)
 80041c6:	f7ff ba0f 	b.w	80035e8 <__retarget_lock_acquire_recursive>
 80041ca:	bf00      	nop
 80041cc:	2000013c 	.word	0x2000013c

080041d0 <__malloc_unlock>:
 80041d0:	4801      	ldr	r0, [pc, #4]	; (80041d8 <__malloc_unlock+0x8>)
 80041d2:	f7ff ba0a 	b.w	80035ea <__retarget_lock_release_recursive>
 80041d6:	bf00      	nop
 80041d8:	2000013c 	.word	0x2000013c

080041dc <_free_r>:
 80041dc:	b538      	push	{r3, r4, r5, lr}
 80041de:	4605      	mov	r5, r0
 80041e0:	2900      	cmp	r1, #0
 80041e2:	d041      	beq.n	8004268 <_free_r+0x8c>
 80041e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041e8:	1f0c      	subs	r4, r1, #4
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	bfb8      	it	lt
 80041ee:	18e4      	addlt	r4, r4, r3
 80041f0:	f7ff ffe8 	bl	80041c4 <__malloc_lock>
 80041f4:	4a1d      	ldr	r2, [pc, #116]	; (800426c <_free_r+0x90>)
 80041f6:	6813      	ldr	r3, [r2, #0]
 80041f8:	b933      	cbnz	r3, 8004208 <_free_r+0x2c>
 80041fa:	6063      	str	r3, [r4, #4]
 80041fc:	6014      	str	r4, [r2, #0]
 80041fe:	4628      	mov	r0, r5
 8004200:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004204:	f7ff bfe4 	b.w	80041d0 <__malloc_unlock>
 8004208:	42a3      	cmp	r3, r4
 800420a:	d908      	bls.n	800421e <_free_r+0x42>
 800420c:	6820      	ldr	r0, [r4, #0]
 800420e:	1821      	adds	r1, r4, r0
 8004210:	428b      	cmp	r3, r1
 8004212:	bf01      	itttt	eq
 8004214:	6819      	ldreq	r1, [r3, #0]
 8004216:	685b      	ldreq	r3, [r3, #4]
 8004218:	1809      	addeq	r1, r1, r0
 800421a:	6021      	streq	r1, [r4, #0]
 800421c:	e7ed      	b.n	80041fa <_free_r+0x1e>
 800421e:	461a      	mov	r2, r3
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	b10b      	cbz	r3, 8004228 <_free_r+0x4c>
 8004224:	42a3      	cmp	r3, r4
 8004226:	d9fa      	bls.n	800421e <_free_r+0x42>
 8004228:	6811      	ldr	r1, [r2, #0]
 800422a:	1850      	adds	r0, r2, r1
 800422c:	42a0      	cmp	r0, r4
 800422e:	d10b      	bne.n	8004248 <_free_r+0x6c>
 8004230:	6820      	ldr	r0, [r4, #0]
 8004232:	4401      	add	r1, r0
 8004234:	1850      	adds	r0, r2, r1
 8004236:	4283      	cmp	r3, r0
 8004238:	6011      	str	r1, [r2, #0]
 800423a:	d1e0      	bne.n	80041fe <_free_r+0x22>
 800423c:	6818      	ldr	r0, [r3, #0]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	6053      	str	r3, [r2, #4]
 8004242:	4401      	add	r1, r0
 8004244:	6011      	str	r1, [r2, #0]
 8004246:	e7da      	b.n	80041fe <_free_r+0x22>
 8004248:	d902      	bls.n	8004250 <_free_r+0x74>
 800424a:	230c      	movs	r3, #12
 800424c:	602b      	str	r3, [r5, #0]
 800424e:	e7d6      	b.n	80041fe <_free_r+0x22>
 8004250:	6820      	ldr	r0, [r4, #0]
 8004252:	1821      	adds	r1, r4, r0
 8004254:	428b      	cmp	r3, r1
 8004256:	bf04      	itt	eq
 8004258:	6819      	ldreq	r1, [r3, #0]
 800425a:	685b      	ldreq	r3, [r3, #4]
 800425c:	6063      	str	r3, [r4, #4]
 800425e:	bf04      	itt	eq
 8004260:	1809      	addeq	r1, r1, r0
 8004262:	6021      	streq	r1, [r4, #0]
 8004264:	6054      	str	r4, [r2, #4]
 8004266:	e7ca      	b.n	80041fe <_free_r+0x22>
 8004268:	bd38      	pop	{r3, r4, r5, pc}
 800426a:	bf00      	nop
 800426c:	20000140 	.word	0x20000140

08004270 <_read_r>:
 8004270:	b538      	push	{r3, r4, r5, lr}
 8004272:	4d07      	ldr	r5, [pc, #28]	; (8004290 <_read_r+0x20>)
 8004274:	4604      	mov	r4, r0
 8004276:	4608      	mov	r0, r1
 8004278:	4611      	mov	r1, r2
 800427a:	2200      	movs	r2, #0
 800427c:	602a      	str	r2, [r5, #0]
 800427e:	461a      	mov	r2, r3
 8004280:	f7fc fb1b 	bl	80008ba <_read>
 8004284:	1c43      	adds	r3, r0, #1
 8004286:	d102      	bne.n	800428e <_read_r+0x1e>
 8004288:	682b      	ldr	r3, [r5, #0]
 800428a:	b103      	cbz	r3, 800428e <_read_r+0x1e>
 800428c:	6023      	str	r3, [r4, #0]
 800428e:	bd38      	pop	{r3, r4, r5, pc}
 8004290:	20000148 	.word	0x20000148

08004294 <_fstat_r>:
 8004294:	b538      	push	{r3, r4, r5, lr}
 8004296:	4d07      	ldr	r5, [pc, #28]	; (80042b4 <_fstat_r+0x20>)
 8004298:	2300      	movs	r3, #0
 800429a:	4604      	mov	r4, r0
 800429c:	4608      	mov	r0, r1
 800429e:	4611      	mov	r1, r2
 80042a0:	602b      	str	r3, [r5, #0]
 80042a2:	f7fc fb4e 	bl	8000942 <_fstat>
 80042a6:	1c43      	adds	r3, r0, #1
 80042a8:	d102      	bne.n	80042b0 <_fstat_r+0x1c>
 80042aa:	682b      	ldr	r3, [r5, #0]
 80042ac:	b103      	cbz	r3, 80042b0 <_fstat_r+0x1c>
 80042ae:	6023      	str	r3, [r4, #0]
 80042b0:	bd38      	pop	{r3, r4, r5, pc}
 80042b2:	bf00      	nop
 80042b4:	20000148 	.word	0x20000148

080042b8 <_isatty_r>:
 80042b8:	b538      	push	{r3, r4, r5, lr}
 80042ba:	4d06      	ldr	r5, [pc, #24]	; (80042d4 <_isatty_r+0x1c>)
 80042bc:	2300      	movs	r3, #0
 80042be:	4604      	mov	r4, r0
 80042c0:	4608      	mov	r0, r1
 80042c2:	602b      	str	r3, [r5, #0]
 80042c4:	f7fc fb4c 	bl	8000960 <_isatty>
 80042c8:	1c43      	adds	r3, r0, #1
 80042ca:	d102      	bne.n	80042d2 <_isatty_r+0x1a>
 80042cc:	682b      	ldr	r3, [r5, #0]
 80042ce:	b103      	cbz	r3, 80042d2 <_isatty_r+0x1a>
 80042d0:	6023      	str	r3, [r4, #0]
 80042d2:	bd38      	pop	{r3, r4, r5, pc}
 80042d4:	20000148 	.word	0x20000148

080042d8 <_init>:
 80042d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042da:	bf00      	nop
 80042dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042de:	bc08      	pop	{r3}
 80042e0:	469e      	mov	lr, r3
 80042e2:	4770      	bx	lr

080042e4 <_fini>:
 80042e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042e6:	bf00      	nop
 80042e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042ea:	bc08      	pop	{r3}
 80042ec:	469e      	mov	lr, r3
 80042ee:	4770      	bx	lr
