
GPIO_IOToggle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b70  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  08002cb0  08002cb0  00012cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002df0  08002df0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002df0  08002df0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002df0  08002df0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08002df0  08002df0  00012df0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08002df8  08002df8  00012df8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002e00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000048  20000070  08002e70  00020070  2**2
                  ALLOC
 10 RAM1_region   00000000  200000b8  200000b8  00020070  2**0
                  CONTENTS
 11 RAM2_region   00000000  20008000  20008000  00020070  2**0
                  CONTENTS
 12 ._user_heap_stack 00000600  200000b8  200000b8  000200b8  2**0
                  ALLOC
 13 .ARM.attributes 0000002a  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 14 .debug_line   0000944c  00000000  00000000  0002009a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   00006dc6  00000000  00000000  000294e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00001713  00000000  00000000  000302ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000a70  00000000  00000000  000319c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000abd3a  00000000  00000000  00032430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 000009a8  00000000  00000000  000de170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0001be35  00000000  00000000  000deb18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  000fa94d  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000030fc  00000000  00000000  000fa9a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000070 	.word	0x20000070
 800015c:	00000000 	.word	0x00000000
 8000160:	08002c94 	.word	0x08002c94

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000074 	.word	0x20000074
 800017c:	08002c94 	.word	0x08002c94

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000220:	480d      	ldr	r0, [pc, #52]	; (8000258 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000222:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000224:	f000 f99c 	bl	8000560 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000228:	480c      	ldr	r0, [pc, #48]	; (800025c <LoopForever+0x6>)
  ldr r1, =_edata
 800022a:	490d      	ldr	r1, [pc, #52]	; (8000260 <LoopForever+0xa>)
  ldr r2, =_sidata
 800022c:	4a0d      	ldr	r2, [pc, #52]	; (8000264 <LoopForever+0xe>)
  movs r3, #0
 800022e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000230:	e002      	b.n	8000238 <LoopCopyDataInit>

08000232 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000232:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000234:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000236:	3304      	adds	r3, #4

08000238 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000238:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800023a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800023c:	d3f9      	bcc.n	8000232 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800023e:	4a0a      	ldr	r2, [pc, #40]	; (8000268 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000240:	4c0a      	ldr	r4, [pc, #40]	; (800026c <LoopForever+0x16>)
  movs r3, #0
 8000242:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000244:	e001      	b.n	800024a <LoopFillZerobss>

08000246 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000246:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000248:	3204      	adds	r2, #4

0800024a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800024a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800024c:	d3fb      	bcc.n	8000246 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800024e:	f001 fd6f 	bl	8001d30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000252:	f000 f827 	bl	80002a4 <main>

08000256 <LoopForever>:

LoopForever:
    b LoopForever
 8000256:	e7fe      	b.n	8000256 <LoopForever>
  ldr   r0, =_estack
 8000258:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800025c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000260:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000264:	08002e00 	.word	0x08002e00
  ldr r2, =_sbss
 8000268:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800026c:	200000b8 	.word	0x200000b8

08000270 <ADC_IRQHandler>:
  * @retval : None
  */
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000270:	e7fe      	b.n	8000270 <ADC_IRQHandler>

08000272 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000272:	b480      	push	{r7}
 8000274:	b085      	sub	sp, #20
 8000276:	af00      	add	r7, sp, #0
 8000278:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800027a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800027e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000280:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	4313      	orrs	r3, r2
 8000288:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800028a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800028e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	4013      	ands	r3, r2
 8000294:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000296:	68fb      	ldr	r3, [r7, #12]
}
 8000298:	bf00      	nop
 800029a:	3714      	adds	r7, #20
 800029c:	46bd      	mov	sp, r7
 800029e:	bc80      	pop	{r7}
 80002a0:	4770      	bx	lr
	...

080002a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002a8:	f000 f960 	bl	800056c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002ac:	f000 f83a 	bl	8000324 <SystemClock_Config>

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */

   /* -1- Enable GPIO Clock (to be able to program the configuration registers) */
  LED2_GPIO_CLK_ENABLE();
 80002b0:	2002      	movs	r0, #2
 80002b2:	f7ff ffde 	bl	8000272 <LL_AHB2_GRP1_EnableClock>
  LED1_GPIO_CLK_ENABLE();
 80002b6:	2002      	movs	r0, #2
 80002b8:	f7ff ffdb 	bl	8000272 <LL_AHB2_GRP1_EnableClock>

  /* -2- Configure IO in output push-pull mode to drive external LEDs */
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 80002bc:	4b16      	ldr	r3, [pc, #88]	; (8000318 <main+0x74>)
 80002be:	2201      	movs	r2, #1
 80002c0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 80002c2:	4b15      	ldr	r3, [pc, #84]	; (8000318 <main+0x74>)
 80002c4:	2201      	movs	r2, #1
 80002c6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002c8:	4b13      	ldr	r3, [pc, #76]	; (8000318 <main+0x74>)
 80002ca:	2202      	movs	r2, #2
 80002cc:	60da      	str	r2, [r3, #12]

  GPIO_InitStruct.Pin = LED2_PIN;
 80002ce:	4b12      	ldr	r3, [pc, #72]	; (8000318 <main+0x74>)
 80002d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80002d4:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(LED2_GPIO_PORT, &GPIO_InitStruct);
 80002d6:	4910      	ldr	r1, [pc, #64]	; (8000318 <main+0x74>)
 80002d8:	4810      	ldr	r0, [pc, #64]	; (800031c <main+0x78>)
 80002da:	f000 fac3 	bl	8000864 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED1_PIN;
 80002de:	4b0e      	ldr	r3, [pc, #56]	; (8000318 <main+0x74>)
 80002e0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80002e4:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(LED1_GPIO_PORT, &GPIO_InitStruct);
 80002e6:	490c      	ldr	r1, [pc, #48]	; (8000318 <main+0x74>)
 80002e8:	480c      	ldr	r0, [pc, #48]	; (800031c <main+0x78>)
 80002ea:	f000 fabb 	bl	8000864 <HAL_GPIO_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_GPIO_TogglePin(LED2_GPIO_PORT, LED2_PIN);
 80002ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002f2:	480a      	ldr	r0, [pc, #40]	; (800031c <main+0x78>)
 80002f4:	f000 fc16 	bl	8000b24 <HAL_GPIO_TogglePin>
    /* Insert delay 100 ms */
    HAL_Delay(100);
 80002f8:	2064      	movs	r0, #100	; 0x64
 80002fa:	f000 f9ad 	bl	8000658 <HAL_Delay>
    HAL_GPIO_TogglePin(LED1_GPIO_PORT, LED1_PIN);
 80002fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000302:	4806      	ldr	r0, [pc, #24]	; (800031c <main+0x78>)
 8000304:	f000 fc0e 	bl	8000b24 <HAL_GPIO_TogglePin>
    /* Insert delay 100 ms */
    HAL_Delay(100);
 8000308:	2064      	movs	r0, #100	; 0x64
 800030a:	f000 f9a5 	bl	8000658 <HAL_Delay>
    printf("Test print");
 800030e:	4804      	ldr	r0, [pc, #16]	; (8000320 <main+0x7c>)
 8000310:	f001 fd3a 	bl	8001d88 <iprintf>
  {
 8000314:	e7eb      	b.n	80002ee <main+0x4a>
 8000316:	bf00      	nop
 8000318:	2000008c 	.word	0x2000008c
 800031c:	48000400 	.word	0x48000400
 8000320:	08002cb0 	.word	0x08002cb0

08000324 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b09a      	sub	sp, #104	; 0x68
 8000328:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800032a:	f107 0320 	add.w	r3, r7, #32
 800032e:	2248      	movs	r2, #72	; 0x48
 8000330:	2100      	movs	r1, #0
 8000332:	4618      	mov	r0, r3
 8000334:	f001 fd20 	bl	8001d78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000338:	1d3b      	adds	r3, r7, #4
 800033a:	2200      	movs	r2, #0
 800033c:	601a      	str	r2, [r3, #0]
 800033e:	605a      	str	r2, [r3, #4]
 8000340:	609a      	str	r2, [r3, #8]
 8000342:	60da      	str	r2, [r3, #12]
 8000344:	611a      	str	r2, [r3, #16]
 8000346:	615a      	str	r2, [r3, #20]
 8000348:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800034a:	4b1e      	ldr	r3, [pc, #120]	; (80003c4 <SystemClock_Config+0xa0>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000352:	4a1c      	ldr	r2, [pc, #112]	; (80003c4 <SystemClock_Config+0xa0>)
 8000354:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000358:	6013      	str	r3, [r2, #0]
 800035a:	4b1a      	ldr	r3, [pc, #104]	; (80003c4 <SystemClock_Config+0xa0>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000362:	603b      	str	r3, [r7, #0]
 8000364:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000366:	2320      	movs	r3, #32
 8000368:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800036a:	2301      	movs	r3, #1
 800036c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800036e:	2300      	movs	r3, #0
 8000370:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8000372:	23b0      	movs	r3, #176	; 0xb0
 8000374:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000376:	2300      	movs	r3, #0
 8000378:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800037a:	f107 0320 	add.w	r3, r7, #32
 800037e:	4618      	mov	r0, r3
 8000380:	f000 fea6 	bl	80010d0 <HAL_RCC_OscConfig>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d001      	beq.n	800038e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800038a:	f000 f81d 	bl	80003c8 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 800038e:	234f      	movs	r3, #79	; 0x4f
 8000390:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000392:	2300      	movs	r3, #0
 8000394:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000396:	2300      	movs	r3, #0
 8000398:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800039a:	2300      	movs	r3, #0
 800039c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800039e:	2300      	movs	r3, #0
 80003a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80003a2:	2300      	movs	r3, #0
 80003a4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003a6:	1d3b      	adds	r3, r7, #4
 80003a8:	2102      	movs	r1, #2
 80003aa:	4618      	mov	r0, r3
 80003ac:	f001 fa12 	bl	80017d4 <HAL_RCC_ClockConfig>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <SystemClock_Config+0x96>
  {
    Error_Handler();
 80003b6:	f000 f807 	bl	80003c8 <Error_Handler>
  }
}
 80003ba:	bf00      	nop
 80003bc:	3768      	adds	r7, #104	; 0x68
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	bf00      	nop
 80003c4:	58000400 	.word	0x58000400

080003c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003c8:	b480      	push	{r7}
 80003ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
 80003cc:	e7fe      	b.n	80003cc <Error_Handler+0x4>

080003ce <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003ce:	b480      	push	{r7}
 80003d0:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003d2:	bf00      	nop
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bc80      	pop	{r7}
 80003d8:	4770      	bx	lr

080003da <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003da:	b480      	push	{r7}
 80003dc:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80003de:	bf00      	nop
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bc80      	pop	{r7}
 80003e4:	4770      	bx	lr

080003e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003e6:	b480      	push	{r7}
 80003e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003ea:	e7fe      	b.n	80003ea <HardFault_Handler+0x4>

080003ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003f0:	e7fe      	b.n	80003f0 <MemManage_Handler+0x4>

080003f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003f2:	b480      	push	{r7}
 80003f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003f6:	bf00      	nop
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bc80      	pop	{r7}
 80003fc:	4770      	bx	lr

080003fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003fe:	b480      	push	{r7}
 8000400:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000402:	bf00      	nop
 8000404:	46bd      	mov	sp, r7
 8000406:	bc80      	pop	{r7}
 8000408:	4770      	bx	lr

0800040a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800040a:	b480      	push	{r7}
 800040c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800040e:	bf00      	nop
 8000410:	46bd      	mov	sp, r7
 8000412:	bc80      	pop	{r7}
 8000414:	4770      	bx	lr

08000416 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000416:	b580      	push	{r7, lr}
 8000418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800041a:	f000 f901 	bl	8000620 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800041e:	bf00      	nop
 8000420:	bd80      	pop	{r7, pc}

08000422 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000422:	b580      	push	{r7, lr}
 8000424:	b086      	sub	sp, #24
 8000426:	af00      	add	r7, sp, #0
 8000428:	60f8      	str	r0, [r7, #12]
 800042a:	60b9      	str	r1, [r7, #8]
 800042c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800042e:	2300      	movs	r3, #0
 8000430:	617b      	str	r3, [r7, #20]
 8000432:	e00a      	b.n	800044a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000434:	f3af 8000 	nop.w
 8000438:	4601      	mov	r1, r0
 800043a:	68bb      	ldr	r3, [r7, #8]
 800043c:	1c5a      	adds	r2, r3, #1
 800043e:	60ba      	str	r2, [r7, #8]
 8000440:	b2ca      	uxtb	r2, r1
 8000442:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000444:	697b      	ldr	r3, [r7, #20]
 8000446:	3301      	adds	r3, #1
 8000448:	617b      	str	r3, [r7, #20]
 800044a:	697a      	ldr	r2, [r7, #20]
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	429a      	cmp	r2, r3
 8000450:	dbf0      	blt.n	8000434 <_read+0x12>
	}

return len;
 8000452:	687b      	ldr	r3, [r7, #4]
}
 8000454:	4618      	mov	r0, r3
 8000456:	3718      	adds	r7, #24
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}

0800045c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b086      	sub	sp, #24
 8000460:	af00      	add	r7, sp, #0
 8000462:	60f8      	str	r0, [r7, #12]
 8000464:	60b9      	str	r1, [r7, #8]
 8000466:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000468:	2300      	movs	r3, #0
 800046a:	617b      	str	r3, [r7, #20]
 800046c:	e009      	b.n	8000482 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800046e:	68bb      	ldr	r3, [r7, #8]
 8000470:	1c5a      	adds	r2, r3, #1
 8000472:	60ba      	str	r2, [r7, #8]
 8000474:	781b      	ldrb	r3, [r3, #0]
 8000476:	4618      	mov	r0, r3
 8000478:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800047c:	697b      	ldr	r3, [r7, #20]
 800047e:	3301      	adds	r3, #1
 8000480:	617b      	str	r3, [r7, #20]
 8000482:	697a      	ldr	r2, [r7, #20]
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	429a      	cmp	r2, r3
 8000488:	dbf1      	blt.n	800046e <_write+0x12>
	}
	return len;
 800048a:	687b      	ldr	r3, [r7, #4]
}
 800048c:	4618      	mov	r0, r3
 800048e:	3718      	adds	r7, #24
 8000490:	46bd      	mov	sp, r7
 8000492:	bd80      	pop	{r7, pc}

08000494 <_close>:

int _close(int file)
{
 8000494:	b480      	push	{r7}
 8000496:	b083      	sub	sp, #12
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
	return -1;
 800049c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80004a0:	4618      	mov	r0, r3
 80004a2:	370c      	adds	r7, #12
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bc80      	pop	{r7}
 80004a8:	4770      	bx	lr

080004aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80004aa:	b480      	push	{r7}
 80004ac:	b083      	sub	sp, #12
 80004ae:	af00      	add	r7, sp, #0
 80004b0:	6078      	str	r0, [r7, #4]
 80004b2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80004b4:	683b      	ldr	r3, [r7, #0]
 80004b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80004ba:	605a      	str	r2, [r3, #4]
	return 0;
 80004bc:	2300      	movs	r3, #0
}
 80004be:	4618      	mov	r0, r3
 80004c0:	370c      	adds	r7, #12
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bc80      	pop	{r7}
 80004c6:	4770      	bx	lr

080004c8 <_isatty>:

int _isatty(int file)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
	return 1;
 80004d0:	2301      	movs	r3, #1
}
 80004d2:	4618      	mov	r0, r3
 80004d4:	370c      	adds	r7, #12
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bc80      	pop	{r7}
 80004da:	4770      	bx	lr

080004dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80004dc:	b480      	push	{r7}
 80004de:	b085      	sub	sp, #20
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	60f8      	str	r0, [r7, #12]
 80004e4:	60b9      	str	r1, [r7, #8]
 80004e6:	607a      	str	r2, [r7, #4]
	return 0;
 80004e8:	2300      	movs	r3, #0
}
 80004ea:	4618      	mov	r0, r3
 80004ec:	3714      	adds	r7, #20
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bc80      	pop	{r7}
 80004f2:	4770      	bx	lr

080004f4 <_sbrk>:
  *
  * @param incr Memory size
  * @return Pointer to allocated memory
  */
void *_sbrk(ptrdiff_t incr)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b086      	sub	sp, #24
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004fc:	4a14      	ldr	r2, [pc, #80]	; (8000550 <_sbrk+0x5c>)
 80004fe:	4b15      	ldr	r3, [pc, #84]	; (8000554 <_sbrk+0x60>)
 8000500:	1ad3      	subs	r3, r2, r3
 8000502:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000504:	697b      	ldr	r3, [r7, #20]
 8000506:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize  heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000508:	4b13      	ldr	r3, [pc, #76]	; (8000558 <_sbrk+0x64>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	2b00      	cmp	r3, #0
 800050e:	d102      	bne.n	8000516 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000510:	4b11      	ldr	r3, [pc, #68]	; (8000558 <_sbrk+0x64>)
 8000512:	4a12      	ldr	r2, [pc, #72]	; (800055c <_sbrk+0x68>)
 8000514:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000516:	4b10      	ldr	r3, [pc, #64]	; (8000558 <_sbrk+0x64>)
 8000518:	681a      	ldr	r2, [r3, #0]
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	4413      	add	r3, r2
 800051e:	693a      	ldr	r2, [r7, #16]
 8000520:	429a      	cmp	r2, r3
 8000522:	d207      	bcs.n	8000534 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000524:	f001 fbfe 	bl	8001d24 <__errno>
 8000528:	4603      	mov	r3, r0
 800052a:	220c      	movs	r2, #12
 800052c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800052e:	f04f 33ff 	mov.w	r3, #4294967295
 8000532:	e009      	b.n	8000548 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000534:	4b08      	ldr	r3, [pc, #32]	; (8000558 <_sbrk+0x64>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800053a:	4b07      	ldr	r3, [pc, #28]	; (8000558 <_sbrk+0x64>)
 800053c:	681a      	ldr	r2, [r3, #0]
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	4413      	add	r3, r2
 8000542:	4a05      	ldr	r2, [pc, #20]	; (8000558 <_sbrk+0x64>)
 8000544:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000546:	68fb      	ldr	r3, [r7, #12]
}
 8000548:	4618      	mov	r0, r3
 800054a:	3718      	adds	r7, #24
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	20008000 	.word	0x20008000
 8000554:	00000400 	.word	0x00000400
 8000558:	200000a0 	.word	0x200000a0
 800055c:	200000b8 	.word	0x200000b8

08000560 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000564:	bf00      	nop
 8000566:	46bd      	mov	sp, r7
 8000568:	bc80      	pop	{r7}
 800056a:	4770      	bx	lr

0800056c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000572:	2300      	movs	r3, #0
 8000574:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000576:	2003      	movs	r0, #3
 8000578:	f000 f942 	bl	8000800 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800057c:	f001 fb0c 	bl	8001b98 <HAL_RCC_GetHCLKFreq>
 8000580:	4603      	mov	r3, r0
 8000582:	4a09      	ldr	r2, [pc, #36]	; (80005a8 <HAL_Init+0x3c>)
 8000584:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000586:	200f      	movs	r0, #15
 8000588:	f000 f810 	bl	80005ac <HAL_InitTick>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d002      	beq.n	8000598 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000592:	2301      	movs	r3, #1
 8000594:	71fb      	strb	r3, [r7, #7]
 8000596:	e001      	b.n	800059c <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000598:	f7ff ff19 	bl	80003ce <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800059c:	79fb      	ldrb	r3, [r7, #7]
}
 800059e:	4618      	mov	r0, r3
 80005a0:	3708      	adds	r7, #8
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	20000000 	.word	0x20000000

080005ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80005b4:	2300      	movs	r3, #0
 80005b6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80005b8:	4b17      	ldr	r3, [pc, #92]	; (8000618 <HAL_InitTick+0x6c>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d024      	beq.n	800060a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80005c0:	f001 faea 	bl	8001b98 <HAL_RCC_GetHCLKFreq>
 80005c4:	4602      	mov	r2, r0
 80005c6:	4b14      	ldr	r3, [pc, #80]	; (8000618 <HAL_InitTick+0x6c>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	4619      	mov	r1, r3
 80005cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005d0:	fbb3 f3f1 	udiv	r3, r3, r1
 80005d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80005d8:	4618      	mov	r0, r3
 80005da:	f000 f936 	bl	800084a <HAL_SYSTICK_Config>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d10f      	bne.n	8000604 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	2b0f      	cmp	r3, #15
 80005e8:	d809      	bhi.n	80005fe <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005ea:	2200      	movs	r2, #0
 80005ec:	6879      	ldr	r1, [r7, #4]
 80005ee:	f04f 30ff 	mov.w	r0, #4294967295
 80005f2:	f000 f910 	bl	8000816 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005f6:	4a09      	ldr	r2, [pc, #36]	; (800061c <HAL_InitTick+0x70>)
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	6013      	str	r3, [r2, #0]
 80005fc:	e007      	b.n	800060e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80005fe:	2301      	movs	r3, #1
 8000600:	73fb      	strb	r3, [r7, #15]
 8000602:	e004      	b.n	800060e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000604:	2301      	movs	r3, #1
 8000606:	73fb      	strb	r3, [r7, #15]
 8000608:	e001      	b.n	800060e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800060a:	2301      	movs	r3, #1
 800060c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800060e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000610:	4618      	mov	r0, r3
 8000612:	3710      	adds	r7, #16
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	20000008 	.word	0x20000008
 800061c:	20000004 	.word	0x20000004

08000620 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000624:	4b05      	ldr	r3, [pc, #20]	; (800063c <HAL_IncTick+0x1c>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	461a      	mov	r2, r3
 800062a:	4b05      	ldr	r3, [pc, #20]	; (8000640 <HAL_IncTick+0x20>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	4413      	add	r3, r2
 8000630:	4a03      	ldr	r2, [pc, #12]	; (8000640 <HAL_IncTick+0x20>)
 8000632:	6013      	str	r3, [r2, #0]
}
 8000634:	bf00      	nop
 8000636:	46bd      	mov	sp, r7
 8000638:	bc80      	pop	{r7}
 800063a:	4770      	bx	lr
 800063c:	20000008 	.word	0x20000008
 8000640:	200000a4 	.word	0x200000a4

08000644 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  return uwTick;
 8000648:	4b02      	ldr	r3, [pc, #8]	; (8000654 <HAL_GetTick+0x10>)
 800064a:	681b      	ldr	r3, [r3, #0]
}
 800064c:	4618      	mov	r0, r3
 800064e:	46bd      	mov	sp, r7
 8000650:	bc80      	pop	{r7}
 8000652:	4770      	bx	lr
 8000654:	200000a4 	.word	0x200000a4

08000658 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000660:	f7ff fff0 	bl	8000644 <HAL_GetTick>
 8000664:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000670:	d005      	beq.n	800067e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000672:	4b0a      	ldr	r3, [pc, #40]	; (800069c <HAL_Delay+0x44>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	461a      	mov	r2, r3
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	4413      	add	r3, r2
 800067c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800067e:	bf00      	nop
 8000680:	f7ff ffe0 	bl	8000644 <HAL_GetTick>
 8000684:	4602      	mov	r2, r0
 8000686:	68bb      	ldr	r3, [r7, #8]
 8000688:	1ad3      	subs	r3, r2, r3
 800068a:	68fa      	ldr	r2, [r7, #12]
 800068c:	429a      	cmp	r2, r3
 800068e:	d8f7      	bhi.n	8000680 <HAL_Delay+0x28>
  {
  }
}
 8000690:	bf00      	nop
 8000692:	bf00      	nop
 8000694:	3710      	adds	r7, #16
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	20000008 	.word	0x20000008

080006a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b085      	sub	sp, #20
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	f003 0307 	and.w	r3, r3, #7
 80006ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006b0:	4b0c      	ldr	r3, [pc, #48]	; (80006e4 <__NVIC_SetPriorityGrouping+0x44>)
 80006b2:	68db      	ldr	r3, [r3, #12]
 80006b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006b6:	68ba      	ldr	r2, [r7, #8]
 80006b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006bc:	4013      	ands	r3, r2
 80006be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006c4:	68bb      	ldr	r3, [r7, #8]
 80006c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006d2:	4a04      	ldr	r2, [pc, #16]	; (80006e4 <__NVIC_SetPriorityGrouping+0x44>)
 80006d4:	68bb      	ldr	r3, [r7, #8]
 80006d6:	60d3      	str	r3, [r2, #12]
}
 80006d8:	bf00      	nop
 80006da:	3714      	adds	r7, #20
 80006dc:	46bd      	mov	sp, r7
 80006de:	bc80      	pop	{r7}
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	e000ed00 	.word	0xe000ed00

080006e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006ec:	4b04      	ldr	r3, [pc, #16]	; (8000700 <__NVIC_GetPriorityGrouping+0x18>)
 80006ee:	68db      	ldr	r3, [r3, #12]
 80006f0:	0a1b      	lsrs	r3, r3, #8
 80006f2:	f003 0307 	and.w	r3, r3, #7
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bc80      	pop	{r7}
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	e000ed00 	.word	0xe000ed00

08000704 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	4603      	mov	r3, r0
 800070c:	6039      	str	r1, [r7, #0]
 800070e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000714:	2b00      	cmp	r3, #0
 8000716:	db0a      	blt.n	800072e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	b2da      	uxtb	r2, r3
 800071c:	490c      	ldr	r1, [pc, #48]	; (8000750 <__NVIC_SetPriority+0x4c>)
 800071e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000722:	0112      	lsls	r2, r2, #4
 8000724:	b2d2      	uxtb	r2, r2
 8000726:	440b      	add	r3, r1
 8000728:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800072c:	e00a      	b.n	8000744 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800072e:	683b      	ldr	r3, [r7, #0]
 8000730:	b2da      	uxtb	r2, r3
 8000732:	4908      	ldr	r1, [pc, #32]	; (8000754 <__NVIC_SetPriority+0x50>)
 8000734:	79fb      	ldrb	r3, [r7, #7]
 8000736:	f003 030f 	and.w	r3, r3, #15
 800073a:	3b04      	subs	r3, #4
 800073c:	0112      	lsls	r2, r2, #4
 800073e:	b2d2      	uxtb	r2, r2
 8000740:	440b      	add	r3, r1
 8000742:	761a      	strb	r2, [r3, #24]
}
 8000744:	bf00      	nop
 8000746:	370c      	adds	r7, #12
 8000748:	46bd      	mov	sp, r7
 800074a:	bc80      	pop	{r7}
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	e000e100 	.word	0xe000e100
 8000754:	e000ed00 	.word	0xe000ed00

08000758 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000758:	b480      	push	{r7}
 800075a:	b089      	sub	sp, #36	; 0x24
 800075c:	af00      	add	r7, sp, #0
 800075e:	60f8      	str	r0, [r7, #12]
 8000760:	60b9      	str	r1, [r7, #8]
 8000762:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	f003 0307 	and.w	r3, r3, #7
 800076a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800076c:	69fb      	ldr	r3, [r7, #28]
 800076e:	f1c3 0307 	rsb	r3, r3, #7
 8000772:	2b04      	cmp	r3, #4
 8000774:	bf28      	it	cs
 8000776:	2304      	movcs	r3, #4
 8000778:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800077a:	69fb      	ldr	r3, [r7, #28]
 800077c:	3304      	adds	r3, #4
 800077e:	2b06      	cmp	r3, #6
 8000780:	d902      	bls.n	8000788 <NVIC_EncodePriority+0x30>
 8000782:	69fb      	ldr	r3, [r7, #28]
 8000784:	3b03      	subs	r3, #3
 8000786:	e000      	b.n	800078a <NVIC_EncodePriority+0x32>
 8000788:	2300      	movs	r3, #0
 800078a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800078c:	f04f 32ff 	mov.w	r2, #4294967295
 8000790:	69bb      	ldr	r3, [r7, #24]
 8000792:	fa02 f303 	lsl.w	r3, r2, r3
 8000796:	43da      	mvns	r2, r3
 8000798:	68bb      	ldr	r3, [r7, #8]
 800079a:	401a      	ands	r2, r3
 800079c:	697b      	ldr	r3, [r7, #20]
 800079e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007a0:	f04f 31ff 	mov.w	r1, #4294967295
 80007a4:	697b      	ldr	r3, [r7, #20]
 80007a6:	fa01 f303 	lsl.w	r3, r1, r3
 80007aa:	43d9      	mvns	r1, r3
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007b0:	4313      	orrs	r3, r2
         );
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	3724      	adds	r7, #36	; 0x24
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bc80      	pop	{r7}
 80007ba:	4770      	bx	lr

080007bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	3b01      	subs	r3, #1
 80007c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007cc:	d301      	bcc.n	80007d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007ce:	2301      	movs	r3, #1
 80007d0:	e00f      	b.n	80007f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007d2:	4a0a      	ldr	r2, [pc, #40]	; (80007fc <SysTick_Config+0x40>)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	3b01      	subs	r3, #1
 80007d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007da:	210f      	movs	r1, #15
 80007dc:	f04f 30ff 	mov.w	r0, #4294967295
 80007e0:	f7ff ff90 	bl	8000704 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007e4:	4b05      	ldr	r3, [pc, #20]	; (80007fc <SysTick_Config+0x40>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007ea:	4b04      	ldr	r3, [pc, #16]	; (80007fc <SysTick_Config+0x40>)
 80007ec:	2207      	movs	r2, #7
 80007ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007f0:	2300      	movs	r3, #0
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	e000e010 	.word	0xe000e010

08000800 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000808:	6878      	ldr	r0, [r7, #4]
 800080a:	f7ff ff49 	bl	80006a0 <__NVIC_SetPriorityGrouping>
}
 800080e:	bf00      	nop
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}

08000816 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000816:	b580      	push	{r7, lr}
 8000818:	b086      	sub	sp, #24
 800081a:	af00      	add	r7, sp, #0
 800081c:	4603      	mov	r3, r0
 800081e:	60b9      	str	r1, [r7, #8]
 8000820:	607a      	str	r2, [r7, #4]
 8000822:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000824:	f7ff ff60 	bl	80006e8 <__NVIC_GetPriorityGrouping>
 8000828:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800082a:	687a      	ldr	r2, [r7, #4]
 800082c:	68b9      	ldr	r1, [r7, #8]
 800082e:	6978      	ldr	r0, [r7, #20]
 8000830:	f7ff ff92 	bl	8000758 <NVIC_EncodePriority>
 8000834:	4602      	mov	r2, r0
 8000836:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800083a:	4611      	mov	r1, r2
 800083c:	4618      	mov	r0, r3
 800083e:	f7ff ff61 	bl	8000704 <__NVIC_SetPriority>
}
 8000842:	bf00      	nop
 8000844:	3718      	adds	r7, #24
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}

0800084a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800084a:	b580      	push	{r7, lr}
 800084c:	b082      	sub	sp, #8
 800084e:	af00      	add	r7, sp, #0
 8000850:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000852:	6878      	ldr	r0, [r7, #4]
 8000854:	f7ff ffb2 	bl	80007bc <SysTick_Config>
 8000858:	4603      	mov	r3, r0
}
 800085a:	4618      	mov	r0, r3
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
	...

08000864 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000864:	b480      	push	{r7}
 8000866:	b087      	sub	sp, #28
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
 800086c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800086e:	2300      	movs	r3, #0
 8000870:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000872:	e140      	b.n	8000af6 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	681a      	ldr	r2, [r3, #0]
 8000878:	2101      	movs	r1, #1
 800087a:	697b      	ldr	r3, [r7, #20]
 800087c:	fa01 f303 	lsl.w	r3, r1, r3
 8000880:	4013      	ands	r3, r2
 8000882:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	2b00      	cmp	r3, #0
 8000888:	f000 8132 	beq.w	8000af0 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	685b      	ldr	r3, [r3, #4]
 8000890:	f003 0303 	and.w	r3, r3, #3
 8000894:	2b01      	cmp	r3, #1
 8000896:	d005      	beq.n	80008a4 <HAL_GPIO_Init+0x40>
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	685b      	ldr	r3, [r3, #4]
 800089c:	f003 0303 	and.w	r3, r3, #3
 80008a0:	2b02      	cmp	r3, #2
 80008a2:	d130      	bne.n	8000906 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	689b      	ldr	r3, [r3, #8]
 80008a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80008aa:	697b      	ldr	r3, [r7, #20]
 80008ac:	005b      	lsls	r3, r3, #1
 80008ae:	2203      	movs	r2, #3
 80008b0:	fa02 f303 	lsl.w	r3, r2, r3
 80008b4:	43db      	mvns	r3, r3
 80008b6:	693a      	ldr	r2, [r7, #16]
 80008b8:	4013      	ands	r3, r2
 80008ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	68da      	ldr	r2, [r3, #12]
 80008c0:	697b      	ldr	r3, [r7, #20]
 80008c2:	005b      	lsls	r3, r3, #1
 80008c4:	fa02 f303 	lsl.w	r3, r2, r3
 80008c8:	693a      	ldr	r2, [r7, #16]
 80008ca:	4313      	orrs	r3, r2
 80008cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	693a      	ldr	r2, [r7, #16]
 80008d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	685b      	ldr	r3, [r3, #4]
 80008d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80008da:	2201      	movs	r2, #1
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	fa02 f303 	lsl.w	r3, r2, r3
 80008e2:	43db      	mvns	r3, r3
 80008e4:	693a      	ldr	r2, [r7, #16]
 80008e6:	4013      	ands	r3, r2
 80008e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	685b      	ldr	r3, [r3, #4]
 80008ee:	091b      	lsrs	r3, r3, #4
 80008f0:	f003 0201 	and.w	r2, r3, #1
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	fa02 f303 	lsl.w	r3, r2, r3
 80008fa:	693a      	ldr	r2, [r7, #16]
 80008fc:	4313      	orrs	r3, r2
 80008fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	693a      	ldr	r2, [r7, #16]
 8000904:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	685b      	ldr	r3, [r3, #4]
 800090a:	f003 0303 	and.w	r3, r3, #3
 800090e:	2b03      	cmp	r3, #3
 8000910:	d017      	beq.n	8000942 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	68db      	ldr	r3, [r3, #12]
 8000916:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	005b      	lsls	r3, r3, #1
 800091c:	2203      	movs	r2, #3
 800091e:	fa02 f303 	lsl.w	r3, r2, r3
 8000922:	43db      	mvns	r3, r3
 8000924:	693a      	ldr	r2, [r7, #16]
 8000926:	4013      	ands	r3, r2
 8000928:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	689a      	ldr	r2, [r3, #8]
 800092e:	697b      	ldr	r3, [r7, #20]
 8000930:	005b      	lsls	r3, r3, #1
 8000932:	fa02 f303 	lsl.w	r3, r2, r3
 8000936:	693a      	ldr	r2, [r7, #16]
 8000938:	4313      	orrs	r3, r2
 800093a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	693a      	ldr	r2, [r7, #16]
 8000940:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	685b      	ldr	r3, [r3, #4]
 8000946:	f003 0303 	and.w	r3, r3, #3
 800094a:	2b02      	cmp	r3, #2
 800094c:	d123      	bne.n	8000996 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	08da      	lsrs	r2, r3, #3
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	3208      	adds	r2, #8
 8000956:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800095a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	f003 0307 	and.w	r3, r3, #7
 8000962:	009b      	lsls	r3, r3, #2
 8000964:	220f      	movs	r2, #15
 8000966:	fa02 f303 	lsl.w	r3, r2, r3
 800096a:	43db      	mvns	r3, r3
 800096c:	693a      	ldr	r2, [r7, #16]
 800096e:	4013      	ands	r3, r2
 8000970:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	691a      	ldr	r2, [r3, #16]
 8000976:	697b      	ldr	r3, [r7, #20]
 8000978:	f003 0307 	and.w	r3, r3, #7
 800097c:	009b      	lsls	r3, r3, #2
 800097e:	fa02 f303 	lsl.w	r3, r2, r3
 8000982:	693a      	ldr	r2, [r7, #16]
 8000984:	4313      	orrs	r3, r2
 8000986:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000988:	697b      	ldr	r3, [r7, #20]
 800098a:	08da      	lsrs	r2, r3, #3
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	3208      	adds	r2, #8
 8000990:	6939      	ldr	r1, [r7, #16]
 8000992:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	005b      	lsls	r3, r3, #1
 80009a0:	2203      	movs	r2, #3
 80009a2:	fa02 f303 	lsl.w	r3, r2, r3
 80009a6:	43db      	mvns	r3, r3
 80009a8:	693a      	ldr	r2, [r7, #16]
 80009aa:	4013      	ands	r3, r2
 80009ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	685b      	ldr	r3, [r3, #4]
 80009b2:	f003 0203 	and.w	r2, r3, #3
 80009b6:	697b      	ldr	r3, [r7, #20]
 80009b8:	005b      	lsls	r3, r3, #1
 80009ba:	fa02 f303 	lsl.w	r3, r2, r3
 80009be:	693a      	ldr	r2, [r7, #16]
 80009c0:	4313      	orrs	r3, r2
 80009c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	693a      	ldr	r2, [r7, #16]
 80009c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	685b      	ldr	r3, [r3, #4]
 80009ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	f000 808c 	beq.w	8000af0 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80009d8:	4a4e      	ldr	r2, [pc, #312]	; (8000b14 <HAL_GPIO_Init+0x2b0>)
 80009da:	697b      	ldr	r3, [r7, #20]
 80009dc:	089b      	lsrs	r3, r3, #2
 80009de:	3302      	adds	r3, #2
 80009e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80009e6:	697b      	ldr	r3, [r7, #20]
 80009e8:	f003 0303 	and.w	r3, r3, #3
 80009ec:	009b      	lsls	r3, r3, #2
 80009ee:	2207      	movs	r2, #7
 80009f0:	fa02 f303 	lsl.w	r3, r2, r3
 80009f4:	43db      	mvns	r3, r3
 80009f6:	693a      	ldr	r2, [r7, #16]
 80009f8:	4013      	ands	r3, r2
 80009fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000a02:	d00d      	beq.n	8000a20 <HAL_GPIO_Init+0x1bc>
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	4a44      	ldr	r2, [pc, #272]	; (8000b18 <HAL_GPIO_Init+0x2b4>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d007      	beq.n	8000a1c <HAL_GPIO_Init+0x1b8>
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	4a43      	ldr	r2, [pc, #268]	; (8000b1c <HAL_GPIO_Init+0x2b8>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d101      	bne.n	8000a18 <HAL_GPIO_Init+0x1b4>
 8000a14:	2302      	movs	r3, #2
 8000a16:	e004      	b.n	8000a22 <HAL_GPIO_Init+0x1be>
 8000a18:	2307      	movs	r3, #7
 8000a1a:	e002      	b.n	8000a22 <HAL_GPIO_Init+0x1be>
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	e000      	b.n	8000a22 <HAL_GPIO_Init+0x1be>
 8000a20:	2300      	movs	r3, #0
 8000a22:	697a      	ldr	r2, [r7, #20]
 8000a24:	f002 0203 	and.w	r2, r2, #3
 8000a28:	0092      	lsls	r2, r2, #2
 8000a2a:	4093      	lsls	r3, r2
 8000a2c:	693a      	ldr	r2, [r7, #16]
 8000a2e:	4313      	orrs	r3, r2
 8000a30:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a32:	4938      	ldr	r1, [pc, #224]	; (8000b14 <HAL_GPIO_Init+0x2b0>)
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	089b      	lsrs	r3, r3, #2
 8000a38:	3302      	adds	r3, #2
 8000a3a:	693a      	ldr	r2, [r7, #16]
 8000a3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000a40:	4b37      	ldr	r3, [pc, #220]	; (8000b20 <HAL_GPIO_Init+0x2bc>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	43db      	mvns	r3, r3
 8000a4a:	693a      	ldr	r2, [r7, #16]
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d003      	beq.n	8000a64 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8000a5c:	693a      	ldr	r2, [r7, #16]
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	4313      	orrs	r3, r2
 8000a62:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000a64:	4a2e      	ldr	r2, [pc, #184]	; (8000b20 <HAL_GPIO_Init+0x2bc>)
 8000a66:	693b      	ldr	r3, [r7, #16]
 8000a68:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000a6a:	4b2d      	ldr	r3, [pc, #180]	; (8000b20 <HAL_GPIO_Init+0x2bc>)
 8000a6c:	685b      	ldr	r3, [r3, #4]
 8000a6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	43db      	mvns	r3, r3
 8000a74:	693a      	ldr	r2, [r7, #16]
 8000a76:	4013      	ands	r3, r2
 8000a78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d003      	beq.n	8000a8e <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8000a86:	693a      	ldr	r2, [r7, #16]
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000a8e:	4a24      	ldr	r2, [pc, #144]	; (8000b20 <HAL_GPIO_Init+0x2bc>)
 8000a90:	693b      	ldr	r3, [r7, #16]
 8000a92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8000a94:	4b22      	ldr	r3, [pc, #136]	; (8000b20 <HAL_GPIO_Init+0x2bc>)
 8000a96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000a9a:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	43db      	mvns	r3, r3
 8000aa0:	693a      	ldr	r2, [r7, #16]
 8000aa2:	4013      	ands	r3, r2
 8000aa4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	685b      	ldr	r3, [r3, #4]
 8000aaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d003      	beq.n	8000aba <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8000ab2:	693a      	ldr	r2, [r7, #16]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	4313      	orrs	r3, r2
 8000ab8:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8000aba:	4a19      	ldr	r2, [pc, #100]	; (8000b20 <HAL_GPIO_Init+0x2bc>)
 8000abc:	693b      	ldr	r3, [r7, #16]
 8000abe:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8000ac2:	4b17      	ldr	r3, [pc, #92]	; (8000b20 <HAL_GPIO_Init+0x2bc>)
 8000ac4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000ac8:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	43db      	mvns	r3, r3
 8000ace:	693a      	ldr	r2, [r7, #16]
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	685b      	ldr	r3, [r3, #4]
 8000ad8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d003      	beq.n	8000ae8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000ae0:	693a      	ldr	r2, [r7, #16]
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8000ae8:	4a0d      	ldr	r2, [pc, #52]	; (8000b20 <HAL_GPIO_Init+0x2bc>)
 8000aea:	693b      	ldr	r3, [r7, #16]
 8000aec:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	3301      	adds	r3, #1
 8000af4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	697b      	ldr	r3, [r7, #20]
 8000afc:	fa22 f303 	lsr.w	r3, r2, r3
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	f47f aeb7 	bne.w	8000874 <HAL_GPIO_Init+0x10>
  }
}
 8000b06:	bf00      	nop
 8000b08:	bf00      	nop
 8000b0a:	371c      	adds	r7, #28
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bc80      	pop	{r7}
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	40010000 	.word	0x40010000
 8000b18:	48000400 	.word	0x48000400
 8000b1c:	48000800 	.word	0x48000800
 8000b20:	58000800 	.word	0x58000800

08000b24 <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b085      	sub	sp, #20
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
 8000b2c:	460b      	mov	r3, r1
 8000b2e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	695b      	ldr	r3, [r3, #20]
 8000b34:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000b36:	887a      	ldrh	r2, [r7, #2]
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	041a      	lsls	r2, r3, #16
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	43d9      	mvns	r1, r3
 8000b42:	887b      	ldrh	r3, [r7, #2]
 8000b44:	400b      	ands	r3, r1
 8000b46:	431a      	orrs	r2, r3
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	619a      	str	r2, [r3, #24]
}
 8000b4c:	bf00      	nop
 8000b4e:	3714      	adds	r7, #20
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bc80      	pop	{r7}
 8000b54:	4770      	bx	lr
	...

08000b58 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000b5c:	4b04      	ldr	r3, [pc, #16]	; (8000b70 <HAL_PWR_EnableBkUpAccess+0x18>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a03      	ldr	r2, [pc, #12]	; (8000b70 <HAL_PWR_EnableBkUpAccess+0x18>)
 8000b62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b66:	6013      	str	r3, [r2, #0]
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bc80      	pop	{r7}
 8000b6e:	4770      	bx	lr
 8000b70:	58000400 	.word	0x58000400

08000b74 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8000b78:	4b03      	ldr	r3, [pc, #12]	; (8000b88 <HAL_PWREx_GetVoltageRange+0x14>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bc80      	pop	{r7}
 8000b86:	4770      	bx	lr
 8000b88:	58000400 	.word	0x58000400

08000b8c <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8000b90:	4b06      	ldr	r3, [pc, #24]	; (8000bac <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b9c:	d101      	bne.n	8000ba2 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	e000      	b.n	8000ba4 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8000ba2:	2300      	movs	r3, #0
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bc80      	pop	{r7}
 8000baa:	4770      	bx	lr
 8000bac:	58000400 	.word	0x58000400

08000bb0 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8000bb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000bbe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bc2:	6013      	str	r3, [r2, #0]
}
 8000bc4:	bf00      	nop
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bc80      	pop	{r7}
 8000bca:	4770      	bx	lr

08000bcc <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8000bd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000bda:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000bde:	6013      	str	r3, [r2, #0]
}
 8000be0:	bf00      	nop
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bc80      	pop	{r7}
 8000be6:	4770      	bx	lr

08000be8 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8000bec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bf6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000bfa:	d101      	bne.n	8000c00 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	e000      	b.n	8000c02 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8000c00:	2300      	movs	r3, #0
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bc80      	pop	{r7}
 8000c08:	4770      	bx	lr

08000c0a <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000c0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c1c:	6013      	str	r3, [r2, #0]
}
 8000c1e:	bf00      	nop
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bc80      	pop	{r7}
 8000c24:	4770      	bx	lr

08000c26 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8000c2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c38:	6013      	str	r3, [r2, #0]
}
 8000c3a:	bf00      	nop
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bc80      	pop	{r7}
 8000c40:	4770      	bx	lr

08000c42 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000c42:	b480      	push	{r7}
 8000c44:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8000c46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000c54:	d101      	bne.n	8000c5a <LL_RCC_HSE_IsReady+0x18>
 8000c56:	2301      	movs	r3, #1
 8000c58:	e000      	b.n	8000c5c <LL_RCC_HSE_IsReady+0x1a>
 8000c5a:	2300      	movs	r3, #0
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bc80      	pop	{r7}
 8000c62:	4770      	bx	lr

08000c64 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000c68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c76:	6013      	str	r3, [r2, #0]
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bc80      	pop	{r7}
 8000c7e:	4770      	bx	lr

08000c80 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8000c84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c8e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000c92:	6013      	str	r3, [r2, #0]
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bc80      	pop	{r7}
 8000c9a:	4770      	bx	lr

08000c9c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8000ca0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000caa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cae:	d101      	bne.n	8000cb4 <LL_RCC_HSI_IsReady+0x18>
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	e000      	b.n	8000cb6 <LL_RCC_HSI_IsReady+0x1a>
 8000cb4:	2300      	movs	r3, #0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bc80      	pop	{r7}
 8000cbc:	4770      	bx	lr

08000cbe <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	b083      	sub	sp, #12
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000cc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	061b      	lsls	r3, r3, #24
 8000cd4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	604b      	str	r3, [r1, #4]
}
 8000cdc:	bf00      	nop
 8000cde:	370c      	adds	r7, #12
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bc80      	pop	{r7}
 8000ce4:	4770      	bx	lr

08000ce6 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8000cea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000cf2:	f003 0302 	and.w	r3, r3, #2
 8000cf6:	2b02      	cmp	r3, #2
 8000cf8:	d101      	bne.n	8000cfe <LL_RCC_LSE_IsReady+0x18>
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e000      	b.n	8000d00 <LL_RCC_LSE_IsReady+0x1a>
 8000cfe:	2300      	movs	r3, #0
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bc80      	pop	{r7}
 8000d06:	4770      	bx	lr

08000d08 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8000d0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d18:	f043 0301 	orr.w	r3, r3, #1
 8000d1c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bc80      	pop	{r7}
 8000d26:	4770      	bx	lr

08000d28 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8000d2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d38:	f023 0301 	bic.w	r3, r3, #1
 8000d3c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8000d40:	bf00      	nop
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bc80      	pop	{r7}
 8000d46:	4770      	bx	lr

08000d48 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8000d4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d54:	f003 0302 	and.w	r3, r3, #2
 8000d58:	2b02      	cmp	r3, #2
 8000d5a:	d101      	bne.n	8000d60 <LL_RCC_LSI_IsReady+0x18>
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	e000      	b.n	8000d62 <LL_RCC_LSI_IsReady+0x1a>
 8000d60:	2300      	movs	r3, #0
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bc80      	pop	{r7}
 8000d68:	4770      	bx	lr

08000d6a <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8000d6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d78:	f043 0301 	orr.w	r3, r3, #1
 8000d7c:	6013      	str	r3, [r2, #0]
}
 8000d7e:	bf00      	nop
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bc80      	pop	{r7}
 8000d84:	4770      	bx	lr

08000d86 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8000d86:	b480      	push	{r7}
 8000d88:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8000d8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d94:	f023 0301 	bic.w	r3, r3, #1
 8000d98:	6013      	str	r3, [r2, #0]
}
 8000d9a:	bf00      	nop
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bc80      	pop	{r7}
 8000da0:	4770      	bx	lr

08000da2 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8000da6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f003 0302 	and.w	r3, r3, #2
 8000db0:	2b02      	cmp	r3, #2
 8000db2:	d101      	bne.n	8000db8 <LL_RCC_MSI_IsReady+0x16>
 8000db4:	2301      	movs	r3, #1
 8000db6:	e000      	b.n	8000dba <LL_RCC_MSI_IsReady+0x18>
 8000db8:	2300      	movs	r3, #0
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bc80      	pop	{r7}
 8000dc0:	4770      	bx	lr

08000dc2 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8000dc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f003 0308 	and.w	r3, r3, #8
 8000dd0:	2b08      	cmp	r3, #8
 8000dd2:	d101      	bne.n	8000dd8 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	e000      	b.n	8000dda <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8000dd8:	2300      	movs	r3, #0
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bc80      	pop	{r7}
 8000de0:	4770      	bx	lr

08000de2 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8000de2:	b480      	push	{r7}
 8000de4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8000de6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bc80      	pop	{r7}
 8000df6:	4770      	bx	lr

08000df8 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8000dfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e04:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bc80      	pop	{r7}
 8000e0e:	4770      	bx	lr

08000e10 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8000e18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	021b      	lsls	r3, r3, #8
 8000e26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	604b      	str	r3, [r1, #4]
}
 8000e2e:	bf00      	nop
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bc80      	pop	{r7}
 8000e36:	4770      	bx	lr

08000e38 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000e40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e44:	689b      	ldr	r3, [r3, #8]
 8000e46:	f023 0203 	bic.w	r2, r3, #3
 8000e4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	608b      	str	r3, [r1, #8]
}
 8000e54:	bf00      	nop
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bc80      	pop	{r7}
 8000e5c:	4770      	bx	lr

08000e5e <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000e62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e66:	689b      	ldr	r3, [r3, #8]
 8000e68:	f003 030c 	and.w	r3, r3, #12
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bc80      	pop	{r7}
 8000e72:	4770      	bx	lr

08000e74 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000e7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e80:	689b      	ldr	r3, [r3, #8]
 8000e82:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	608b      	str	r3, [r1, #8]
}
 8000e90:	bf00      	nop
 8000e92:	370c      	adds	r7, #12
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bc80      	pop	{r7}
 8000e98:	4770      	bx	lr

08000e9a <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	b083      	sub	sp, #12
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8000ea2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ea6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000eaa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000eae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8000eba:	bf00      	nop
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bc80      	pop	{r7}
 8000ec2:	4770      	bx	lr

08000ec4 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8000ecc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ed0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000ed4:	f023 020f 	bic.w	r2, r3, #15
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	091b      	lsrs	r3, r3, #4
 8000edc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8000ee6:	bf00      	nop
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bc80      	pop	{r7}
 8000eee:	4770      	bx	lr

08000ef0 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000ef8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000f02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	608b      	str	r3, [r1, #8]
}
 8000f0c:	bf00      	nop
 8000f0e:	370c      	adds	r7, #12
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bc80      	pop	{r7}
 8000f14:	4770      	bx	lr

08000f16 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000f16:	b480      	push	{r7}
 8000f18:	b083      	sub	sp, #12
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000f1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f22:	689b      	ldr	r3, [r3, #8]
 8000f24:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000f28:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	608b      	str	r3, [r1, #8]
}
 8000f32:	bf00      	nop
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bc80      	pop	{r7}
 8000f3a:	4770      	bx	lr

08000f3c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8000f40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f44:	689b      	ldr	r3, [r3, #8]
 8000f46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bc80      	pop	{r7}
 8000f50:	4770      	bx	lr

08000f52 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8000f52:	b480      	push	{r7}
 8000f54:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8000f56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f5a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000f5e:	011b      	lsls	r3, r3, #4
 8000f60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bc80      	pop	{r7}
 8000f6a:	4770      	bx	lr

08000f6c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000f70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f7e:	6013      	str	r3, [r2, #0]
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bc80      	pop	{r7}
 8000f86:	4770      	bx	lr

08000f88 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8000f8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000f9a:	6013      	str	r3, [r2, #0]
}
 8000f9c:	bf00      	nop
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bc80      	pop	{r7}
 8000fa2:	4770      	bx	lr

08000fa4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8000fa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fb2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000fb6:	d101      	bne.n	8000fbc <LL_RCC_PLL_IsReady+0x18>
 8000fb8:	2301      	movs	r3, #1
 8000fba:	e000      	b.n	8000fbe <LL_RCC_PLL_IsReady+0x1a>
 8000fbc:	2300      	movs	r3, #0
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bc80      	pop	{r7}
 8000fc4:	4770      	bx	lr

08000fc6 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8000fca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	0a1b      	lsrs	r3, r3, #8
 8000fd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bc80      	pop	{r7}
 8000fdc:	4770      	bx	lr

08000fde <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8000fe2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bc80      	pop	{r7}
 8000ff2:	4770      	bx	lr

08000ff4 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8000ff8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ffc:	68db      	ldr	r3, [r3, #12]
 8000ffe:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001002:	4618      	mov	r0, r3
 8001004:	46bd      	mov	sp, r7
 8001006:	bc80      	pop	{r7}
 8001008:	4770      	bx	lr

0800100a <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800100a:	b480      	push	{r7}
 800100c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800100e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	f003 0303 	and.w	r3, r3, #3
}
 8001018:	4618      	mov	r0, r3
 800101a:	46bd      	mov	sp, r7
 800101c:	bc80      	pop	{r7}
 800101e:	4770      	bx	lr

08001020 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001024:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800102e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001032:	d101      	bne.n	8001038 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001034:	2301      	movs	r3, #1
 8001036:	e000      	b.n	800103a <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001038:	2300      	movs	r3, #0
}
 800103a:	4618      	mov	r0, r3
 800103c:	46bd      	mov	sp, r7
 800103e:	bc80      	pop	{r7}
 8001040:	4770      	bx	lr

08001042 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001042:	b480      	push	{r7}
 8001044:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001046:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800104a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800104e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001052:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001056:	d101      	bne.n	800105c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001058:	2301      	movs	r3, #1
 800105a:	e000      	b.n	800105e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800105c:	2300      	movs	r3, #0
}
 800105e:	4618      	mov	r0, r3
 8001060:	46bd      	mov	sp, r7
 8001062:	bc80      	pop	{r7}
 8001064:	4770      	bx	lr

08001066 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001066:	b480      	push	{r7}
 8001068:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800106a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800106e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001072:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001076:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800107a:	d101      	bne.n	8001080 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800107c:	2301      	movs	r3, #1
 800107e:	e000      	b.n	8001082 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001080:	2300      	movs	r3, #0
}
 8001082:	4618      	mov	r0, r3
 8001084:	46bd      	mov	sp, r7
 8001086:	bc80      	pop	{r7}
 8001088:	4770      	bx	lr

0800108a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800108a:	b480      	push	{r7}
 800108c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800108e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001098:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800109c:	d101      	bne.n	80010a2 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800109e:	2301      	movs	r3, #1
 80010a0:	e000      	b.n	80010a4 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80010a2:	2300      	movs	r3, #0
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bc80      	pop	{r7}
 80010aa:	4770      	bx	lr

080010ac <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80010b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80010be:	d101      	bne.n	80010c4 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80010c0:	2301      	movs	r3, #1
 80010c2:	e000      	b.n	80010c6 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80010c4:	2300      	movs	r3, #0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bc80      	pop	{r7}
 80010cc:	4770      	bx	lr
	...

080010d0 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b088      	sub	sp, #32
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d101      	bne.n	80010e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	e36f      	b.n	80017c2 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010e2:	f7ff febc 	bl	8000e5e <LL_RCC_GetSysClkSource>
 80010e6:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80010e8:	f7ff ff8f 	bl	800100a <LL_RCC_PLL_GetMainSource>
 80010ec:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f003 0320 	and.w	r3, r3, #32
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	f000 80c4 	beq.w	8001284 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d005      	beq.n	800110e <HAL_RCC_OscConfig+0x3e>
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	2b0c      	cmp	r3, #12
 8001106:	d176      	bne.n	80011f6 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	2b01      	cmp	r3, #1
 800110c:	d173      	bne.n	80011f6 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6a1b      	ldr	r3, [r3, #32]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d101      	bne.n	800111a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	e353      	b.n	80017c2 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800111e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f003 0308 	and.w	r3, r3, #8
 8001128:	2b00      	cmp	r3, #0
 800112a:	d005      	beq.n	8001138 <HAL_RCC_OscConfig+0x68>
 800112c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001136:	e006      	b.n	8001146 <HAL_RCC_OscConfig+0x76>
 8001138:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800113c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001140:	091b      	lsrs	r3, r3, #4
 8001142:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001146:	4293      	cmp	r3, r2
 8001148:	d222      	bcs.n	8001190 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800114e:	4618      	mov	r0, r3
 8001150:	f000 fd36 	bl	8001bc0 <RCC_SetFlashLatencyFromMSIRange>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e331      	b.n	80017c2 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800115e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001168:	f043 0308 	orr.w	r3, r3, #8
 800116c:	6013      	str	r3, [r2, #0]
 800116e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800117c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001180:	4313      	orrs	r3, r2
 8001182:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff fe41 	bl	8000e10 <LL_RCC_MSI_SetCalibTrimming>
 800118e:	e021      	b.n	80011d4 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001190:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800119a:	f043 0308 	orr.w	r3, r3, #8
 800119e:	6013      	str	r3, [r2, #0]
 80011a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011b2:	4313      	orrs	r3, r2
 80011b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff fe28 	bl	8000e10 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011c4:	4618      	mov	r0, r3
 80011c6:	f000 fcfb 	bl	8001bc0 <RCC_SetFlashLatencyFromMSIRange>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 80011d0:	2301      	movs	r3, #1
 80011d2:	e2f6      	b.n	80017c2 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80011d4:	f000 fce0 	bl	8001b98 <HAL_RCC_GetHCLKFreq>
 80011d8:	4603      	mov	r3, r0
 80011da:	4aa7      	ldr	r2, [pc, #668]	; (8001478 <HAL_RCC_OscConfig+0x3a8>)
 80011dc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 80011de:	4ba7      	ldr	r3, [pc, #668]	; (800147c <HAL_RCC_OscConfig+0x3ac>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff f9e2 	bl	80005ac <HAL_InitTick>
 80011e8:	4603      	mov	r3, r0
 80011ea:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 80011ec:	7cfb      	ldrb	r3, [r7, #19]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d047      	beq.n	8001282 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 80011f2:	7cfb      	ldrb	r3, [r7, #19]
 80011f4:	e2e5      	b.n	80017c2 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6a1b      	ldr	r3, [r3, #32]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d02c      	beq.n	8001258 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80011fe:	f7ff fdb4 	bl	8000d6a <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001202:	f7ff fa1f 	bl	8000644 <HAL_GetTick>
 8001206:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001208:	e008      	b.n	800121c <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800120a:	f7ff fa1b 	bl	8000644 <HAL_GetTick>
 800120e:	4602      	mov	r2, r0
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	2b02      	cmp	r3, #2
 8001216:	d901      	bls.n	800121c <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8001218:	2303      	movs	r3, #3
 800121a:	e2d2      	b.n	80017c2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 800121c:	f7ff fdc1 	bl	8000da2 <LL_RCC_MSI_IsReady>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d0f1      	beq.n	800120a <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001226:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001230:	f043 0308 	orr.w	r3, r3, #8
 8001234:	6013      	str	r3, [r2, #0]
 8001236:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001244:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001248:	4313      	orrs	r3, r2
 800124a:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff fddd 	bl	8000e10 <LL_RCC_MSI_SetCalibTrimming>
 8001256:	e015      	b.n	8001284 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001258:	f7ff fd95 	bl	8000d86 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800125c:	f7ff f9f2 	bl	8000644 <HAL_GetTick>
 8001260:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001262:	e008      	b.n	8001276 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001264:	f7ff f9ee 	bl	8000644 <HAL_GetTick>
 8001268:	4602      	mov	r2, r0
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	2b02      	cmp	r3, #2
 8001270:	d901      	bls.n	8001276 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001272:	2303      	movs	r3, #3
 8001274:	e2a5      	b.n	80017c2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001276:	f7ff fd94 	bl	8000da2 <LL_RCC_MSI_IsReady>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d1f1      	bne.n	8001264 <HAL_RCC_OscConfig+0x194>
 8001280:	e000      	b.n	8001284 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001282:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 0301 	and.w	r3, r3, #1
 800128c:	2b00      	cmp	r3, #0
 800128e:	d058      	beq.n	8001342 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	2b08      	cmp	r3, #8
 8001294:	d005      	beq.n	80012a2 <HAL_RCC_OscConfig+0x1d2>
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	2b0c      	cmp	r3, #12
 800129a:	d108      	bne.n	80012ae <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	2b03      	cmp	r3, #3
 80012a0:	d105      	bne.n	80012ae <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d14b      	bne.n	8001342 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e289      	b.n	80017c2 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80012ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012c0:	4313      	orrs	r3, r2
 80012c2:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012cc:	d102      	bne.n	80012d4 <HAL_RCC_OscConfig+0x204>
 80012ce:	f7ff fc9c 	bl	8000c0a <LL_RCC_HSE_Enable>
 80012d2:	e00d      	b.n	80012f0 <HAL_RCC_OscConfig+0x220>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80012dc:	d104      	bne.n	80012e8 <HAL_RCC_OscConfig+0x218>
 80012de:	f7ff fc67 	bl	8000bb0 <LL_RCC_HSE_EnableTcxo>
 80012e2:	f7ff fc92 	bl	8000c0a <LL_RCC_HSE_Enable>
 80012e6:	e003      	b.n	80012f0 <HAL_RCC_OscConfig+0x220>
 80012e8:	f7ff fc9d 	bl	8000c26 <LL_RCC_HSE_Disable>
 80012ec:	f7ff fc6e 	bl	8000bcc <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d012      	beq.n	800131e <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f8:	f7ff f9a4 	bl	8000644 <HAL_GetTick>
 80012fc:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80012fe:	e008      	b.n	8001312 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001300:	f7ff f9a0 	bl	8000644 <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	2b64      	cmp	r3, #100	; 0x64
 800130c:	d901      	bls.n	8001312 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e257      	b.n	80017c2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001312:	f7ff fc96 	bl	8000c42 <LL_RCC_HSE_IsReady>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d0f1      	beq.n	8001300 <HAL_RCC_OscConfig+0x230>
 800131c:	e011      	b.n	8001342 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800131e:	f7ff f991 	bl	8000644 <HAL_GetTick>
 8001322:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001324:	e008      	b.n	8001338 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001326:	f7ff f98d 	bl	8000644 <HAL_GetTick>
 800132a:	4602      	mov	r2, r0
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	2b64      	cmp	r3, #100	; 0x64
 8001332:	d901      	bls.n	8001338 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001334:	2303      	movs	r3, #3
 8001336:	e244      	b.n	80017c2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001338:	f7ff fc83 	bl	8000c42 <LL_RCC_HSE_IsReady>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d1f1      	bne.n	8001326 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	2b00      	cmp	r3, #0
 800134c:	d046      	beq.n	80013dc <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	2b04      	cmp	r3, #4
 8001352:	d005      	beq.n	8001360 <HAL_RCC_OscConfig+0x290>
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	2b0c      	cmp	r3, #12
 8001358:	d10e      	bne.n	8001378 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	2b02      	cmp	r3, #2
 800135e:	d10b      	bne.n	8001378 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	691b      	ldr	r3, [r3, #16]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d101      	bne.n	800136c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001368:	2301      	movs	r3, #1
 800136a:	e22a      	b.n	80017c2 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	695b      	ldr	r3, [r3, #20]
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff fca4 	bl	8000cbe <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001376:	e031      	b.n	80013dc <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	691b      	ldr	r3, [r3, #16]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d019      	beq.n	80013b4 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001380:	f7ff fc70 	bl	8000c64 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001384:	f7ff f95e 	bl	8000644 <HAL_GetTick>
 8001388:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800138a:	e008      	b.n	800139e <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800138c:	f7ff f95a 	bl	8000644 <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	2b02      	cmp	r3, #2
 8001398:	d901      	bls.n	800139e <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	e211      	b.n	80017c2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 800139e:	f7ff fc7d 	bl	8000c9c <LL_RCC_HSI_IsReady>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d0f1      	beq.n	800138c <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	695b      	ldr	r3, [r3, #20]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff fc86 	bl	8000cbe <LL_RCC_HSI_SetCalibTrimming>
 80013b2:	e013      	b.n	80013dc <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013b4:	f7ff fc64 	bl	8000c80 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013b8:	f7ff f944 	bl	8000644 <HAL_GetTick>
 80013bc:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80013be:	e008      	b.n	80013d2 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013c0:	f7ff f940 	bl	8000644 <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d901      	bls.n	80013d2 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 80013ce:	2303      	movs	r3, #3
 80013d0:	e1f7      	b.n	80017c2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 80013d2:	f7ff fc63 	bl	8000c9c <LL_RCC_HSI_IsReady>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d1f1      	bne.n	80013c0 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0308 	and.w	r3, r3, #8
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d06e      	beq.n	80014c6 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d056      	beq.n	800149e <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 80013f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013f8:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	69da      	ldr	r2, [r3, #28]
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	f003 0310 	and.w	r3, r3, #16
 8001404:	429a      	cmp	r2, r3
 8001406:	d031      	beq.n	800146c <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	2b00      	cmp	r3, #0
 8001410:	d006      	beq.n	8001420 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001418:	2b00      	cmp	r3, #0
 800141a:	d101      	bne.n	8001420 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	e1d0      	b.n	80017c2 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	2b00      	cmp	r3, #0
 8001428:	d013      	beq.n	8001452 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 800142a:	f7ff fc7d 	bl	8000d28 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800142e:	f7ff f909 	bl	8000644 <HAL_GetTick>
 8001432:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8001434:	e008      	b.n	8001448 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001436:	f7ff f905 	bl	8000644 <HAL_GetTick>
 800143a:	4602      	mov	r2, r0
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	2b11      	cmp	r3, #17
 8001442:	d901      	bls.n	8001448 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8001444:	2303      	movs	r3, #3
 8001446:	e1bc      	b.n	80017c2 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8001448:	f7ff fc7e 	bl	8000d48 <LL_RCC_LSI_IsReady>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d1f1      	bne.n	8001436 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8001452:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001456:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800145a:	f023 0210 	bic.w	r2, r3, #16
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	69db      	ldr	r3, [r3, #28]
 8001462:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001466:	4313      	orrs	r3, r2
 8001468:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800146c:	f7ff fc4c 	bl	8000d08 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001470:	f7ff f8e8 	bl	8000644 <HAL_GetTick>
 8001474:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8001476:	e00c      	b.n	8001492 <HAL_RCC_OscConfig+0x3c2>
 8001478:	20000000 	.word	0x20000000
 800147c:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001480:	f7ff f8e0 	bl	8000644 <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	2b11      	cmp	r3, #17
 800148c:	d901      	bls.n	8001492 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e197      	b.n	80017c2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8001492:	f7ff fc59 	bl	8000d48 <LL_RCC_LSI_IsReady>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d0f1      	beq.n	8001480 <HAL_RCC_OscConfig+0x3b0>
 800149c:	e013      	b.n	80014c6 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800149e:	f7ff fc43 	bl	8000d28 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014a2:	f7ff f8cf 	bl	8000644 <HAL_GetTick>
 80014a6:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 80014a8:	e008      	b.n	80014bc <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014aa:	f7ff f8cb 	bl	8000644 <HAL_GetTick>
 80014ae:	4602      	mov	r2, r0
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	2b11      	cmp	r3, #17
 80014b6:	d901      	bls.n	80014bc <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80014b8:	2303      	movs	r3, #3
 80014ba:	e182      	b.n	80017c2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 80014bc:	f7ff fc44 	bl	8000d48 <LL_RCC_LSI_IsReady>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d1f1      	bne.n	80014aa <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0304 	and.w	r3, r3, #4
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	f000 80d8 	beq.w	8001684 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80014d4:	f7ff fb5a 	bl	8000b8c <LL_PWR_IsEnabledBkUpAccess>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d113      	bne.n	8001506 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80014de:	f7ff fb3b 	bl	8000b58 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014e2:	f7ff f8af 	bl	8000644 <HAL_GetTick>
 80014e6:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80014e8:	e008      	b.n	80014fc <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014ea:	f7ff f8ab 	bl	8000644 <HAL_GetTick>
 80014ee:	4602      	mov	r2, r0
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d901      	bls.n	80014fc <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 80014f8:	2303      	movs	r3, #3
 80014fa:	e162      	b.n	80017c2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80014fc:	f7ff fb46 	bl	8000b8c <LL_PWR_IsEnabledBkUpAccess>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d0f1      	beq.n	80014ea <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	68db      	ldr	r3, [r3, #12]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d07b      	beq.n	8001606 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	68db      	ldr	r3, [r3, #12]
 8001512:	2b85      	cmp	r3, #133	; 0x85
 8001514:	d003      	beq.n	800151e <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	68db      	ldr	r3, [r3, #12]
 800151a:	2b05      	cmp	r3, #5
 800151c:	d109      	bne.n	8001532 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800151e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001526:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800152a:	f043 0304 	orr.w	r3, r3, #4
 800152e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001532:	f7ff f887 	bl	8000644 <HAL_GetTick>
 8001536:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001538:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800153c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001540:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001544:	f043 0301 	orr.w	r3, r3, #1
 8001548:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800154c:	e00a      	b.n	8001564 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800154e:	f7ff f879 	bl	8000644 <HAL_GetTick>
 8001552:	4602      	mov	r2, r0
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	f241 3288 	movw	r2, #5000	; 0x1388
 800155c:	4293      	cmp	r3, r2
 800155e:	d901      	bls.n	8001564 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8001560:	2303      	movs	r3, #3
 8001562:	e12e      	b.n	80017c2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8001564:	f7ff fbbf 	bl	8000ce6 <LL_RCC_LSE_IsReady>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d0ef      	beq.n	800154e <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	68db      	ldr	r3, [r3, #12]
 8001572:	2b81      	cmp	r3, #129	; 0x81
 8001574:	d003      	beq.n	800157e <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	68db      	ldr	r3, [r3, #12]
 800157a:	2b85      	cmp	r3, #133	; 0x85
 800157c:	d121      	bne.n	80015c2 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800157e:	f7ff f861 	bl	8000644 <HAL_GetTick>
 8001582:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001584:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001588:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800158c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001590:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001594:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001598:	e00a      	b.n	80015b0 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800159a:	f7ff f853 	bl	8000644 <HAL_GetTick>
 800159e:	4602      	mov	r2, r0
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d901      	bls.n	80015b0 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e108      	b.n	80017c2 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80015b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d0ec      	beq.n	800159a <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80015c0:	e060      	b.n	8001684 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c2:	f7ff f83f 	bl	8000644 <HAL_GetTick>
 80015c6:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80015c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80015d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80015dc:	e00a      	b.n	80015f4 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015de:	f7ff f831 	bl	8000644 <HAL_GetTick>
 80015e2:	4602      	mov	r2, r0
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d901      	bls.n	80015f4 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 80015f0:	2303      	movs	r3, #3
 80015f2:	e0e6      	b.n	80017c2 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80015f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001600:	2b00      	cmp	r3, #0
 8001602:	d1ec      	bne.n	80015de <HAL_RCC_OscConfig+0x50e>
 8001604:	e03e      	b.n	8001684 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001606:	f7ff f81d 	bl	8000644 <HAL_GetTick>
 800160a:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800160c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001610:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001614:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001618:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800161c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001620:	e00a      	b.n	8001638 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001622:	f7ff f80f 	bl	8000644 <HAL_GetTick>
 8001626:	4602      	mov	r2, r0
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001630:	4293      	cmp	r3, r2
 8001632:	d901      	bls.n	8001638 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001634:	2303      	movs	r3, #3
 8001636:	e0c4      	b.n	80017c2 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001638:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800163c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001640:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001644:	2b00      	cmp	r3, #0
 8001646:	d1ec      	bne.n	8001622 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001648:	f7fe fffc 	bl	8000644 <HAL_GetTick>
 800164c:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800164e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001656:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800165a:	f023 0301 	bic.w	r3, r3, #1
 800165e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8001662:	e00a      	b.n	800167a <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001664:	f7fe ffee 	bl	8000644 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001672:	4293      	cmp	r3, r2
 8001674:	d901      	bls.n	800167a <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e0a3      	b.n	80017c2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 800167a:	f7ff fb34 	bl	8000ce6 <LL_RCC_LSE_IsReady>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d1ef      	bne.n	8001664 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001688:	2b00      	cmp	r3, #0
 800168a:	f000 8099 	beq.w	80017c0 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	2b0c      	cmp	r3, #12
 8001692:	d06c      	beq.n	800176e <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001698:	2b02      	cmp	r3, #2
 800169a:	d14b      	bne.n	8001734 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800169c:	f7ff fc74 	bl	8000f88 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a0:	f7fe ffd0 	bl	8000644 <HAL_GetTick>
 80016a4:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80016a6:	e008      	b.n	80016ba <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016a8:	f7fe ffcc 	bl	8000644 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	2b0a      	cmp	r3, #10
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e083      	b.n	80017c2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80016ba:	f7ff fc73 	bl	8000fa4 <LL_RCC_PLL_IsReady>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d1f1      	bne.n	80016a8 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016c8:	68da      	ldr	r2, [r3, #12]
 80016ca:	4b40      	ldr	r3, [pc, #256]	; (80017cc <HAL_RCC_OscConfig+0x6fc>)
 80016cc:	4013      	ands	r3, r2
 80016ce:	687a      	ldr	r2, [r7, #4]
 80016d0:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80016d6:	4311      	orrs	r1, r2
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80016dc:	0212      	lsls	r2, r2, #8
 80016de:	4311      	orrs	r1, r2
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80016e4:	4311      	orrs	r1, r2
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80016ea:	4311      	orrs	r1, r2
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80016f0:	430a      	orrs	r2, r1
 80016f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016f6:	4313      	orrs	r3, r2
 80016f8:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016fa:	f7ff fc37 	bl	8000f6c <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80016fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800170c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800170e:	f7fe ff99 	bl	8000644 <HAL_GetTick>
 8001712:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8001714:	e008      	b.n	8001728 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001716:	f7fe ff95 	bl	8000644 <HAL_GetTick>
 800171a:	4602      	mov	r2, r0
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	2b0a      	cmp	r3, #10
 8001722:	d901      	bls.n	8001728 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8001724:	2303      	movs	r3, #3
 8001726:	e04c      	b.n	80017c2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8001728:	f7ff fc3c 	bl	8000fa4 <LL_RCC_PLL_IsReady>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d0f1      	beq.n	8001716 <HAL_RCC_OscConfig+0x646>
 8001732:	e045      	b.n	80017c0 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001734:	f7ff fc28 	bl	8000f88 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001738:	f7fe ff84 	bl	8000644 <HAL_GetTick>
 800173c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800173e:	e008      	b.n	8001752 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001740:	f7fe ff80 	bl	8000644 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	2b0a      	cmp	r3, #10
 800174c:	d901      	bls.n	8001752 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e037      	b.n	80017c2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8001752:	f7ff fc27 	bl	8000fa4 <LL_RCC_PLL_IsReady>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d1f1      	bne.n	8001740 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800175c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001760:	68da      	ldr	r2, [r3, #12]
 8001762:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001766:	4b1a      	ldr	r3, [pc, #104]	; (80017d0 <HAL_RCC_OscConfig+0x700>)
 8001768:	4013      	ands	r3, r2
 800176a:	60cb      	str	r3, [r1, #12]
 800176c:	e028      	b.n	80017c0 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001772:	2b01      	cmp	r3, #1
 8001774:	d101      	bne.n	800177a <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e023      	b.n	80017c2 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800177a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	f003 0203 	and.w	r2, r3, #3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178c:	429a      	cmp	r2, r3
 800178e:	d115      	bne.n	80017bc <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800179a:	429a      	cmp	r2, r3
 800179c:	d10e      	bne.n	80017bc <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017a8:	021b      	lsls	r3, r3, #8
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d106      	bne.n	80017bc <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d001      	beq.n	80017c0 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	e000      	b.n	80017c2 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3720      	adds	r7, #32
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	11c1808c 	.word	0x11c1808c
 80017d0:	eefefffc 	.word	0xeefefffc

080017d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d101      	bne.n	80017e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e12c      	b.n	8001a42 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017e8:	4b98      	ldr	r3, [pc, #608]	; (8001a4c <HAL_RCC_ClockConfig+0x278>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0307 	and.w	r3, r3, #7
 80017f0:	683a      	ldr	r2, [r7, #0]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d91b      	bls.n	800182e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017f6:	4b95      	ldr	r3, [pc, #596]	; (8001a4c <HAL_RCC_ClockConfig+0x278>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f023 0207 	bic.w	r2, r3, #7
 80017fe:	4993      	ldr	r1, [pc, #588]	; (8001a4c <HAL_RCC_ClockConfig+0x278>)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	4313      	orrs	r3, r2
 8001804:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001806:	f7fe ff1d 	bl	8000644 <HAL_GetTick>
 800180a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800180c:	e008      	b.n	8001820 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800180e:	f7fe ff19 	bl	8000644 <HAL_GetTick>
 8001812:	4602      	mov	r2, r0
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	2b02      	cmp	r3, #2
 800181a:	d901      	bls.n	8001820 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800181c:	2303      	movs	r3, #3
 800181e:	e110      	b.n	8001a42 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001820:	4b8a      	ldr	r3, [pc, #552]	; (8001a4c <HAL_RCC_ClockConfig+0x278>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0307 	and.w	r3, r3, #7
 8001828:	683a      	ldr	r2, [r7, #0]
 800182a:	429a      	cmp	r2, r3
 800182c:	d1ef      	bne.n	800180e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	2b00      	cmp	r3, #0
 8001838:	d016      	beq.n	8001868 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	4618      	mov	r0, r3
 8001840:	f7ff fb18 	bl	8000e74 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001844:	f7fe fefe 	bl	8000644 <HAL_GetTick>
 8001848:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800184a:	e008      	b.n	800185e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800184c:	f7fe fefa 	bl	8000644 <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	2b02      	cmp	r3, #2
 8001858:	d901      	bls.n	800185e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e0f1      	b.n	8001a42 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800185e:	f7ff fbdf 	bl	8001020 <LL_RCC_IsActiveFlag_HPRE>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d0f1      	beq.n	800184c <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0320 	and.w	r3, r3, #32
 8001870:	2b00      	cmp	r3, #0
 8001872:	d016      	beq.n	80018a2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	695b      	ldr	r3, [r3, #20]
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff fb0e 	bl	8000e9a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800187e:	f7fe fee1 	bl	8000644 <HAL_GetTick>
 8001882:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001884:	e008      	b.n	8001898 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001886:	f7fe fedd 	bl	8000644 <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	2b02      	cmp	r3, #2
 8001892:	d901      	bls.n	8001898 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8001894:	2303      	movs	r3, #3
 8001896:	e0d4      	b.n	8001a42 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001898:	f7ff fbd3 	bl	8001042 <LL_RCC_IsActiveFlag_C2HPRE>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d0f1      	beq.n	8001886 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d016      	beq.n	80018dc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	699b      	ldr	r3, [r3, #24]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7ff fb06 	bl	8000ec4 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80018b8:	f7fe fec4 	bl	8000644 <HAL_GetTick>
 80018bc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80018be:	e008      	b.n	80018d2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80018c0:	f7fe fec0 	bl	8000644 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e0b7      	b.n	8001a42 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80018d2:	f7ff fbc8 	bl	8001066 <LL_RCC_IsActiveFlag_SHDHPRE>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d0f1      	beq.n	80018c0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0304 	and.w	r3, r3, #4
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d016      	beq.n	8001916 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff faff 	bl	8000ef0 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80018f2:	f7fe fea7 	bl	8000644 <HAL_GetTick>
 80018f6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80018f8:	e008      	b.n	800190c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80018fa:	f7fe fea3 	bl	8000644 <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	2b02      	cmp	r3, #2
 8001906:	d901      	bls.n	800190c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e09a      	b.n	8001a42 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800190c:	f7ff fbbd 	bl	800108a <LL_RCC_IsActiveFlag_PPRE1>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d0f1      	beq.n	80018fa <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0308 	and.w	r3, r3, #8
 800191e:	2b00      	cmp	r3, #0
 8001920:	d017      	beq.n	8001952 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	691b      	ldr	r3, [r3, #16]
 8001926:	00db      	lsls	r3, r3, #3
 8001928:	4618      	mov	r0, r3
 800192a:	f7ff faf4 	bl	8000f16 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800192e:	f7fe fe89 	bl	8000644 <HAL_GetTick>
 8001932:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001934:	e008      	b.n	8001948 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001936:	f7fe fe85 	bl	8000644 <HAL_GetTick>
 800193a:	4602      	mov	r2, r0
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	2b02      	cmp	r3, #2
 8001942:	d901      	bls.n	8001948 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	e07c      	b.n	8001a42 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001948:	f7ff fbb0 	bl	80010ac <LL_RCC_IsActiveFlag_PPRE2>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d0f1      	beq.n	8001936 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0301 	and.w	r3, r3, #1
 800195a:	2b00      	cmp	r3, #0
 800195c:	d043      	beq.n	80019e6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	2b02      	cmp	r3, #2
 8001964:	d106      	bne.n	8001974 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8001966:	f7ff f96c 	bl	8000c42 <LL_RCC_HSE_IsReady>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d11e      	bne.n	80019ae <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e066      	b.n	8001a42 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	2b03      	cmp	r3, #3
 800197a:	d106      	bne.n	800198a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800197c:	f7ff fb12 	bl	8000fa4 <LL_RCC_PLL_IsReady>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d113      	bne.n	80019ae <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e05b      	b.n	8001a42 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d106      	bne.n	80019a0 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8001992:	f7ff fa06 	bl	8000da2 <LL_RCC_MSI_IsReady>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d108      	bne.n	80019ae <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e050      	b.n	8001a42 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80019a0:	f7ff f97c 	bl	8000c9c <LL_RCC_HSI_IsReady>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d101      	bne.n	80019ae <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e049      	b.n	8001a42 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7ff fa40 	bl	8000e38 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019b8:	f7fe fe44 	bl	8000644 <HAL_GetTick>
 80019bc:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019be:	e00a      	b.n	80019d6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019c0:	f7fe fe40 	bl	8000644 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e035      	b.n	8001a42 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019d6:	f7ff fa42 	bl	8000e5e <LL_RCC_GetSysClkSource>
 80019da:	4602      	mov	r2, r0
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d1ec      	bne.n	80019c0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019e6:	4b19      	ldr	r3, [pc, #100]	; (8001a4c <HAL_RCC_ClockConfig+0x278>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0307 	and.w	r3, r3, #7
 80019ee:	683a      	ldr	r2, [r7, #0]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d21b      	bcs.n	8001a2c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019f4:	4b15      	ldr	r3, [pc, #84]	; (8001a4c <HAL_RCC_ClockConfig+0x278>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f023 0207 	bic.w	r2, r3, #7
 80019fc:	4913      	ldr	r1, [pc, #76]	; (8001a4c <HAL_RCC_ClockConfig+0x278>)
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a04:	f7fe fe1e 	bl	8000644 <HAL_GetTick>
 8001a08:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001a0c:	f7fe fe1a 	bl	8000644 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e011      	b.n	8001a42 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a1e:	4b0b      	ldr	r3, [pc, #44]	; (8001a4c <HAL_RCC_ClockConfig+0x278>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0307 	and.w	r3, r3, #7
 8001a26:	683a      	ldr	r2, [r7, #0]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d1ef      	bne.n	8001a0c <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001a2c:	f000 f8b4 	bl	8001b98 <HAL_RCC_GetHCLKFreq>
 8001a30:	4603      	mov	r3, r0
 8001a32:	4a07      	ldr	r2, [pc, #28]	; (8001a50 <HAL_RCC_ClockConfig+0x27c>)
 8001a34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8001a36:	4b07      	ldr	r3, [pc, #28]	; (8001a54 <HAL_RCC_ClockConfig+0x280>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7fe fdb6 	bl	80005ac <HAL_InitTick>
 8001a40:	4603      	mov	r3, r0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	58004000 	.word	0x58004000
 8001a50:	20000000 	.word	0x20000000
 8001a54:	20000004 	.word	0x20000004

08001a58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a58:	b590      	push	{r4, r7, lr}
 8001a5a:	b087      	sub	sp, #28
 8001a5c:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8001a62:	2300      	movs	r3, #0
 8001a64:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a66:	f7ff f9fa 	bl	8000e5e <LL_RCC_GetSysClkSource>
 8001a6a:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a6c:	f7ff facd 	bl	800100a <LL_RCC_PLL_GetMainSource>
 8001a70:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d005      	beq.n	8001a84 <HAL_RCC_GetSysClockFreq+0x2c>
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	2b0c      	cmp	r3, #12
 8001a7c:	d139      	bne.n	8001af2 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d136      	bne.n	8001af2 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8001a84:	f7ff f99d 	bl	8000dc2 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d115      	bne.n	8001aba <HAL_RCC_GetSysClockFreq+0x62>
 8001a8e:	f7ff f998 	bl	8000dc2 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d106      	bne.n	8001aa6 <HAL_RCC_GetSysClockFreq+0x4e>
 8001a98:	f7ff f9a3 	bl	8000de2 <LL_RCC_MSI_GetRange>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	0a1b      	lsrs	r3, r3, #8
 8001aa0:	f003 030f 	and.w	r3, r3, #15
 8001aa4:	e005      	b.n	8001ab2 <HAL_RCC_GetSysClockFreq+0x5a>
 8001aa6:	f7ff f9a7 	bl	8000df8 <LL_RCC_MSI_GetRangeAfterStandby>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	0a1b      	lsrs	r3, r3, #8
 8001aae:	f003 030f 	and.w	r3, r3, #15
 8001ab2:	4a36      	ldr	r2, [pc, #216]	; (8001b8c <HAL_RCC_GetSysClockFreq+0x134>)
 8001ab4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ab8:	e014      	b.n	8001ae4 <HAL_RCC_GetSysClockFreq+0x8c>
 8001aba:	f7ff f982 	bl	8000dc2 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d106      	bne.n	8001ad2 <HAL_RCC_GetSysClockFreq+0x7a>
 8001ac4:	f7ff f98d 	bl	8000de2 <LL_RCC_MSI_GetRange>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	091b      	lsrs	r3, r3, #4
 8001acc:	f003 030f 	and.w	r3, r3, #15
 8001ad0:	e005      	b.n	8001ade <HAL_RCC_GetSysClockFreq+0x86>
 8001ad2:	f7ff f991 	bl	8000df8 <LL_RCC_MSI_GetRangeAfterStandby>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	091b      	lsrs	r3, r3, #4
 8001ada:	f003 030f 	and.w	r3, r3, #15
 8001ade:	4a2b      	ldr	r2, [pc, #172]	; (8001b8c <HAL_RCC_GetSysClockFreq+0x134>)
 8001ae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ae4:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d115      	bne.n	8001b18 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001af0:	e012      	b.n	8001b18 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	2b04      	cmp	r3, #4
 8001af6:	d102      	bne.n	8001afe <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001af8:	4b25      	ldr	r3, [pc, #148]	; (8001b90 <HAL_RCC_GetSysClockFreq+0x138>)
 8001afa:	617b      	str	r3, [r7, #20]
 8001afc:	e00c      	b.n	8001b18 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	2b08      	cmp	r3, #8
 8001b02:	d109      	bne.n	8001b18 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001b04:	f7ff f870 	bl	8000be8 <LL_RCC_HSE_IsEnabledDiv2>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d102      	bne.n	8001b14 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8001b0e:	4b20      	ldr	r3, [pc, #128]	; (8001b90 <HAL_RCC_GetSysClockFreq+0x138>)
 8001b10:	617b      	str	r3, [r7, #20]
 8001b12:	e001      	b.n	8001b18 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8001b14:	4b1f      	ldr	r3, [pc, #124]	; (8001b94 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001b16:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b18:	f7ff f9a1 	bl	8000e5e <LL_RCC_GetSysClkSource>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b0c      	cmp	r3, #12
 8001b20:	d12f      	bne.n	8001b82 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8001b22:	f7ff fa72 	bl	800100a <LL_RCC_PLL_GetMainSource>
 8001b26:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d003      	beq.n	8001b36 <HAL_RCC_GetSysClockFreq+0xde>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2b03      	cmp	r3, #3
 8001b32:	d003      	beq.n	8001b3c <HAL_RCC_GetSysClockFreq+0xe4>
 8001b34:	e00d      	b.n	8001b52 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8001b36:	4b16      	ldr	r3, [pc, #88]	; (8001b90 <HAL_RCC_GetSysClockFreq+0x138>)
 8001b38:	60fb      	str	r3, [r7, #12]
        break;
 8001b3a:	e00d      	b.n	8001b58 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001b3c:	f7ff f854 	bl	8000be8 <LL_RCC_HSE_IsEnabledDiv2>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d102      	bne.n	8001b4c <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8001b46:	4b12      	ldr	r3, [pc, #72]	; (8001b90 <HAL_RCC_GetSysClockFreq+0x138>)
 8001b48:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8001b4a:	e005      	b.n	8001b58 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8001b4c:	4b11      	ldr	r3, [pc, #68]	; (8001b94 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001b4e:	60fb      	str	r3, [r7, #12]
        break;
 8001b50:	e002      	b.n	8001b58 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	60fb      	str	r3, [r7, #12]
        break;
 8001b56:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8001b58:	f7ff fa35 	bl	8000fc6 <LL_RCC_PLL_GetN>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	fb03 f402 	mul.w	r4, r3, r2
 8001b64:	f7ff fa46 	bl	8000ff4 <LL_RCC_PLL_GetDivider>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	091b      	lsrs	r3, r3, #4
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	fbb4 f4f3 	udiv	r4, r4, r3
 8001b72:	f7ff fa34 	bl	8000fde <LL_RCC_PLL_GetR>
 8001b76:	4603      	mov	r3, r0
 8001b78:	0f5b      	lsrs	r3, r3, #29
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	fbb4 f3f3 	udiv	r3, r4, r3
 8001b80:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8001b82:	697b      	ldr	r3, [r7, #20]
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	371c      	adds	r7, #28
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd90      	pop	{r4, r7, pc}
 8001b8c:	08002d18 	.word	0x08002d18
 8001b90:	00f42400 	.word	0x00f42400
 8001b94:	01e84800 	.word	0x01e84800

08001b98 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b98:	b598      	push	{r3, r4, r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8001b9c:	f7ff ff5c 	bl	8001a58 <HAL_RCC_GetSysClockFreq>
 8001ba0:	4604      	mov	r4, r0
 8001ba2:	f7ff f9cb 	bl	8000f3c <LL_RCC_GetAHBPrescaler>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	091b      	lsrs	r3, r3, #4
 8001baa:	f003 030f 	and.w	r3, r3, #15
 8001bae:	4a03      	ldr	r2, [pc, #12]	; (8001bbc <HAL_RCC_GetHCLKFreq+0x24>)
 8001bb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bb4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	bd98      	pop	{r3, r4, r7, pc}
 8001bbc:	08002cd8 	.word	0x08002cd8

08001bc0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8001bc0:	b590      	push	{r4, r7, lr}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	091b      	lsrs	r3, r3, #4
 8001bcc:	f003 030f 	and.w	r3, r3, #15
 8001bd0:	4a10      	ldr	r2, [pc, #64]	; (8001c14 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8001bd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bd6:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8001bd8:	f7ff f9bb 	bl	8000f52 <LL_RCC_GetAHB3Prescaler>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	091b      	lsrs	r3, r3, #4
 8001be0:	f003 030f 	and.w	r3, r3, #15
 8001be4:	4a0c      	ldr	r2, [pc, #48]	; (8001c18 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8001be6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bea:	68fa      	ldr	r2, [r7, #12]
 8001bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf0:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	4a09      	ldr	r2, [pc, #36]	; (8001c1c <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8001bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bfa:	0c9c      	lsrs	r4, r3, #18
 8001bfc:	f7fe ffba 	bl	8000b74 <HAL_PWREx_GetVoltageRange>
 8001c00:	4603      	mov	r3, r0
 8001c02:	4619      	mov	r1, r3
 8001c04:	4620      	mov	r0, r4
 8001c06:	f000 f80b 	bl	8001c20 <RCC_SetFlashLatency>
 8001c0a:	4603      	mov	r3, r0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3714      	adds	r7, #20
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd90      	pop	{r4, r7, pc}
 8001c14:	08002d18 	.word	0x08002d18
 8001c18:	08002cd8 	.word	0x08002cd8
 8001c1c:	431bde83 	.word	0x431bde83

08001c20 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b08e      	sub	sp, #56	; 0x38
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8001c2a:	4a3a      	ldr	r2, [pc, #232]	; (8001d14 <RCC_SetFlashLatency+0xf4>)
 8001c2c:	f107 0320 	add.w	r3, r7, #32
 8001c30:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c34:	6018      	str	r0, [r3, #0]
 8001c36:	3304      	adds	r3, #4
 8001c38:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8001c3a:	4a37      	ldr	r2, [pc, #220]	; (8001d18 <RCC_SetFlashLatency+0xf8>)
 8001c3c:	f107 0318 	add.w	r3, r7, #24
 8001c40:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c44:	6018      	str	r0, [r3, #0]
 8001c46:	3304      	adds	r3, #4
 8001c48:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8001c4a:	4a34      	ldr	r2, [pc, #208]	; (8001d1c <RCC_SetFlashLatency+0xfc>)
 8001c4c:	f107 030c 	add.w	r3, r7, #12
 8001c50:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c52:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8001c56:	2300      	movs	r3, #0
 8001c58:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c60:	d11b      	bne.n	8001c9a <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001c62:	2300      	movs	r3, #0
 8001c64:	633b      	str	r3, [r7, #48]	; 0x30
 8001c66:	e014      	b.n	8001c92 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8001c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	3338      	adds	r3, #56	; 0x38
 8001c6e:	443b      	add	r3, r7
 8001c70:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001c74:	461a      	mov	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d807      	bhi.n	8001c8c <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8001c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	3338      	adds	r3, #56	; 0x38
 8001c82:	443b      	add	r3, r7
 8001c84:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8001c88:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8001c8a:	e021      	b.n	8001cd0 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c8e:	3301      	adds	r3, #1
 8001c90:	633b      	str	r3, [r7, #48]	; 0x30
 8001c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d9e7      	bls.n	8001c68 <RCC_SetFlashLatency+0x48>
 8001c98:	e01a      	b.n	8001cd0 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c9e:	e014      	b.n	8001cca <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8001ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	3338      	adds	r3, #56	; 0x38
 8001ca6:	443b      	add	r3, r7
 8001ca8:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8001cac:	461a      	mov	r2, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d807      	bhi.n	8001cc4 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8001cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	3338      	adds	r3, #56	; 0x38
 8001cba:	443b      	add	r3, r7
 8001cbc:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8001cc0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8001cc2:	e005      	b.n	8001cd0 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d9e7      	bls.n	8001ca0 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001cd0:	4b13      	ldr	r3, [pc, #76]	; (8001d20 <RCC_SetFlashLatency+0x100>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f023 0207 	bic.w	r2, r3, #7
 8001cd8:	4911      	ldr	r1, [pc, #68]	; (8001d20 <RCC_SetFlashLatency+0x100>)
 8001cda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001ce0:	f7fe fcb0 	bl	8000644 <HAL_GetTick>
 8001ce4:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8001ce6:	e008      	b.n	8001cfa <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001ce8:	f7fe fcac 	bl	8000644 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d901      	bls.n	8001cfa <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e007      	b.n	8001d0a <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8001cfa:	4b09      	ldr	r3, [pc, #36]	; (8001d20 <RCC_SetFlashLatency+0x100>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0307 	and.w	r3, r3, #7
 8001d02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d1ef      	bne.n	8001ce8 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3738      	adds	r7, #56	; 0x38
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	08002cbc 	.word	0x08002cbc
 8001d18:	08002cc4 	.word	0x08002cc4
 8001d1c:	08002ccc 	.word	0x08002ccc
 8001d20:	58004000 	.word	0x58004000

08001d24 <__errno>:
 8001d24:	4b01      	ldr	r3, [pc, #4]	; (8001d2c <__errno+0x8>)
 8001d26:	6818      	ldr	r0, [r3, #0]
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	2000000c 	.word	0x2000000c

08001d30 <__libc_init_array>:
 8001d30:	b570      	push	{r4, r5, r6, lr}
 8001d32:	4d0d      	ldr	r5, [pc, #52]	; (8001d68 <__libc_init_array+0x38>)
 8001d34:	4c0d      	ldr	r4, [pc, #52]	; (8001d6c <__libc_init_array+0x3c>)
 8001d36:	1b64      	subs	r4, r4, r5
 8001d38:	10a4      	asrs	r4, r4, #2
 8001d3a:	2600      	movs	r6, #0
 8001d3c:	42a6      	cmp	r6, r4
 8001d3e:	d109      	bne.n	8001d54 <__libc_init_array+0x24>
 8001d40:	4d0b      	ldr	r5, [pc, #44]	; (8001d70 <__libc_init_array+0x40>)
 8001d42:	4c0c      	ldr	r4, [pc, #48]	; (8001d74 <__libc_init_array+0x44>)
 8001d44:	f000 ffa6 	bl	8002c94 <_init>
 8001d48:	1b64      	subs	r4, r4, r5
 8001d4a:	10a4      	asrs	r4, r4, #2
 8001d4c:	2600      	movs	r6, #0
 8001d4e:	42a6      	cmp	r6, r4
 8001d50:	d105      	bne.n	8001d5e <__libc_init_array+0x2e>
 8001d52:	bd70      	pop	{r4, r5, r6, pc}
 8001d54:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d58:	4798      	blx	r3
 8001d5a:	3601      	adds	r6, #1
 8001d5c:	e7ee      	b.n	8001d3c <__libc_init_array+0xc>
 8001d5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d62:	4798      	blx	r3
 8001d64:	3601      	adds	r6, #1
 8001d66:	e7f2      	b.n	8001d4e <__libc_init_array+0x1e>
 8001d68:	08002df0 	.word	0x08002df0
 8001d6c:	08002df0 	.word	0x08002df0
 8001d70:	08002df0 	.word	0x08002df0
 8001d74:	08002df4 	.word	0x08002df4

08001d78 <memset>:
 8001d78:	4402      	add	r2, r0
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d100      	bne.n	8001d82 <memset+0xa>
 8001d80:	4770      	bx	lr
 8001d82:	f803 1b01 	strb.w	r1, [r3], #1
 8001d86:	e7f9      	b.n	8001d7c <memset+0x4>

08001d88 <iprintf>:
 8001d88:	b40f      	push	{r0, r1, r2, r3}
 8001d8a:	4b0a      	ldr	r3, [pc, #40]	; (8001db4 <iprintf+0x2c>)
 8001d8c:	b513      	push	{r0, r1, r4, lr}
 8001d8e:	681c      	ldr	r4, [r3, #0]
 8001d90:	b124      	cbz	r4, 8001d9c <iprintf+0x14>
 8001d92:	69a3      	ldr	r3, [r4, #24]
 8001d94:	b913      	cbnz	r3, 8001d9c <iprintf+0x14>
 8001d96:	4620      	mov	r0, r4
 8001d98:	f000 f866 	bl	8001e68 <__sinit>
 8001d9c:	ab05      	add	r3, sp, #20
 8001d9e:	9a04      	ldr	r2, [sp, #16]
 8001da0:	68a1      	ldr	r1, [r4, #8]
 8001da2:	9301      	str	r3, [sp, #4]
 8001da4:	4620      	mov	r0, r4
 8001da6:	f000 f9bb 	bl	8002120 <_vfiprintf_r>
 8001daa:	b002      	add	sp, #8
 8001dac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001db0:	b004      	add	sp, #16
 8001db2:	4770      	bx	lr
 8001db4:	2000000c 	.word	0x2000000c

08001db8 <std>:
 8001db8:	2300      	movs	r3, #0
 8001dba:	b510      	push	{r4, lr}
 8001dbc:	4604      	mov	r4, r0
 8001dbe:	e9c0 3300 	strd	r3, r3, [r0]
 8001dc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001dc6:	6083      	str	r3, [r0, #8]
 8001dc8:	8181      	strh	r1, [r0, #12]
 8001dca:	6643      	str	r3, [r0, #100]	; 0x64
 8001dcc:	81c2      	strh	r2, [r0, #14]
 8001dce:	6183      	str	r3, [r0, #24]
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	2208      	movs	r2, #8
 8001dd4:	305c      	adds	r0, #92	; 0x5c
 8001dd6:	f7ff ffcf 	bl	8001d78 <memset>
 8001dda:	4b05      	ldr	r3, [pc, #20]	; (8001df0 <std+0x38>)
 8001ddc:	6263      	str	r3, [r4, #36]	; 0x24
 8001dde:	4b05      	ldr	r3, [pc, #20]	; (8001df4 <std+0x3c>)
 8001de0:	62a3      	str	r3, [r4, #40]	; 0x28
 8001de2:	4b05      	ldr	r3, [pc, #20]	; (8001df8 <std+0x40>)
 8001de4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001de6:	4b05      	ldr	r3, [pc, #20]	; (8001dfc <std+0x44>)
 8001de8:	6224      	str	r4, [r4, #32]
 8001dea:	6323      	str	r3, [r4, #48]	; 0x30
 8001dec:	bd10      	pop	{r4, pc}
 8001dee:	bf00      	nop
 8001df0:	080026c9 	.word	0x080026c9
 8001df4:	080026eb 	.word	0x080026eb
 8001df8:	08002723 	.word	0x08002723
 8001dfc:	08002747 	.word	0x08002747

08001e00 <_cleanup_r>:
 8001e00:	4901      	ldr	r1, [pc, #4]	; (8001e08 <_cleanup_r+0x8>)
 8001e02:	f000 b8af 	b.w	8001f64 <_fwalk_reent>
 8001e06:	bf00      	nop
 8001e08:	08002a19 	.word	0x08002a19

08001e0c <__sfmoreglue>:
 8001e0c:	b570      	push	{r4, r5, r6, lr}
 8001e0e:	2268      	movs	r2, #104	; 0x68
 8001e10:	1e4d      	subs	r5, r1, #1
 8001e12:	4355      	muls	r5, r2
 8001e14:	460e      	mov	r6, r1
 8001e16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001e1a:	f000 f8e5 	bl	8001fe8 <_malloc_r>
 8001e1e:	4604      	mov	r4, r0
 8001e20:	b140      	cbz	r0, 8001e34 <__sfmoreglue+0x28>
 8001e22:	2100      	movs	r1, #0
 8001e24:	e9c0 1600 	strd	r1, r6, [r0]
 8001e28:	300c      	adds	r0, #12
 8001e2a:	60a0      	str	r0, [r4, #8]
 8001e2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001e30:	f7ff ffa2 	bl	8001d78 <memset>
 8001e34:	4620      	mov	r0, r4
 8001e36:	bd70      	pop	{r4, r5, r6, pc}

08001e38 <__sfp_lock_acquire>:
 8001e38:	4801      	ldr	r0, [pc, #4]	; (8001e40 <__sfp_lock_acquire+0x8>)
 8001e3a:	f000 b8b3 	b.w	8001fa4 <__retarget_lock_acquire_recursive>
 8001e3e:	bf00      	nop
 8001e40:	200000a9 	.word	0x200000a9

08001e44 <__sfp_lock_release>:
 8001e44:	4801      	ldr	r0, [pc, #4]	; (8001e4c <__sfp_lock_release+0x8>)
 8001e46:	f000 b8ae 	b.w	8001fa6 <__retarget_lock_release_recursive>
 8001e4a:	bf00      	nop
 8001e4c:	200000a9 	.word	0x200000a9

08001e50 <__sinit_lock_acquire>:
 8001e50:	4801      	ldr	r0, [pc, #4]	; (8001e58 <__sinit_lock_acquire+0x8>)
 8001e52:	f000 b8a7 	b.w	8001fa4 <__retarget_lock_acquire_recursive>
 8001e56:	bf00      	nop
 8001e58:	200000aa 	.word	0x200000aa

08001e5c <__sinit_lock_release>:
 8001e5c:	4801      	ldr	r0, [pc, #4]	; (8001e64 <__sinit_lock_release+0x8>)
 8001e5e:	f000 b8a2 	b.w	8001fa6 <__retarget_lock_release_recursive>
 8001e62:	bf00      	nop
 8001e64:	200000aa 	.word	0x200000aa

08001e68 <__sinit>:
 8001e68:	b510      	push	{r4, lr}
 8001e6a:	4604      	mov	r4, r0
 8001e6c:	f7ff fff0 	bl	8001e50 <__sinit_lock_acquire>
 8001e70:	69a3      	ldr	r3, [r4, #24]
 8001e72:	b11b      	cbz	r3, 8001e7c <__sinit+0x14>
 8001e74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001e78:	f7ff bff0 	b.w	8001e5c <__sinit_lock_release>
 8001e7c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001e80:	6523      	str	r3, [r4, #80]	; 0x50
 8001e82:	4b13      	ldr	r3, [pc, #76]	; (8001ed0 <__sinit+0x68>)
 8001e84:	4a13      	ldr	r2, [pc, #76]	; (8001ed4 <__sinit+0x6c>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	62a2      	str	r2, [r4, #40]	; 0x28
 8001e8a:	42a3      	cmp	r3, r4
 8001e8c:	bf04      	itt	eq
 8001e8e:	2301      	moveq	r3, #1
 8001e90:	61a3      	streq	r3, [r4, #24]
 8001e92:	4620      	mov	r0, r4
 8001e94:	f000 f820 	bl	8001ed8 <__sfp>
 8001e98:	6060      	str	r0, [r4, #4]
 8001e9a:	4620      	mov	r0, r4
 8001e9c:	f000 f81c 	bl	8001ed8 <__sfp>
 8001ea0:	60a0      	str	r0, [r4, #8]
 8001ea2:	4620      	mov	r0, r4
 8001ea4:	f000 f818 	bl	8001ed8 <__sfp>
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	60e0      	str	r0, [r4, #12]
 8001eac:	2104      	movs	r1, #4
 8001eae:	6860      	ldr	r0, [r4, #4]
 8001eb0:	f7ff ff82 	bl	8001db8 <std>
 8001eb4:	68a0      	ldr	r0, [r4, #8]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	2109      	movs	r1, #9
 8001eba:	f7ff ff7d 	bl	8001db8 <std>
 8001ebe:	68e0      	ldr	r0, [r4, #12]
 8001ec0:	2202      	movs	r2, #2
 8001ec2:	2112      	movs	r1, #18
 8001ec4:	f7ff ff78 	bl	8001db8 <std>
 8001ec8:	2301      	movs	r3, #1
 8001eca:	61a3      	str	r3, [r4, #24]
 8001ecc:	e7d2      	b.n	8001e74 <__sinit+0xc>
 8001ece:	bf00      	nop
 8001ed0:	08002d58 	.word	0x08002d58
 8001ed4:	08001e01 	.word	0x08001e01

08001ed8 <__sfp>:
 8001ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eda:	4607      	mov	r7, r0
 8001edc:	f7ff ffac 	bl	8001e38 <__sfp_lock_acquire>
 8001ee0:	4b1e      	ldr	r3, [pc, #120]	; (8001f5c <__sfp+0x84>)
 8001ee2:	681e      	ldr	r6, [r3, #0]
 8001ee4:	69b3      	ldr	r3, [r6, #24]
 8001ee6:	b913      	cbnz	r3, 8001eee <__sfp+0x16>
 8001ee8:	4630      	mov	r0, r6
 8001eea:	f7ff ffbd 	bl	8001e68 <__sinit>
 8001eee:	3648      	adds	r6, #72	; 0x48
 8001ef0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001ef4:	3b01      	subs	r3, #1
 8001ef6:	d503      	bpl.n	8001f00 <__sfp+0x28>
 8001ef8:	6833      	ldr	r3, [r6, #0]
 8001efa:	b30b      	cbz	r3, 8001f40 <__sfp+0x68>
 8001efc:	6836      	ldr	r6, [r6, #0]
 8001efe:	e7f7      	b.n	8001ef0 <__sfp+0x18>
 8001f00:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001f04:	b9d5      	cbnz	r5, 8001f3c <__sfp+0x64>
 8001f06:	4b16      	ldr	r3, [pc, #88]	; (8001f60 <__sfp+0x88>)
 8001f08:	60e3      	str	r3, [r4, #12]
 8001f0a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001f0e:	6665      	str	r5, [r4, #100]	; 0x64
 8001f10:	f000 f847 	bl	8001fa2 <__retarget_lock_init_recursive>
 8001f14:	f7ff ff96 	bl	8001e44 <__sfp_lock_release>
 8001f18:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001f1c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001f20:	6025      	str	r5, [r4, #0]
 8001f22:	61a5      	str	r5, [r4, #24]
 8001f24:	2208      	movs	r2, #8
 8001f26:	4629      	mov	r1, r5
 8001f28:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001f2c:	f7ff ff24 	bl	8001d78 <memset>
 8001f30:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001f34:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001f38:	4620      	mov	r0, r4
 8001f3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f3c:	3468      	adds	r4, #104	; 0x68
 8001f3e:	e7d9      	b.n	8001ef4 <__sfp+0x1c>
 8001f40:	2104      	movs	r1, #4
 8001f42:	4638      	mov	r0, r7
 8001f44:	f7ff ff62 	bl	8001e0c <__sfmoreglue>
 8001f48:	4604      	mov	r4, r0
 8001f4a:	6030      	str	r0, [r6, #0]
 8001f4c:	2800      	cmp	r0, #0
 8001f4e:	d1d5      	bne.n	8001efc <__sfp+0x24>
 8001f50:	f7ff ff78 	bl	8001e44 <__sfp_lock_release>
 8001f54:	230c      	movs	r3, #12
 8001f56:	603b      	str	r3, [r7, #0]
 8001f58:	e7ee      	b.n	8001f38 <__sfp+0x60>
 8001f5a:	bf00      	nop
 8001f5c:	08002d58 	.word	0x08002d58
 8001f60:	ffff0001 	.word	0xffff0001

08001f64 <_fwalk_reent>:
 8001f64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001f68:	4606      	mov	r6, r0
 8001f6a:	4688      	mov	r8, r1
 8001f6c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001f70:	2700      	movs	r7, #0
 8001f72:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001f76:	f1b9 0901 	subs.w	r9, r9, #1
 8001f7a:	d505      	bpl.n	8001f88 <_fwalk_reent+0x24>
 8001f7c:	6824      	ldr	r4, [r4, #0]
 8001f7e:	2c00      	cmp	r4, #0
 8001f80:	d1f7      	bne.n	8001f72 <_fwalk_reent+0xe>
 8001f82:	4638      	mov	r0, r7
 8001f84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001f88:	89ab      	ldrh	r3, [r5, #12]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d907      	bls.n	8001f9e <_fwalk_reent+0x3a>
 8001f8e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001f92:	3301      	adds	r3, #1
 8001f94:	d003      	beq.n	8001f9e <_fwalk_reent+0x3a>
 8001f96:	4629      	mov	r1, r5
 8001f98:	4630      	mov	r0, r6
 8001f9a:	47c0      	blx	r8
 8001f9c:	4307      	orrs	r7, r0
 8001f9e:	3568      	adds	r5, #104	; 0x68
 8001fa0:	e7e9      	b.n	8001f76 <_fwalk_reent+0x12>

08001fa2 <__retarget_lock_init_recursive>:
 8001fa2:	4770      	bx	lr

08001fa4 <__retarget_lock_acquire_recursive>:
 8001fa4:	4770      	bx	lr

08001fa6 <__retarget_lock_release_recursive>:
 8001fa6:	4770      	bx	lr

08001fa8 <sbrk_aligned>:
 8001fa8:	b570      	push	{r4, r5, r6, lr}
 8001faa:	4e0e      	ldr	r6, [pc, #56]	; (8001fe4 <sbrk_aligned+0x3c>)
 8001fac:	460c      	mov	r4, r1
 8001fae:	6831      	ldr	r1, [r6, #0]
 8001fb0:	4605      	mov	r5, r0
 8001fb2:	b911      	cbnz	r1, 8001fba <sbrk_aligned+0x12>
 8001fb4:	f000 fb78 	bl	80026a8 <_sbrk_r>
 8001fb8:	6030      	str	r0, [r6, #0]
 8001fba:	4621      	mov	r1, r4
 8001fbc:	4628      	mov	r0, r5
 8001fbe:	f000 fb73 	bl	80026a8 <_sbrk_r>
 8001fc2:	1c43      	adds	r3, r0, #1
 8001fc4:	d00a      	beq.n	8001fdc <sbrk_aligned+0x34>
 8001fc6:	1cc4      	adds	r4, r0, #3
 8001fc8:	f024 0403 	bic.w	r4, r4, #3
 8001fcc:	42a0      	cmp	r0, r4
 8001fce:	d007      	beq.n	8001fe0 <sbrk_aligned+0x38>
 8001fd0:	1a21      	subs	r1, r4, r0
 8001fd2:	4628      	mov	r0, r5
 8001fd4:	f000 fb68 	bl	80026a8 <_sbrk_r>
 8001fd8:	3001      	adds	r0, #1
 8001fda:	d101      	bne.n	8001fe0 <sbrk_aligned+0x38>
 8001fdc:	f04f 34ff 	mov.w	r4, #4294967295
 8001fe0:	4620      	mov	r0, r4
 8001fe2:	bd70      	pop	{r4, r5, r6, pc}
 8001fe4:	200000b0 	.word	0x200000b0

08001fe8 <_malloc_r>:
 8001fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001fec:	1ccd      	adds	r5, r1, #3
 8001fee:	f025 0503 	bic.w	r5, r5, #3
 8001ff2:	3508      	adds	r5, #8
 8001ff4:	2d0c      	cmp	r5, #12
 8001ff6:	bf38      	it	cc
 8001ff8:	250c      	movcc	r5, #12
 8001ffa:	2d00      	cmp	r5, #0
 8001ffc:	4607      	mov	r7, r0
 8001ffe:	db01      	blt.n	8002004 <_malloc_r+0x1c>
 8002000:	42a9      	cmp	r1, r5
 8002002:	d905      	bls.n	8002010 <_malloc_r+0x28>
 8002004:	230c      	movs	r3, #12
 8002006:	603b      	str	r3, [r7, #0]
 8002008:	2600      	movs	r6, #0
 800200a:	4630      	mov	r0, r6
 800200c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002010:	4e2e      	ldr	r6, [pc, #184]	; (80020cc <_malloc_r+0xe4>)
 8002012:	f000 fdb5 	bl	8002b80 <__malloc_lock>
 8002016:	6833      	ldr	r3, [r6, #0]
 8002018:	461c      	mov	r4, r3
 800201a:	bb34      	cbnz	r4, 800206a <_malloc_r+0x82>
 800201c:	4629      	mov	r1, r5
 800201e:	4638      	mov	r0, r7
 8002020:	f7ff ffc2 	bl	8001fa8 <sbrk_aligned>
 8002024:	1c43      	adds	r3, r0, #1
 8002026:	4604      	mov	r4, r0
 8002028:	d14d      	bne.n	80020c6 <_malloc_r+0xde>
 800202a:	6834      	ldr	r4, [r6, #0]
 800202c:	4626      	mov	r6, r4
 800202e:	2e00      	cmp	r6, #0
 8002030:	d140      	bne.n	80020b4 <_malloc_r+0xcc>
 8002032:	6823      	ldr	r3, [r4, #0]
 8002034:	4631      	mov	r1, r6
 8002036:	4638      	mov	r0, r7
 8002038:	eb04 0803 	add.w	r8, r4, r3
 800203c:	f000 fb34 	bl	80026a8 <_sbrk_r>
 8002040:	4580      	cmp	r8, r0
 8002042:	d13a      	bne.n	80020ba <_malloc_r+0xd2>
 8002044:	6821      	ldr	r1, [r4, #0]
 8002046:	3503      	adds	r5, #3
 8002048:	1a6d      	subs	r5, r5, r1
 800204a:	f025 0503 	bic.w	r5, r5, #3
 800204e:	3508      	adds	r5, #8
 8002050:	2d0c      	cmp	r5, #12
 8002052:	bf38      	it	cc
 8002054:	250c      	movcc	r5, #12
 8002056:	4629      	mov	r1, r5
 8002058:	4638      	mov	r0, r7
 800205a:	f7ff ffa5 	bl	8001fa8 <sbrk_aligned>
 800205e:	3001      	adds	r0, #1
 8002060:	d02b      	beq.n	80020ba <_malloc_r+0xd2>
 8002062:	6823      	ldr	r3, [r4, #0]
 8002064:	442b      	add	r3, r5
 8002066:	6023      	str	r3, [r4, #0]
 8002068:	e00e      	b.n	8002088 <_malloc_r+0xa0>
 800206a:	6822      	ldr	r2, [r4, #0]
 800206c:	1b52      	subs	r2, r2, r5
 800206e:	d41e      	bmi.n	80020ae <_malloc_r+0xc6>
 8002070:	2a0b      	cmp	r2, #11
 8002072:	d916      	bls.n	80020a2 <_malloc_r+0xba>
 8002074:	1961      	adds	r1, r4, r5
 8002076:	42a3      	cmp	r3, r4
 8002078:	6025      	str	r5, [r4, #0]
 800207a:	bf18      	it	ne
 800207c:	6059      	strne	r1, [r3, #4]
 800207e:	6863      	ldr	r3, [r4, #4]
 8002080:	bf08      	it	eq
 8002082:	6031      	streq	r1, [r6, #0]
 8002084:	5162      	str	r2, [r4, r5]
 8002086:	604b      	str	r3, [r1, #4]
 8002088:	4638      	mov	r0, r7
 800208a:	f104 060b 	add.w	r6, r4, #11
 800208e:	f000 fd7d 	bl	8002b8c <__malloc_unlock>
 8002092:	f026 0607 	bic.w	r6, r6, #7
 8002096:	1d23      	adds	r3, r4, #4
 8002098:	1af2      	subs	r2, r6, r3
 800209a:	d0b6      	beq.n	800200a <_malloc_r+0x22>
 800209c:	1b9b      	subs	r3, r3, r6
 800209e:	50a3      	str	r3, [r4, r2]
 80020a0:	e7b3      	b.n	800200a <_malloc_r+0x22>
 80020a2:	6862      	ldr	r2, [r4, #4]
 80020a4:	42a3      	cmp	r3, r4
 80020a6:	bf0c      	ite	eq
 80020a8:	6032      	streq	r2, [r6, #0]
 80020aa:	605a      	strne	r2, [r3, #4]
 80020ac:	e7ec      	b.n	8002088 <_malloc_r+0xa0>
 80020ae:	4623      	mov	r3, r4
 80020b0:	6864      	ldr	r4, [r4, #4]
 80020b2:	e7b2      	b.n	800201a <_malloc_r+0x32>
 80020b4:	4634      	mov	r4, r6
 80020b6:	6876      	ldr	r6, [r6, #4]
 80020b8:	e7b9      	b.n	800202e <_malloc_r+0x46>
 80020ba:	230c      	movs	r3, #12
 80020bc:	603b      	str	r3, [r7, #0]
 80020be:	4638      	mov	r0, r7
 80020c0:	f000 fd64 	bl	8002b8c <__malloc_unlock>
 80020c4:	e7a1      	b.n	800200a <_malloc_r+0x22>
 80020c6:	6025      	str	r5, [r4, #0]
 80020c8:	e7de      	b.n	8002088 <_malloc_r+0xa0>
 80020ca:	bf00      	nop
 80020cc:	200000ac 	.word	0x200000ac

080020d0 <__sfputc_r>:
 80020d0:	6893      	ldr	r3, [r2, #8]
 80020d2:	3b01      	subs	r3, #1
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	b410      	push	{r4}
 80020d8:	6093      	str	r3, [r2, #8]
 80020da:	da07      	bge.n	80020ec <__sfputc_r+0x1c>
 80020dc:	6994      	ldr	r4, [r2, #24]
 80020de:	42a3      	cmp	r3, r4
 80020e0:	db01      	blt.n	80020e6 <__sfputc_r+0x16>
 80020e2:	290a      	cmp	r1, #10
 80020e4:	d102      	bne.n	80020ec <__sfputc_r+0x1c>
 80020e6:	bc10      	pop	{r4}
 80020e8:	f000 bb32 	b.w	8002750 <__swbuf_r>
 80020ec:	6813      	ldr	r3, [r2, #0]
 80020ee:	1c58      	adds	r0, r3, #1
 80020f0:	6010      	str	r0, [r2, #0]
 80020f2:	7019      	strb	r1, [r3, #0]
 80020f4:	4608      	mov	r0, r1
 80020f6:	bc10      	pop	{r4}
 80020f8:	4770      	bx	lr

080020fa <__sfputs_r>:
 80020fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020fc:	4606      	mov	r6, r0
 80020fe:	460f      	mov	r7, r1
 8002100:	4614      	mov	r4, r2
 8002102:	18d5      	adds	r5, r2, r3
 8002104:	42ac      	cmp	r4, r5
 8002106:	d101      	bne.n	800210c <__sfputs_r+0x12>
 8002108:	2000      	movs	r0, #0
 800210a:	e007      	b.n	800211c <__sfputs_r+0x22>
 800210c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002110:	463a      	mov	r2, r7
 8002112:	4630      	mov	r0, r6
 8002114:	f7ff ffdc 	bl	80020d0 <__sfputc_r>
 8002118:	1c43      	adds	r3, r0, #1
 800211a:	d1f3      	bne.n	8002104 <__sfputs_r+0xa>
 800211c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002120 <_vfiprintf_r>:
 8002120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002124:	460d      	mov	r5, r1
 8002126:	b09d      	sub	sp, #116	; 0x74
 8002128:	4614      	mov	r4, r2
 800212a:	4698      	mov	r8, r3
 800212c:	4606      	mov	r6, r0
 800212e:	b118      	cbz	r0, 8002138 <_vfiprintf_r+0x18>
 8002130:	6983      	ldr	r3, [r0, #24]
 8002132:	b90b      	cbnz	r3, 8002138 <_vfiprintf_r+0x18>
 8002134:	f7ff fe98 	bl	8001e68 <__sinit>
 8002138:	4b89      	ldr	r3, [pc, #548]	; (8002360 <_vfiprintf_r+0x240>)
 800213a:	429d      	cmp	r5, r3
 800213c:	d11b      	bne.n	8002176 <_vfiprintf_r+0x56>
 800213e:	6875      	ldr	r5, [r6, #4]
 8002140:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002142:	07d9      	lsls	r1, r3, #31
 8002144:	d405      	bmi.n	8002152 <_vfiprintf_r+0x32>
 8002146:	89ab      	ldrh	r3, [r5, #12]
 8002148:	059a      	lsls	r2, r3, #22
 800214a:	d402      	bmi.n	8002152 <_vfiprintf_r+0x32>
 800214c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800214e:	f7ff ff29 	bl	8001fa4 <__retarget_lock_acquire_recursive>
 8002152:	89ab      	ldrh	r3, [r5, #12]
 8002154:	071b      	lsls	r3, r3, #28
 8002156:	d501      	bpl.n	800215c <_vfiprintf_r+0x3c>
 8002158:	692b      	ldr	r3, [r5, #16]
 800215a:	b9eb      	cbnz	r3, 8002198 <_vfiprintf_r+0x78>
 800215c:	4629      	mov	r1, r5
 800215e:	4630      	mov	r0, r6
 8002160:	f000 fb5a 	bl	8002818 <__swsetup_r>
 8002164:	b1c0      	cbz	r0, 8002198 <_vfiprintf_r+0x78>
 8002166:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002168:	07dc      	lsls	r4, r3, #31
 800216a:	d50e      	bpl.n	800218a <_vfiprintf_r+0x6a>
 800216c:	f04f 30ff 	mov.w	r0, #4294967295
 8002170:	b01d      	add	sp, #116	; 0x74
 8002172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002176:	4b7b      	ldr	r3, [pc, #492]	; (8002364 <_vfiprintf_r+0x244>)
 8002178:	429d      	cmp	r5, r3
 800217a:	d101      	bne.n	8002180 <_vfiprintf_r+0x60>
 800217c:	68b5      	ldr	r5, [r6, #8]
 800217e:	e7df      	b.n	8002140 <_vfiprintf_r+0x20>
 8002180:	4b79      	ldr	r3, [pc, #484]	; (8002368 <_vfiprintf_r+0x248>)
 8002182:	429d      	cmp	r5, r3
 8002184:	bf08      	it	eq
 8002186:	68f5      	ldreq	r5, [r6, #12]
 8002188:	e7da      	b.n	8002140 <_vfiprintf_r+0x20>
 800218a:	89ab      	ldrh	r3, [r5, #12]
 800218c:	0598      	lsls	r0, r3, #22
 800218e:	d4ed      	bmi.n	800216c <_vfiprintf_r+0x4c>
 8002190:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002192:	f7ff ff08 	bl	8001fa6 <__retarget_lock_release_recursive>
 8002196:	e7e9      	b.n	800216c <_vfiprintf_r+0x4c>
 8002198:	2300      	movs	r3, #0
 800219a:	9309      	str	r3, [sp, #36]	; 0x24
 800219c:	2320      	movs	r3, #32
 800219e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80021a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80021a6:	2330      	movs	r3, #48	; 0x30
 80021a8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800236c <_vfiprintf_r+0x24c>
 80021ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80021b0:	f04f 0901 	mov.w	r9, #1
 80021b4:	4623      	mov	r3, r4
 80021b6:	469a      	mov	sl, r3
 80021b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80021bc:	b10a      	cbz	r2, 80021c2 <_vfiprintf_r+0xa2>
 80021be:	2a25      	cmp	r2, #37	; 0x25
 80021c0:	d1f9      	bne.n	80021b6 <_vfiprintf_r+0x96>
 80021c2:	ebba 0b04 	subs.w	fp, sl, r4
 80021c6:	d00b      	beq.n	80021e0 <_vfiprintf_r+0xc0>
 80021c8:	465b      	mov	r3, fp
 80021ca:	4622      	mov	r2, r4
 80021cc:	4629      	mov	r1, r5
 80021ce:	4630      	mov	r0, r6
 80021d0:	f7ff ff93 	bl	80020fa <__sfputs_r>
 80021d4:	3001      	adds	r0, #1
 80021d6:	f000 80aa 	beq.w	800232e <_vfiprintf_r+0x20e>
 80021da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80021dc:	445a      	add	r2, fp
 80021de:	9209      	str	r2, [sp, #36]	; 0x24
 80021e0:	f89a 3000 	ldrb.w	r3, [sl]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	f000 80a2 	beq.w	800232e <_vfiprintf_r+0x20e>
 80021ea:	2300      	movs	r3, #0
 80021ec:	f04f 32ff 	mov.w	r2, #4294967295
 80021f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80021f4:	f10a 0a01 	add.w	sl, sl, #1
 80021f8:	9304      	str	r3, [sp, #16]
 80021fa:	9307      	str	r3, [sp, #28]
 80021fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002200:	931a      	str	r3, [sp, #104]	; 0x68
 8002202:	4654      	mov	r4, sl
 8002204:	2205      	movs	r2, #5
 8002206:	f814 1b01 	ldrb.w	r1, [r4], #1
 800220a:	4858      	ldr	r0, [pc, #352]	; (800236c <_vfiprintf_r+0x24c>)
 800220c:	f7fd ffb8 	bl	8000180 <memchr>
 8002210:	9a04      	ldr	r2, [sp, #16]
 8002212:	b9d8      	cbnz	r0, 800224c <_vfiprintf_r+0x12c>
 8002214:	06d1      	lsls	r1, r2, #27
 8002216:	bf44      	itt	mi
 8002218:	2320      	movmi	r3, #32
 800221a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800221e:	0713      	lsls	r3, r2, #28
 8002220:	bf44      	itt	mi
 8002222:	232b      	movmi	r3, #43	; 0x2b
 8002224:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002228:	f89a 3000 	ldrb.w	r3, [sl]
 800222c:	2b2a      	cmp	r3, #42	; 0x2a
 800222e:	d015      	beq.n	800225c <_vfiprintf_r+0x13c>
 8002230:	9a07      	ldr	r2, [sp, #28]
 8002232:	4654      	mov	r4, sl
 8002234:	2000      	movs	r0, #0
 8002236:	f04f 0c0a 	mov.w	ip, #10
 800223a:	4621      	mov	r1, r4
 800223c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002240:	3b30      	subs	r3, #48	; 0x30
 8002242:	2b09      	cmp	r3, #9
 8002244:	d94e      	bls.n	80022e4 <_vfiprintf_r+0x1c4>
 8002246:	b1b0      	cbz	r0, 8002276 <_vfiprintf_r+0x156>
 8002248:	9207      	str	r2, [sp, #28]
 800224a:	e014      	b.n	8002276 <_vfiprintf_r+0x156>
 800224c:	eba0 0308 	sub.w	r3, r0, r8
 8002250:	fa09 f303 	lsl.w	r3, r9, r3
 8002254:	4313      	orrs	r3, r2
 8002256:	9304      	str	r3, [sp, #16]
 8002258:	46a2      	mov	sl, r4
 800225a:	e7d2      	b.n	8002202 <_vfiprintf_r+0xe2>
 800225c:	9b03      	ldr	r3, [sp, #12]
 800225e:	1d19      	adds	r1, r3, #4
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	9103      	str	r1, [sp, #12]
 8002264:	2b00      	cmp	r3, #0
 8002266:	bfbb      	ittet	lt
 8002268:	425b      	neglt	r3, r3
 800226a:	f042 0202 	orrlt.w	r2, r2, #2
 800226e:	9307      	strge	r3, [sp, #28]
 8002270:	9307      	strlt	r3, [sp, #28]
 8002272:	bfb8      	it	lt
 8002274:	9204      	strlt	r2, [sp, #16]
 8002276:	7823      	ldrb	r3, [r4, #0]
 8002278:	2b2e      	cmp	r3, #46	; 0x2e
 800227a:	d10c      	bne.n	8002296 <_vfiprintf_r+0x176>
 800227c:	7863      	ldrb	r3, [r4, #1]
 800227e:	2b2a      	cmp	r3, #42	; 0x2a
 8002280:	d135      	bne.n	80022ee <_vfiprintf_r+0x1ce>
 8002282:	9b03      	ldr	r3, [sp, #12]
 8002284:	1d1a      	adds	r2, r3, #4
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	9203      	str	r2, [sp, #12]
 800228a:	2b00      	cmp	r3, #0
 800228c:	bfb8      	it	lt
 800228e:	f04f 33ff 	movlt.w	r3, #4294967295
 8002292:	3402      	adds	r4, #2
 8002294:	9305      	str	r3, [sp, #20]
 8002296:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8002370 <_vfiprintf_r+0x250>
 800229a:	7821      	ldrb	r1, [r4, #0]
 800229c:	2203      	movs	r2, #3
 800229e:	4650      	mov	r0, sl
 80022a0:	f7fd ff6e 	bl	8000180 <memchr>
 80022a4:	b140      	cbz	r0, 80022b8 <_vfiprintf_r+0x198>
 80022a6:	2340      	movs	r3, #64	; 0x40
 80022a8:	eba0 000a 	sub.w	r0, r0, sl
 80022ac:	fa03 f000 	lsl.w	r0, r3, r0
 80022b0:	9b04      	ldr	r3, [sp, #16]
 80022b2:	4303      	orrs	r3, r0
 80022b4:	3401      	adds	r4, #1
 80022b6:	9304      	str	r3, [sp, #16]
 80022b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80022bc:	482d      	ldr	r0, [pc, #180]	; (8002374 <_vfiprintf_r+0x254>)
 80022be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80022c2:	2206      	movs	r2, #6
 80022c4:	f7fd ff5c 	bl	8000180 <memchr>
 80022c8:	2800      	cmp	r0, #0
 80022ca:	d03f      	beq.n	800234c <_vfiprintf_r+0x22c>
 80022cc:	4b2a      	ldr	r3, [pc, #168]	; (8002378 <_vfiprintf_r+0x258>)
 80022ce:	bb1b      	cbnz	r3, 8002318 <_vfiprintf_r+0x1f8>
 80022d0:	9b03      	ldr	r3, [sp, #12]
 80022d2:	3307      	adds	r3, #7
 80022d4:	f023 0307 	bic.w	r3, r3, #7
 80022d8:	3308      	adds	r3, #8
 80022da:	9303      	str	r3, [sp, #12]
 80022dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80022de:	443b      	add	r3, r7
 80022e0:	9309      	str	r3, [sp, #36]	; 0x24
 80022e2:	e767      	b.n	80021b4 <_vfiprintf_r+0x94>
 80022e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80022e8:	460c      	mov	r4, r1
 80022ea:	2001      	movs	r0, #1
 80022ec:	e7a5      	b.n	800223a <_vfiprintf_r+0x11a>
 80022ee:	2300      	movs	r3, #0
 80022f0:	3401      	adds	r4, #1
 80022f2:	9305      	str	r3, [sp, #20]
 80022f4:	4619      	mov	r1, r3
 80022f6:	f04f 0c0a 	mov.w	ip, #10
 80022fa:	4620      	mov	r0, r4
 80022fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002300:	3a30      	subs	r2, #48	; 0x30
 8002302:	2a09      	cmp	r2, #9
 8002304:	d903      	bls.n	800230e <_vfiprintf_r+0x1ee>
 8002306:	2b00      	cmp	r3, #0
 8002308:	d0c5      	beq.n	8002296 <_vfiprintf_r+0x176>
 800230a:	9105      	str	r1, [sp, #20]
 800230c:	e7c3      	b.n	8002296 <_vfiprintf_r+0x176>
 800230e:	fb0c 2101 	mla	r1, ip, r1, r2
 8002312:	4604      	mov	r4, r0
 8002314:	2301      	movs	r3, #1
 8002316:	e7f0      	b.n	80022fa <_vfiprintf_r+0x1da>
 8002318:	ab03      	add	r3, sp, #12
 800231a:	9300      	str	r3, [sp, #0]
 800231c:	462a      	mov	r2, r5
 800231e:	4b17      	ldr	r3, [pc, #92]	; (800237c <_vfiprintf_r+0x25c>)
 8002320:	a904      	add	r1, sp, #16
 8002322:	4630      	mov	r0, r6
 8002324:	f3af 8000 	nop.w
 8002328:	4607      	mov	r7, r0
 800232a:	1c78      	adds	r0, r7, #1
 800232c:	d1d6      	bne.n	80022dc <_vfiprintf_r+0x1bc>
 800232e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002330:	07d9      	lsls	r1, r3, #31
 8002332:	d405      	bmi.n	8002340 <_vfiprintf_r+0x220>
 8002334:	89ab      	ldrh	r3, [r5, #12]
 8002336:	059a      	lsls	r2, r3, #22
 8002338:	d402      	bmi.n	8002340 <_vfiprintf_r+0x220>
 800233a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800233c:	f7ff fe33 	bl	8001fa6 <__retarget_lock_release_recursive>
 8002340:	89ab      	ldrh	r3, [r5, #12]
 8002342:	065b      	lsls	r3, r3, #25
 8002344:	f53f af12 	bmi.w	800216c <_vfiprintf_r+0x4c>
 8002348:	9809      	ldr	r0, [sp, #36]	; 0x24
 800234a:	e711      	b.n	8002170 <_vfiprintf_r+0x50>
 800234c:	ab03      	add	r3, sp, #12
 800234e:	9300      	str	r3, [sp, #0]
 8002350:	462a      	mov	r2, r5
 8002352:	4b0a      	ldr	r3, [pc, #40]	; (800237c <_vfiprintf_r+0x25c>)
 8002354:	a904      	add	r1, sp, #16
 8002356:	4630      	mov	r0, r6
 8002358:	f000 f880 	bl	800245c <_printf_i>
 800235c:	e7e4      	b.n	8002328 <_vfiprintf_r+0x208>
 800235e:	bf00      	nop
 8002360:	08002d7c 	.word	0x08002d7c
 8002364:	08002d9c 	.word	0x08002d9c
 8002368:	08002d5c 	.word	0x08002d5c
 800236c:	08002dbc 	.word	0x08002dbc
 8002370:	08002dc2 	.word	0x08002dc2
 8002374:	08002dc6 	.word	0x08002dc6
 8002378:	00000000 	.word	0x00000000
 800237c:	080020fb 	.word	0x080020fb

08002380 <_printf_common>:
 8002380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002384:	4616      	mov	r6, r2
 8002386:	4699      	mov	r9, r3
 8002388:	688a      	ldr	r2, [r1, #8]
 800238a:	690b      	ldr	r3, [r1, #16]
 800238c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002390:	4293      	cmp	r3, r2
 8002392:	bfb8      	it	lt
 8002394:	4613      	movlt	r3, r2
 8002396:	6033      	str	r3, [r6, #0]
 8002398:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800239c:	4607      	mov	r7, r0
 800239e:	460c      	mov	r4, r1
 80023a0:	b10a      	cbz	r2, 80023a6 <_printf_common+0x26>
 80023a2:	3301      	adds	r3, #1
 80023a4:	6033      	str	r3, [r6, #0]
 80023a6:	6823      	ldr	r3, [r4, #0]
 80023a8:	0699      	lsls	r1, r3, #26
 80023aa:	bf42      	ittt	mi
 80023ac:	6833      	ldrmi	r3, [r6, #0]
 80023ae:	3302      	addmi	r3, #2
 80023b0:	6033      	strmi	r3, [r6, #0]
 80023b2:	6825      	ldr	r5, [r4, #0]
 80023b4:	f015 0506 	ands.w	r5, r5, #6
 80023b8:	d106      	bne.n	80023c8 <_printf_common+0x48>
 80023ba:	f104 0a19 	add.w	sl, r4, #25
 80023be:	68e3      	ldr	r3, [r4, #12]
 80023c0:	6832      	ldr	r2, [r6, #0]
 80023c2:	1a9b      	subs	r3, r3, r2
 80023c4:	42ab      	cmp	r3, r5
 80023c6:	dc26      	bgt.n	8002416 <_printf_common+0x96>
 80023c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80023cc:	1e13      	subs	r3, r2, #0
 80023ce:	6822      	ldr	r2, [r4, #0]
 80023d0:	bf18      	it	ne
 80023d2:	2301      	movne	r3, #1
 80023d4:	0692      	lsls	r2, r2, #26
 80023d6:	d42b      	bmi.n	8002430 <_printf_common+0xb0>
 80023d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80023dc:	4649      	mov	r1, r9
 80023de:	4638      	mov	r0, r7
 80023e0:	47c0      	blx	r8
 80023e2:	3001      	adds	r0, #1
 80023e4:	d01e      	beq.n	8002424 <_printf_common+0xa4>
 80023e6:	6823      	ldr	r3, [r4, #0]
 80023e8:	68e5      	ldr	r5, [r4, #12]
 80023ea:	6832      	ldr	r2, [r6, #0]
 80023ec:	f003 0306 	and.w	r3, r3, #6
 80023f0:	2b04      	cmp	r3, #4
 80023f2:	bf08      	it	eq
 80023f4:	1aad      	subeq	r5, r5, r2
 80023f6:	68a3      	ldr	r3, [r4, #8]
 80023f8:	6922      	ldr	r2, [r4, #16]
 80023fa:	bf0c      	ite	eq
 80023fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002400:	2500      	movne	r5, #0
 8002402:	4293      	cmp	r3, r2
 8002404:	bfc4      	itt	gt
 8002406:	1a9b      	subgt	r3, r3, r2
 8002408:	18ed      	addgt	r5, r5, r3
 800240a:	2600      	movs	r6, #0
 800240c:	341a      	adds	r4, #26
 800240e:	42b5      	cmp	r5, r6
 8002410:	d11a      	bne.n	8002448 <_printf_common+0xc8>
 8002412:	2000      	movs	r0, #0
 8002414:	e008      	b.n	8002428 <_printf_common+0xa8>
 8002416:	2301      	movs	r3, #1
 8002418:	4652      	mov	r2, sl
 800241a:	4649      	mov	r1, r9
 800241c:	4638      	mov	r0, r7
 800241e:	47c0      	blx	r8
 8002420:	3001      	adds	r0, #1
 8002422:	d103      	bne.n	800242c <_printf_common+0xac>
 8002424:	f04f 30ff 	mov.w	r0, #4294967295
 8002428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800242c:	3501      	adds	r5, #1
 800242e:	e7c6      	b.n	80023be <_printf_common+0x3e>
 8002430:	18e1      	adds	r1, r4, r3
 8002432:	1c5a      	adds	r2, r3, #1
 8002434:	2030      	movs	r0, #48	; 0x30
 8002436:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800243a:	4422      	add	r2, r4
 800243c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002440:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002444:	3302      	adds	r3, #2
 8002446:	e7c7      	b.n	80023d8 <_printf_common+0x58>
 8002448:	2301      	movs	r3, #1
 800244a:	4622      	mov	r2, r4
 800244c:	4649      	mov	r1, r9
 800244e:	4638      	mov	r0, r7
 8002450:	47c0      	blx	r8
 8002452:	3001      	adds	r0, #1
 8002454:	d0e6      	beq.n	8002424 <_printf_common+0xa4>
 8002456:	3601      	adds	r6, #1
 8002458:	e7d9      	b.n	800240e <_printf_common+0x8e>
	...

0800245c <_printf_i>:
 800245c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002460:	7e0f      	ldrb	r7, [r1, #24]
 8002462:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002464:	2f78      	cmp	r7, #120	; 0x78
 8002466:	4691      	mov	r9, r2
 8002468:	4680      	mov	r8, r0
 800246a:	460c      	mov	r4, r1
 800246c:	469a      	mov	sl, r3
 800246e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002472:	d807      	bhi.n	8002484 <_printf_i+0x28>
 8002474:	2f62      	cmp	r7, #98	; 0x62
 8002476:	d80a      	bhi.n	800248e <_printf_i+0x32>
 8002478:	2f00      	cmp	r7, #0
 800247a:	f000 80d8 	beq.w	800262e <_printf_i+0x1d2>
 800247e:	2f58      	cmp	r7, #88	; 0x58
 8002480:	f000 80a3 	beq.w	80025ca <_printf_i+0x16e>
 8002484:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002488:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800248c:	e03a      	b.n	8002504 <_printf_i+0xa8>
 800248e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002492:	2b15      	cmp	r3, #21
 8002494:	d8f6      	bhi.n	8002484 <_printf_i+0x28>
 8002496:	a101      	add	r1, pc, #4	; (adr r1, 800249c <_printf_i+0x40>)
 8002498:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800249c:	080024f5 	.word	0x080024f5
 80024a0:	08002509 	.word	0x08002509
 80024a4:	08002485 	.word	0x08002485
 80024a8:	08002485 	.word	0x08002485
 80024ac:	08002485 	.word	0x08002485
 80024b0:	08002485 	.word	0x08002485
 80024b4:	08002509 	.word	0x08002509
 80024b8:	08002485 	.word	0x08002485
 80024bc:	08002485 	.word	0x08002485
 80024c0:	08002485 	.word	0x08002485
 80024c4:	08002485 	.word	0x08002485
 80024c8:	08002615 	.word	0x08002615
 80024cc:	08002539 	.word	0x08002539
 80024d0:	080025f7 	.word	0x080025f7
 80024d4:	08002485 	.word	0x08002485
 80024d8:	08002485 	.word	0x08002485
 80024dc:	08002637 	.word	0x08002637
 80024e0:	08002485 	.word	0x08002485
 80024e4:	08002539 	.word	0x08002539
 80024e8:	08002485 	.word	0x08002485
 80024ec:	08002485 	.word	0x08002485
 80024f0:	080025ff 	.word	0x080025ff
 80024f4:	682b      	ldr	r3, [r5, #0]
 80024f6:	1d1a      	adds	r2, r3, #4
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	602a      	str	r2, [r5, #0]
 80024fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002500:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002504:	2301      	movs	r3, #1
 8002506:	e0a3      	b.n	8002650 <_printf_i+0x1f4>
 8002508:	6820      	ldr	r0, [r4, #0]
 800250a:	6829      	ldr	r1, [r5, #0]
 800250c:	0606      	lsls	r6, r0, #24
 800250e:	f101 0304 	add.w	r3, r1, #4
 8002512:	d50a      	bpl.n	800252a <_printf_i+0xce>
 8002514:	680e      	ldr	r6, [r1, #0]
 8002516:	602b      	str	r3, [r5, #0]
 8002518:	2e00      	cmp	r6, #0
 800251a:	da03      	bge.n	8002524 <_printf_i+0xc8>
 800251c:	232d      	movs	r3, #45	; 0x2d
 800251e:	4276      	negs	r6, r6
 8002520:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002524:	485e      	ldr	r0, [pc, #376]	; (80026a0 <_printf_i+0x244>)
 8002526:	230a      	movs	r3, #10
 8002528:	e019      	b.n	800255e <_printf_i+0x102>
 800252a:	680e      	ldr	r6, [r1, #0]
 800252c:	602b      	str	r3, [r5, #0]
 800252e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002532:	bf18      	it	ne
 8002534:	b236      	sxthne	r6, r6
 8002536:	e7ef      	b.n	8002518 <_printf_i+0xbc>
 8002538:	682b      	ldr	r3, [r5, #0]
 800253a:	6820      	ldr	r0, [r4, #0]
 800253c:	1d19      	adds	r1, r3, #4
 800253e:	6029      	str	r1, [r5, #0]
 8002540:	0601      	lsls	r1, r0, #24
 8002542:	d501      	bpl.n	8002548 <_printf_i+0xec>
 8002544:	681e      	ldr	r6, [r3, #0]
 8002546:	e002      	b.n	800254e <_printf_i+0xf2>
 8002548:	0646      	lsls	r6, r0, #25
 800254a:	d5fb      	bpl.n	8002544 <_printf_i+0xe8>
 800254c:	881e      	ldrh	r6, [r3, #0]
 800254e:	4854      	ldr	r0, [pc, #336]	; (80026a0 <_printf_i+0x244>)
 8002550:	2f6f      	cmp	r7, #111	; 0x6f
 8002552:	bf0c      	ite	eq
 8002554:	2308      	moveq	r3, #8
 8002556:	230a      	movne	r3, #10
 8002558:	2100      	movs	r1, #0
 800255a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800255e:	6865      	ldr	r5, [r4, #4]
 8002560:	60a5      	str	r5, [r4, #8]
 8002562:	2d00      	cmp	r5, #0
 8002564:	bfa2      	ittt	ge
 8002566:	6821      	ldrge	r1, [r4, #0]
 8002568:	f021 0104 	bicge.w	r1, r1, #4
 800256c:	6021      	strge	r1, [r4, #0]
 800256e:	b90e      	cbnz	r6, 8002574 <_printf_i+0x118>
 8002570:	2d00      	cmp	r5, #0
 8002572:	d04d      	beq.n	8002610 <_printf_i+0x1b4>
 8002574:	4615      	mov	r5, r2
 8002576:	fbb6 f1f3 	udiv	r1, r6, r3
 800257a:	fb03 6711 	mls	r7, r3, r1, r6
 800257e:	5dc7      	ldrb	r7, [r0, r7]
 8002580:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002584:	4637      	mov	r7, r6
 8002586:	42bb      	cmp	r3, r7
 8002588:	460e      	mov	r6, r1
 800258a:	d9f4      	bls.n	8002576 <_printf_i+0x11a>
 800258c:	2b08      	cmp	r3, #8
 800258e:	d10b      	bne.n	80025a8 <_printf_i+0x14c>
 8002590:	6823      	ldr	r3, [r4, #0]
 8002592:	07de      	lsls	r6, r3, #31
 8002594:	d508      	bpl.n	80025a8 <_printf_i+0x14c>
 8002596:	6923      	ldr	r3, [r4, #16]
 8002598:	6861      	ldr	r1, [r4, #4]
 800259a:	4299      	cmp	r1, r3
 800259c:	bfde      	ittt	le
 800259e:	2330      	movle	r3, #48	; 0x30
 80025a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80025a4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80025a8:	1b52      	subs	r2, r2, r5
 80025aa:	6122      	str	r2, [r4, #16]
 80025ac:	f8cd a000 	str.w	sl, [sp]
 80025b0:	464b      	mov	r3, r9
 80025b2:	aa03      	add	r2, sp, #12
 80025b4:	4621      	mov	r1, r4
 80025b6:	4640      	mov	r0, r8
 80025b8:	f7ff fee2 	bl	8002380 <_printf_common>
 80025bc:	3001      	adds	r0, #1
 80025be:	d14c      	bne.n	800265a <_printf_i+0x1fe>
 80025c0:	f04f 30ff 	mov.w	r0, #4294967295
 80025c4:	b004      	add	sp, #16
 80025c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80025ca:	4835      	ldr	r0, [pc, #212]	; (80026a0 <_printf_i+0x244>)
 80025cc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80025d0:	6829      	ldr	r1, [r5, #0]
 80025d2:	6823      	ldr	r3, [r4, #0]
 80025d4:	f851 6b04 	ldr.w	r6, [r1], #4
 80025d8:	6029      	str	r1, [r5, #0]
 80025da:	061d      	lsls	r5, r3, #24
 80025dc:	d514      	bpl.n	8002608 <_printf_i+0x1ac>
 80025de:	07df      	lsls	r7, r3, #31
 80025e0:	bf44      	itt	mi
 80025e2:	f043 0320 	orrmi.w	r3, r3, #32
 80025e6:	6023      	strmi	r3, [r4, #0]
 80025e8:	b91e      	cbnz	r6, 80025f2 <_printf_i+0x196>
 80025ea:	6823      	ldr	r3, [r4, #0]
 80025ec:	f023 0320 	bic.w	r3, r3, #32
 80025f0:	6023      	str	r3, [r4, #0]
 80025f2:	2310      	movs	r3, #16
 80025f4:	e7b0      	b.n	8002558 <_printf_i+0xfc>
 80025f6:	6823      	ldr	r3, [r4, #0]
 80025f8:	f043 0320 	orr.w	r3, r3, #32
 80025fc:	6023      	str	r3, [r4, #0]
 80025fe:	2378      	movs	r3, #120	; 0x78
 8002600:	4828      	ldr	r0, [pc, #160]	; (80026a4 <_printf_i+0x248>)
 8002602:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002606:	e7e3      	b.n	80025d0 <_printf_i+0x174>
 8002608:	0659      	lsls	r1, r3, #25
 800260a:	bf48      	it	mi
 800260c:	b2b6      	uxthmi	r6, r6
 800260e:	e7e6      	b.n	80025de <_printf_i+0x182>
 8002610:	4615      	mov	r5, r2
 8002612:	e7bb      	b.n	800258c <_printf_i+0x130>
 8002614:	682b      	ldr	r3, [r5, #0]
 8002616:	6826      	ldr	r6, [r4, #0]
 8002618:	6961      	ldr	r1, [r4, #20]
 800261a:	1d18      	adds	r0, r3, #4
 800261c:	6028      	str	r0, [r5, #0]
 800261e:	0635      	lsls	r5, r6, #24
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	d501      	bpl.n	8002628 <_printf_i+0x1cc>
 8002624:	6019      	str	r1, [r3, #0]
 8002626:	e002      	b.n	800262e <_printf_i+0x1d2>
 8002628:	0670      	lsls	r0, r6, #25
 800262a:	d5fb      	bpl.n	8002624 <_printf_i+0x1c8>
 800262c:	8019      	strh	r1, [r3, #0]
 800262e:	2300      	movs	r3, #0
 8002630:	6123      	str	r3, [r4, #16]
 8002632:	4615      	mov	r5, r2
 8002634:	e7ba      	b.n	80025ac <_printf_i+0x150>
 8002636:	682b      	ldr	r3, [r5, #0]
 8002638:	1d1a      	adds	r2, r3, #4
 800263a:	602a      	str	r2, [r5, #0]
 800263c:	681d      	ldr	r5, [r3, #0]
 800263e:	6862      	ldr	r2, [r4, #4]
 8002640:	2100      	movs	r1, #0
 8002642:	4628      	mov	r0, r5
 8002644:	f7fd fd9c 	bl	8000180 <memchr>
 8002648:	b108      	cbz	r0, 800264e <_printf_i+0x1f2>
 800264a:	1b40      	subs	r0, r0, r5
 800264c:	6060      	str	r0, [r4, #4]
 800264e:	6863      	ldr	r3, [r4, #4]
 8002650:	6123      	str	r3, [r4, #16]
 8002652:	2300      	movs	r3, #0
 8002654:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002658:	e7a8      	b.n	80025ac <_printf_i+0x150>
 800265a:	6923      	ldr	r3, [r4, #16]
 800265c:	462a      	mov	r2, r5
 800265e:	4649      	mov	r1, r9
 8002660:	4640      	mov	r0, r8
 8002662:	47d0      	blx	sl
 8002664:	3001      	adds	r0, #1
 8002666:	d0ab      	beq.n	80025c0 <_printf_i+0x164>
 8002668:	6823      	ldr	r3, [r4, #0]
 800266a:	079b      	lsls	r3, r3, #30
 800266c:	d413      	bmi.n	8002696 <_printf_i+0x23a>
 800266e:	68e0      	ldr	r0, [r4, #12]
 8002670:	9b03      	ldr	r3, [sp, #12]
 8002672:	4298      	cmp	r0, r3
 8002674:	bfb8      	it	lt
 8002676:	4618      	movlt	r0, r3
 8002678:	e7a4      	b.n	80025c4 <_printf_i+0x168>
 800267a:	2301      	movs	r3, #1
 800267c:	4632      	mov	r2, r6
 800267e:	4649      	mov	r1, r9
 8002680:	4640      	mov	r0, r8
 8002682:	47d0      	blx	sl
 8002684:	3001      	adds	r0, #1
 8002686:	d09b      	beq.n	80025c0 <_printf_i+0x164>
 8002688:	3501      	adds	r5, #1
 800268a:	68e3      	ldr	r3, [r4, #12]
 800268c:	9903      	ldr	r1, [sp, #12]
 800268e:	1a5b      	subs	r3, r3, r1
 8002690:	42ab      	cmp	r3, r5
 8002692:	dcf2      	bgt.n	800267a <_printf_i+0x21e>
 8002694:	e7eb      	b.n	800266e <_printf_i+0x212>
 8002696:	2500      	movs	r5, #0
 8002698:	f104 0619 	add.w	r6, r4, #25
 800269c:	e7f5      	b.n	800268a <_printf_i+0x22e>
 800269e:	bf00      	nop
 80026a0:	08002dcd 	.word	0x08002dcd
 80026a4:	08002dde 	.word	0x08002dde

080026a8 <_sbrk_r>:
 80026a8:	b538      	push	{r3, r4, r5, lr}
 80026aa:	4d06      	ldr	r5, [pc, #24]	; (80026c4 <_sbrk_r+0x1c>)
 80026ac:	2300      	movs	r3, #0
 80026ae:	4604      	mov	r4, r0
 80026b0:	4608      	mov	r0, r1
 80026b2:	602b      	str	r3, [r5, #0]
 80026b4:	f7fd ff1e 	bl	80004f4 <_sbrk>
 80026b8:	1c43      	adds	r3, r0, #1
 80026ba:	d102      	bne.n	80026c2 <_sbrk_r+0x1a>
 80026bc:	682b      	ldr	r3, [r5, #0]
 80026be:	b103      	cbz	r3, 80026c2 <_sbrk_r+0x1a>
 80026c0:	6023      	str	r3, [r4, #0]
 80026c2:	bd38      	pop	{r3, r4, r5, pc}
 80026c4:	200000b4 	.word	0x200000b4

080026c8 <__sread>:
 80026c8:	b510      	push	{r4, lr}
 80026ca:	460c      	mov	r4, r1
 80026cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80026d0:	f000 faac 	bl	8002c2c <_read_r>
 80026d4:	2800      	cmp	r0, #0
 80026d6:	bfab      	itete	ge
 80026d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80026da:	89a3      	ldrhlt	r3, [r4, #12]
 80026dc:	181b      	addge	r3, r3, r0
 80026de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80026e2:	bfac      	ite	ge
 80026e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80026e6:	81a3      	strhlt	r3, [r4, #12]
 80026e8:	bd10      	pop	{r4, pc}

080026ea <__swrite>:
 80026ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026ee:	461f      	mov	r7, r3
 80026f0:	898b      	ldrh	r3, [r1, #12]
 80026f2:	05db      	lsls	r3, r3, #23
 80026f4:	4605      	mov	r5, r0
 80026f6:	460c      	mov	r4, r1
 80026f8:	4616      	mov	r6, r2
 80026fa:	d505      	bpl.n	8002708 <__swrite+0x1e>
 80026fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002700:	2302      	movs	r3, #2
 8002702:	2200      	movs	r2, #0
 8002704:	f000 f9c4 	bl	8002a90 <_lseek_r>
 8002708:	89a3      	ldrh	r3, [r4, #12]
 800270a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800270e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002712:	81a3      	strh	r3, [r4, #12]
 8002714:	4632      	mov	r2, r6
 8002716:	463b      	mov	r3, r7
 8002718:	4628      	mov	r0, r5
 800271a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800271e:	f000 b869 	b.w	80027f4 <_write_r>

08002722 <__sseek>:
 8002722:	b510      	push	{r4, lr}
 8002724:	460c      	mov	r4, r1
 8002726:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800272a:	f000 f9b1 	bl	8002a90 <_lseek_r>
 800272e:	1c43      	adds	r3, r0, #1
 8002730:	89a3      	ldrh	r3, [r4, #12]
 8002732:	bf15      	itete	ne
 8002734:	6560      	strne	r0, [r4, #84]	; 0x54
 8002736:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800273a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800273e:	81a3      	strheq	r3, [r4, #12]
 8002740:	bf18      	it	ne
 8002742:	81a3      	strhne	r3, [r4, #12]
 8002744:	bd10      	pop	{r4, pc}

08002746 <__sclose>:
 8002746:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800274a:	f000 b8d3 	b.w	80028f4 <_close_r>
	...

08002750 <__swbuf_r>:
 8002750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002752:	460e      	mov	r6, r1
 8002754:	4614      	mov	r4, r2
 8002756:	4605      	mov	r5, r0
 8002758:	b118      	cbz	r0, 8002762 <__swbuf_r+0x12>
 800275a:	6983      	ldr	r3, [r0, #24]
 800275c:	b90b      	cbnz	r3, 8002762 <__swbuf_r+0x12>
 800275e:	f7ff fb83 	bl	8001e68 <__sinit>
 8002762:	4b21      	ldr	r3, [pc, #132]	; (80027e8 <__swbuf_r+0x98>)
 8002764:	429c      	cmp	r4, r3
 8002766:	d12b      	bne.n	80027c0 <__swbuf_r+0x70>
 8002768:	686c      	ldr	r4, [r5, #4]
 800276a:	69a3      	ldr	r3, [r4, #24]
 800276c:	60a3      	str	r3, [r4, #8]
 800276e:	89a3      	ldrh	r3, [r4, #12]
 8002770:	071a      	lsls	r2, r3, #28
 8002772:	d52f      	bpl.n	80027d4 <__swbuf_r+0x84>
 8002774:	6923      	ldr	r3, [r4, #16]
 8002776:	b36b      	cbz	r3, 80027d4 <__swbuf_r+0x84>
 8002778:	6923      	ldr	r3, [r4, #16]
 800277a:	6820      	ldr	r0, [r4, #0]
 800277c:	1ac0      	subs	r0, r0, r3
 800277e:	6963      	ldr	r3, [r4, #20]
 8002780:	b2f6      	uxtb	r6, r6
 8002782:	4283      	cmp	r3, r0
 8002784:	4637      	mov	r7, r6
 8002786:	dc04      	bgt.n	8002792 <__swbuf_r+0x42>
 8002788:	4621      	mov	r1, r4
 800278a:	4628      	mov	r0, r5
 800278c:	f000 f944 	bl	8002a18 <_fflush_r>
 8002790:	bb30      	cbnz	r0, 80027e0 <__swbuf_r+0x90>
 8002792:	68a3      	ldr	r3, [r4, #8]
 8002794:	3b01      	subs	r3, #1
 8002796:	60a3      	str	r3, [r4, #8]
 8002798:	6823      	ldr	r3, [r4, #0]
 800279a:	1c5a      	adds	r2, r3, #1
 800279c:	6022      	str	r2, [r4, #0]
 800279e:	701e      	strb	r6, [r3, #0]
 80027a0:	6963      	ldr	r3, [r4, #20]
 80027a2:	3001      	adds	r0, #1
 80027a4:	4283      	cmp	r3, r0
 80027a6:	d004      	beq.n	80027b2 <__swbuf_r+0x62>
 80027a8:	89a3      	ldrh	r3, [r4, #12]
 80027aa:	07db      	lsls	r3, r3, #31
 80027ac:	d506      	bpl.n	80027bc <__swbuf_r+0x6c>
 80027ae:	2e0a      	cmp	r6, #10
 80027b0:	d104      	bne.n	80027bc <__swbuf_r+0x6c>
 80027b2:	4621      	mov	r1, r4
 80027b4:	4628      	mov	r0, r5
 80027b6:	f000 f92f 	bl	8002a18 <_fflush_r>
 80027ba:	b988      	cbnz	r0, 80027e0 <__swbuf_r+0x90>
 80027bc:	4638      	mov	r0, r7
 80027be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80027c0:	4b0a      	ldr	r3, [pc, #40]	; (80027ec <__swbuf_r+0x9c>)
 80027c2:	429c      	cmp	r4, r3
 80027c4:	d101      	bne.n	80027ca <__swbuf_r+0x7a>
 80027c6:	68ac      	ldr	r4, [r5, #8]
 80027c8:	e7cf      	b.n	800276a <__swbuf_r+0x1a>
 80027ca:	4b09      	ldr	r3, [pc, #36]	; (80027f0 <__swbuf_r+0xa0>)
 80027cc:	429c      	cmp	r4, r3
 80027ce:	bf08      	it	eq
 80027d0:	68ec      	ldreq	r4, [r5, #12]
 80027d2:	e7ca      	b.n	800276a <__swbuf_r+0x1a>
 80027d4:	4621      	mov	r1, r4
 80027d6:	4628      	mov	r0, r5
 80027d8:	f000 f81e 	bl	8002818 <__swsetup_r>
 80027dc:	2800      	cmp	r0, #0
 80027de:	d0cb      	beq.n	8002778 <__swbuf_r+0x28>
 80027e0:	f04f 37ff 	mov.w	r7, #4294967295
 80027e4:	e7ea      	b.n	80027bc <__swbuf_r+0x6c>
 80027e6:	bf00      	nop
 80027e8:	08002d7c 	.word	0x08002d7c
 80027ec:	08002d9c 	.word	0x08002d9c
 80027f0:	08002d5c 	.word	0x08002d5c

080027f4 <_write_r>:
 80027f4:	b538      	push	{r3, r4, r5, lr}
 80027f6:	4d07      	ldr	r5, [pc, #28]	; (8002814 <_write_r+0x20>)
 80027f8:	4604      	mov	r4, r0
 80027fa:	4608      	mov	r0, r1
 80027fc:	4611      	mov	r1, r2
 80027fe:	2200      	movs	r2, #0
 8002800:	602a      	str	r2, [r5, #0]
 8002802:	461a      	mov	r2, r3
 8002804:	f7fd fe2a 	bl	800045c <_write>
 8002808:	1c43      	adds	r3, r0, #1
 800280a:	d102      	bne.n	8002812 <_write_r+0x1e>
 800280c:	682b      	ldr	r3, [r5, #0]
 800280e:	b103      	cbz	r3, 8002812 <_write_r+0x1e>
 8002810:	6023      	str	r3, [r4, #0]
 8002812:	bd38      	pop	{r3, r4, r5, pc}
 8002814:	200000b4 	.word	0x200000b4

08002818 <__swsetup_r>:
 8002818:	4b32      	ldr	r3, [pc, #200]	; (80028e4 <__swsetup_r+0xcc>)
 800281a:	b570      	push	{r4, r5, r6, lr}
 800281c:	681d      	ldr	r5, [r3, #0]
 800281e:	4606      	mov	r6, r0
 8002820:	460c      	mov	r4, r1
 8002822:	b125      	cbz	r5, 800282e <__swsetup_r+0x16>
 8002824:	69ab      	ldr	r3, [r5, #24]
 8002826:	b913      	cbnz	r3, 800282e <__swsetup_r+0x16>
 8002828:	4628      	mov	r0, r5
 800282a:	f7ff fb1d 	bl	8001e68 <__sinit>
 800282e:	4b2e      	ldr	r3, [pc, #184]	; (80028e8 <__swsetup_r+0xd0>)
 8002830:	429c      	cmp	r4, r3
 8002832:	d10f      	bne.n	8002854 <__swsetup_r+0x3c>
 8002834:	686c      	ldr	r4, [r5, #4]
 8002836:	89a3      	ldrh	r3, [r4, #12]
 8002838:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800283c:	0719      	lsls	r1, r3, #28
 800283e:	d42c      	bmi.n	800289a <__swsetup_r+0x82>
 8002840:	06dd      	lsls	r5, r3, #27
 8002842:	d411      	bmi.n	8002868 <__swsetup_r+0x50>
 8002844:	2309      	movs	r3, #9
 8002846:	6033      	str	r3, [r6, #0]
 8002848:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800284c:	81a3      	strh	r3, [r4, #12]
 800284e:	f04f 30ff 	mov.w	r0, #4294967295
 8002852:	e03e      	b.n	80028d2 <__swsetup_r+0xba>
 8002854:	4b25      	ldr	r3, [pc, #148]	; (80028ec <__swsetup_r+0xd4>)
 8002856:	429c      	cmp	r4, r3
 8002858:	d101      	bne.n	800285e <__swsetup_r+0x46>
 800285a:	68ac      	ldr	r4, [r5, #8]
 800285c:	e7eb      	b.n	8002836 <__swsetup_r+0x1e>
 800285e:	4b24      	ldr	r3, [pc, #144]	; (80028f0 <__swsetup_r+0xd8>)
 8002860:	429c      	cmp	r4, r3
 8002862:	bf08      	it	eq
 8002864:	68ec      	ldreq	r4, [r5, #12]
 8002866:	e7e6      	b.n	8002836 <__swsetup_r+0x1e>
 8002868:	0758      	lsls	r0, r3, #29
 800286a:	d512      	bpl.n	8002892 <__swsetup_r+0x7a>
 800286c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800286e:	b141      	cbz	r1, 8002882 <__swsetup_r+0x6a>
 8002870:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002874:	4299      	cmp	r1, r3
 8002876:	d002      	beq.n	800287e <__swsetup_r+0x66>
 8002878:	4630      	mov	r0, r6
 800287a:	f000 f98d 	bl	8002b98 <_free_r>
 800287e:	2300      	movs	r3, #0
 8002880:	6363      	str	r3, [r4, #52]	; 0x34
 8002882:	89a3      	ldrh	r3, [r4, #12]
 8002884:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002888:	81a3      	strh	r3, [r4, #12]
 800288a:	2300      	movs	r3, #0
 800288c:	6063      	str	r3, [r4, #4]
 800288e:	6923      	ldr	r3, [r4, #16]
 8002890:	6023      	str	r3, [r4, #0]
 8002892:	89a3      	ldrh	r3, [r4, #12]
 8002894:	f043 0308 	orr.w	r3, r3, #8
 8002898:	81a3      	strh	r3, [r4, #12]
 800289a:	6923      	ldr	r3, [r4, #16]
 800289c:	b94b      	cbnz	r3, 80028b2 <__swsetup_r+0x9a>
 800289e:	89a3      	ldrh	r3, [r4, #12]
 80028a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80028a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028a8:	d003      	beq.n	80028b2 <__swsetup_r+0x9a>
 80028aa:	4621      	mov	r1, r4
 80028ac:	4630      	mov	r0, r6
 80028ae:	f000 f927 	bl	8002b00 <__smakebuf_r>
 80028b2:	89a0      	ldrh	r0, [r4, #12]
 80028b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80028b8:	f010 0301 	ands.w	r3, r0, #1
 80028bc:	d00a      	beq.n	80028d4 <__swsetup_r+0xbc>
 80028be:	2300      	movs	r3, #0
 80028c0:	60a3      	str	r3, [r4, #8]
 80028c2:	6963      	ldr	r3, [r4, #20]
 80028c4:	425b      	negs	r3, r3
 80028c6:	61a3      	str	r3, [r4, #24]
 80028c8:	6923      	ldr	r3, [r4, #16]
 80028ca:	b943      	cbnz	r3, 80028de <__swsetup_r+0xc6>
 80028cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80028d0:	d1ba      	bne.n	8002848 <__swsetup_r+0x30>
 80028d2:	bd70      	pop	{r4, r5, r6, pc}
 80028d4:	0781      	lsls	r1, r0, #30
 80028d6:	bf58      	it	pl
 80028d8:	6963      	ldrpl	r3, [r4, #20]
 80028da:	60a3      	str	r3, [r4, #8]
 80028dc:	e7f4      	b.n	80028c8 <__swsetup_r+0xb0>
 80028de:	2000      	movs	r0, #0
 80028e0:	e7f7      	b.n	80028d2 <__swsetup_r+0xba>
 80028e2:	bf00      	nop
 80028e4:	2000000c 	.word	0x2000000c
 80028e8:	08002d7c 	.word	0x08002d7c
 80028ec:	08002d9c 	.word	0x08002d9c
 80028f0:	08002d5c 	.word	0x08002d5c

080028f4 <_close_r>:
 80028f4:	b538      	push	{r3, r4, r5, lr}
 80028f6:	4d06      	ldr	r5, [pc, #24]	; (8002910 <_close_r+0x1c>)
 80028f8:	2300      	movs	r3, #0
 80028fa:	4604      	mov	r4, r0
 80028fc:	4608      	mov	r0, r1
 80028fe:	602b      	str	r3, [r5, #0]
 8002900:	f7fd fdc8 	bl	8000494 <_close>
 8002904:	1c43      	adds	r3, r0, #1
 8002906:	d102      	bne.n	800290e <_close_r+0x1a>
 8002908:	682b      	ldr	r3, [r5, #0]
 800290a:	b103      	cbz	r3, 800290e <_close_r+0x1a>
 800290c:	6023      	str	r3, [r4, #0]
 800290e:	bd38      	pop	{r3, r4, r5, pc}
 8002910:	200000b4 	.word	0x200000b4

08002914 <__sflush_r>:
 8002914:	898a      	ldrh	r2, [r1, #12]
 8002916:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002918:	4605      	mov	r5, r0
 800291a:	0710      	lsls	r0, r2, #28
 800291c:	460c      	mov	r4, r1
 800291e:	d457      	bmi.n	80029d0 <__sflush_r+0xbc>
 8002920:	684b      	ldr	r3, [r1, #4]
 8002922:	2b00      	cmp	r3, #0
 8002924:	dc04      	bgt.n	8002930 <__sflush_r+0x1c>
 8002926:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002928:	2b00      	cmp	r3, #0
 800292a:	dc01      	bgt.n	8002930 <__sflush_r+0x1c>
 800292c:	2000      	movs	r0, #0
 800292e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002930:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002932:	2e00      	cmp	r6, #0
 8002934:	d0fa      	beq.n	800292c <__sflush_r+0x18>
 8002936:	2300      	movs	r3, #0
 8002938:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800293c:	682f      	ldr	r7, [r5, #0]
 800293e:	602b      	str	r3, [r5, #0]
 8002940:	d032      	beq.n	80029a8 <__sflush_r+0x94>
 8002942:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002944:	89a3      	ldrh	r3, [r4, #12]
 8002946:	075a      	lsls	r2, r3, #29
 8002948:	d505      	bpl.n	8002956 <__sflush_r+0x42>
 800294a:	6863      	ldr	r3, [r4, #4]
 800294c:	1ac0      	subs	r0, r0, r3
 800294e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002950:	b10b      	cbz	r3, 8002956 <__sflush_r+0x42>
 8002952:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002954:	1ac0      	subs	r0, r0, r3
 8002956:	2300      	movs	r3, #0
 8002958:	4602      	mov	r2, r0
 800295a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800295c:	6a21      	ldr	r1, [r4, #32]
 800295e:	4628      	mov	r0, r5
 8002960:	47b0      	blx	r6
 8002962:	1c43      	adds	r3, r0, #1
 8002964:	89a3      	ldrh	r3, [r4, #12]
 8002966:	d106      	bne.n	8002976 <__sflush_r+0x62>
 8002968:	6829      	ldr	r1, [r5, #0]
 800296a:	291d      	cmp	r1, #29
 800296c:	d82c      	bhi.n	80029c8 <__sflush_r+0xb4>
 800296e:	4a29      	ldr	r2, [pc, #164]	; (8002a14 <__sflush_r+0x100>)
 8002970:	40ca      	lsrs	r2, r1
 8002972:	07d6      	lsls	r6, r2, #31
 8002974:	d528      	bpl.n	80029c8 <__sflush_r+0xb4>
 8002976:	2200      	movs	r2, #0
 8002978:	6062      	str	r2, [r4, #4]
 800297a:	04d9      	lsls	r1, r3, #19
 800297c:	6922      	ldr	r2, [r4, #16]
 800297e:	6022      	str	r2, [r4, #0]
 8002980:	d504      	bpl.n	800298c <__sflush_r+0x78>
 8002982:	1c42      	adds	r2, r0, #1
 8002984:	d101      	bne.n	800298a <__sflush_r+0x76>
 8002986:	682b      	ldr	r3, [r5, #0]
 8002988:	b903      	cbnz	r3, 800298c <__sflush_r+0x78>
 800298a:	6560      	str	r0, [r4, #84]	; 0x54
 800298c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800298e:	602f      	str	r7, [r5, #0]
 8002990:	2900      	cmp	r1, #0
 8002992:	d0cb      	beq.n	800292c <__sflush_r+0x18>
 8002994:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002998:	4299      	cmp	r1, r3
 800299a:	d002      	beq.n	80029a2 <__sflush_r+0x8e>
 800299c:	4628      	mov	r0, r5
 800299e:	f000 f8fb 	bl	8002b98 <_free_r>
 80029a2:	2000      	movs	r0, #0
 80029a4:	6360      	str	r0, [r4, #52]	; 0x34
 80029a6:	e7c2      	b.n	800292e <__sflush_r+0x1a>
 80029a8:	6a21      	ldr	r1, [r4, #32]
 80029aa:	2301      	movs	r3, #1
 80029ac:	4628      	mov	r0, r5
 80029ae:	47b0      	blx	r6
 80029b0:	1c41      	adds	r1, r0, #1
 80029b2:	d1c7      	bne.n	8002944 <__sflush_r+0x30>
 80029b4:	682b      	ldr	r3, [r5, #0]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d0c4      	beq.n	8002944 <__sflush_r+0x30>
 80029ba:	2b1d      	cmp	r3, #29
 80029bc:	d001      	beq.n	80029c2 <__sflush_r+0xae>
 80029be:	2b16      	cmp	r3, #22
 80029c0:	d101      	bne.n	80029c6 <__sflush_r+0xb2>
 80029c2:	602f      	str	r7, [r5, #0]
 80029c4:	e7b2      	b.n	800292c <__sflush_r+0x18>
 80029c6:	89a3      	ldrh	r3, [r4, #12]
 80029c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029cc:	81a3      	strh	r3, [r4, #12]
 80029ce:	e7ae      	b.n	800292e <__sflush_r+0x1a>
 80029d0:	690f      	ldr	r7, [r1, #16]
 80029d2:	2f00      	cmp	r7, #0
 80029d4:	d0aa      	beq.n	800292c <__sflush_r+0x18>
 80029d6:	0793      	lsls	r3, r2, #30
 80029d8:	680e      	ldr	r6, [r1, #0]
 80029da:	bf08      	it	eq
 80029dc:	694b      	ldreq	r3, [r1, #20]
 80029de:	600f      	str	r7, [r1, #0]
 80029e0:	bf18      	it	ne
 80029e2:	2300      	movne	r3, #0
 80029e4:	1bf6      	subs	r6, r6, r7
 80029e6:	608b      	str	r3, [r1, #8]
 80029e8:	2e00      	cmp	r6, #0
 80029ea:	dd9f      	ble.n	800292c <__sflush_r+0x18>
 80029ec:	6a21      	ldr	r1, [r4, #32]
 80029ee:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80029f2:	4633      	mov	r3, r6
 80029f4:	463a      	mov	r2, r7
 80029f6:	4628      	mov	r0, r5
 80029f8:	47e0      	blx	ip
 80029fa:	2800      	cmp	r0, #0
 80029fc:	dc06      	bgt.n	8002a0c <__sflush_r+0xf8>
 80029fe:	89a3      	ldrh	r3, [r4, #12]
 8002a00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a04:	81a3      	strh	r3, [r4, #12]
 8002a06:	f04f 30ff 	mov.w	r0, #4294967295
 8002a0a:	e790      	b.n	800292e <__sflush_r+0x1a>
 8002a0c:	4407      	add	r7, r0
 8002a0e:	1a36      	subs	r6, r6, r0
 8002a10:	e7ea      	b.n	80029e8 <__sflush_r+0xd4>
 8002a12:	bf00      	nop
 8002a14:	20400001 	.word	0x20400001

08002a18 <_fflush_r>:
 8002a18:	b538      	push	{r3, r4, r5, lr}
 8002a1a:	690b      	ldr	r3, [r1, #16]
 8002a1c:	4605      	mov	r5, r0
 8002a1e:	460c      	mov	r4, r1
 8002a20:	b913      	cbnz	r3, 8002a28 <_fflush_r+0x10>
 8002a22:	2500      	movs	r5, #0
 8002a24:	4628      	mov	r0, r5
 8002a26:	bd38      	pop	{r3, r4, r5, pc}
 8002a28:	b118      	cbz	r0, 8002a32 <_fflush_r+0x1a>
 8002a2a:	6983      	ldr	r3, [r0, #24]
 8002a2c:	b90b      	cbnz	r3, 8002a32 <_fflush_r+0x1a>
 8002a2e:	f7ff fa1b 	bl	8001e68 <__sinit>
 8002a32:	4b14      	ldr	r3, [pc, #80]	; (8002a84 <_fflush_r+0x6c>)
 8002a34:	429c      	cmp	r4, r3
 8002a36:	d11b      	bne.n	8002a70 <_fflush_r+0x58>
 8002a38:	686c      	ldr	r4, [r5, #4]
 8002a3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d0ef      	beq.n	8002a22 <_fflush_r+0xa>
 8002a42:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002a44:	07d0      	lsls	r0, r2, #31
 8002a46:	d404      	bmi.n	8002a52 <_fflush_r+0x3a>
 8002a48:	0599      	lsls	r1, r3, #22
 8002a4a:	d402      	bmi.n	8002a52 <_fflush_r+0x3a>
 8002a4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002a4e:	f7ff faa9 	bl	8001fa4 <__retarget_lock_acquire_recursive>
 8002a52:	4628      	mov	r0, r5
 8002a54:	4621      	mov	r1, r4
 8002a56:	f7ff ff5d 	bl	8002914 <__sflush_r>
 8002a5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002a5c:	07da      	lsls	r2, r3, #31
 8002a5e:	4605      	mov	r5, r0
 8002a60:	d4e0      	bmi.n	8002a24 <_fflush_r+0xc>
 8002a62:	89a3      	ldrh	r3, [r4, #12]
 8002a64:	059b      	lsls	r3, r3, #22
 8002a66:	d4dd      	bmi.n	8002a24 <_fflush_r+0xc>
 8002a68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002a6a:	f7ff fa9c 	bl	8001fa6 <__retarget_lock_release_recursive>
 8002a6e:	e7d9      	b.n	8002a24 <_fflush_r+0xc>
 8002a70:	4b05      	ldr	r3, [pc, #20]	; (8002a88 <_fflush_r+0x70>)
 8002a72:	429c      	cmp	r4, r3
 8002a74:	d101      	bne.n	8002a7a <_fflush_r+0x62>
 8002a76:	68ac      	ldr	r4, [r5, #8]
 8002a78:	e7df      	b.n	8002a3a <_fflush_r+0x22>
 8002a7a:	4b04      	ldr	r3, [pc, #16]	; (8002a8c <_fflush_r+0x74>)
 8002a7c:	429c      	cmp	r4, r3
 8002a7e:	bf08      	it	eq
 8002a80:	68ec      	ldreq	r4, [r5, #12]
 8002a82:	e7da      	b.n	8002a3a <_fflush_r+0x22>
 8002a84:	08002d7c 	.word	0x08002d7c
 8002a88:	08002d9c 	.word	0x08002d9c
 8002a8c:	08002d5c 	.word	0x08002d5c

08002a90 <_lseek_r>:
 8002a90:	b538      	push	{r3, r4, r5, lr}
 8002a92:	4d07      	ldr	r5, [pc, #28]	; (8002ab0 <_lseek_r+0x20>)
 8002a94:	4604      	mov	r4, r0
 8002a96:	4608      	mov	r0, r1
 8002a98:	4611      	mov	r1, r2
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	602a      	str	r2, [r5, #0]
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	f7fd fd1c 	bl	80004dc <_lseek>
 8002aa4:	1c43      	adds	r3, r0, #1
 8002aa6:	d102      	bne.n	8002aae <_lseek_r+0x1e>
 8002aa8:	682b      	ldr	r3, [r5, #0]
 8002aaa:	b103      	cbz	r3, 8002aae <_lseek_r+0x1e>
 8002aac:	6023      	str	r3, [r4, #0]
 8002aae:	bd38      	pop	{r3, r4, r5, pc}
 8002ab0:	200000b4 	.word	0x200000b4

08002ab4 <__swhatbuf_r>:
 8002ab4:	b570      	push	{r4, r5, r6, lr}
 8002ab6:	460e      	mov	r6, r1
 8002ab8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002abc:	2900      	cmp	r1, #0
 8002abe:	b096      	sub	sp, #88	; 0x58
 8002ac0:	4614      	mov	r4, r2
 8002ac2:	461d      	mov	r5, r3
 8002ac4:	da08      	bge.n	8002ad8 <__swhatbuf_r+0x24>
 8002ac6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002aca:	2200      	movs	r2, #0
 8002acc:	602a      	str	r2, [r5, #0]
 8002ace:	061a      	lsls	r2, r3, #24
 8002ad0:	d410      	bmi.n	8002af4 <__swhatbuf_r+0x40>
 8002ad2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ad6:	e00e      	b.n	8002af6 <__swhatbuf_r+0x42>
 8002ad8:	466a      	mov	r2, sp
 8002ada:	f000 f8b9 	bl	8002c50 <_fstat_r>
 8002ade:	2800      	cmp	r0, #0
 8002ae0:	dbf1      	blt.n	8002ac6 <__swhatbuf_r+0x12>
 8002ae2:	9a01      	ldr	r2, [sp, #4]
 8002ae4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002ae8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002aec:	425a      	negs	r2, r3
 8002aee:	415a      	adcs	r2, r3
 8002af0:	602a      	str	r2, [r5, #0]
 8002af2:	e7ee      	b.n	8002ad2 <__swhatbuf_r+0x1e>
 8002af4:	2340      	movs	r3, #64	; 0x40
 8002af6:	2000      	movs	r0, #0
 8002af8:	6023      	str	r3, [r4, #0]
 8002afa:	b016      	add	sp, #88	; 0x58
 8002afc:	bd70      	pop	{r4, r5, r6, pc}
	...

08002b00 <__smakebuf_r>:
 8002b00:	898b      	ldrh	r3, [r1, #12]
 8002b02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002b04:	079d      	lsls	r5, r3, #30
 8002b06:	4606      	mov	r6, r0
 8002b08:	460c      	mov	r4, r1
 8002b0a:	d507      	bpl.n	8002b1c <__smakebuf_r+0x1c>
 8002b0c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002b10:	6023      	str	r3, [r4, #0]
 8002b12:	6123      	str	r3, [r4, #16]
 8002b14:	2301      	movs	r3, #1
 8002b16:	6163      	str	r3, [r4, #20]
 8002b18:	b002      	add	sp, #8
 8002b1a:	bd70      	pop	{r4, r5, r6, pc}
 8002b1c:	ab01      	add	r3, sp, #4
 8002b1e:	466a      	mov	r2, sp
 8002b20:	f7ff ffc8 	bl	8002ab4 <__swhatbuf_r>
 8002b24:	9900      	ldr	r1, [sp, #0]
 8002b26:	4605      	mov	r5, r0
 8002b28:	4630      	mov	r0, r6
 8002b2a:	f7ff fa5d 	bl	8001fe8 <_malloc_r>
 8002b2e:	b948      	cbnz	r0, 8002b44 <__smakebuf_r+0x44>
 8002b30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b34:	059a      	lsls	r2, r3, #22
 8002b36:	d4ef      	bmi.n	8002b18 <__smakebuf_r+0x18>
 8002b38:	f023 0303 	bic.w	r3, r3, #3
 8002b3c:	f043 0302 	orr.w	r3, r3, #2
 8002b40:	81a3      	strh	r3, [r4, #12]
 8002b42:	e7e3      	b.n	8002b0c <__smakebuf_r+0xc>
 8002b44:	4b0d      	ldr	r3, [pc, #52]	; (8002b7c <__smakebuf_r+0x7c>)
 8002b46:	62b3      	str	r3, [r6, #40]	; 0x28
 8002b48:	89a3      	ldrh	r3, [r4, #12]
 8002b4a:	6020      	str	r0, [r4, #0]
 8002b4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b50:	81a3      	strh	r3, [r4, #12]
 8002b52:	9b00      	ldr	r3, [sp, #0]
 8002b54:	6163      	str	r3, [r4, #20]
 8002b56:	9b01      	ldr	r3, [sp, #4]
 8002b58:	6120      	str	r0, [r4, #16]
 8002b5a:	b15b      	cbz	r3, 8002b74 <__smakebuf_r+0x74>
 8002b5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002b60:	4630      	mov	r0, r6
 8002b62:	f000 f887 	bl	8002c74 <_isatty_r>
 8002b66:	b128      	cbz	r0, 8002b74 <__smakebuf_r+0x74>
 8002b68:	89a3      	ldrh	r3, [r4, #12]
 8002b6a:	f023 0303 	bic.w	r3, r3, #3
 8002b6e:	f043 0301 	orr.w	r3, r3, #1
 8002b72:	81a3      	strh	r3, [r4, #12]
 8002b74:	89a0      	ldrh	r0, [r4, #12]
 8002b76:	4305      	orrs	r5, r0
 8002b78:	81a5      	strh	r5, [r4, #12]
 8002b7a:	e7cd      	b.n	8002b18 <__smakebuf_r+0x18>
 8002b7c:	08001e01 	.word	0x08001e01

08002b80 <__malloc_lock>:
 8002b80:	4801      	ldr	r0, [pc, #4]	; (8002b88 <__malloc_lock+0x8>)
 8002b82:	f7ff ba0f 	b.w	8001fa4 <__retarget_lock_acquire_recursive>
 8002b86:	bf00      	nop
 8002b88:	200000a8 	.word	0x200000a8

08002b8c <__malloc_unlock>:
 8002b8c:	4801      	ldr	r0, [pc, #4]	; (8002b94 <__malloc_unlock+0x8>)
 8002b8e:	f7ff ba0a 	b.w	8001fa6 <__retarget_lock_release_recursive>
 8002b92:	bf00      	nop
 8002b94:	200000a8 	.word	0x200000a8

08002b98 <_free_r>:
 8002b98:	b538      	push	{r3, r4, r5, lr}
 8002b9a:	4605      	mov	r5, r0
 8002b9c:	2900      	cmp	r1, #0
 8002b9e:	d041      	beq.n	8002c24 <_free_r+0x8c>
 8002ba0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ba4:	1f0c      	subs	r4, r1, #4
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	bfb8      	it	lt
 8002baa:	18e4      	addlt	r4, r4, r3
 8002bac:	f7ff ffe8 	bl	8002b80 <__malloc_lock>
 8002bb0:	4a1d      	ldr	r2, [pc, #116]	; (8002c28 <_free_r+0x90>)
 8002bb2:	6813      	ldr	r3, [r2, #0]
 8002bb4:	b933      	cbnz	r3, 8002bc4 <_free_r+0x2c>
 8002bb6:	6063      	str	r3, [r4, #4]
 8002bb8:	6014      	str	r4, [r2, #0]
 8002bba:	4628      	mov	r0, r5
 8002bbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002bc0:	f7ff bfe4 	b.w	8002b8c <__malloc_unlock>
 8002bc4:	42a3      	cmp	r3, r4
 8002bc6:	d908      	bls.n	8002bda <_free_r+0x42>
 8002bc8:	6820      	ldr	r0, [r4, #0]
 8002bca:	1821      	adds	r1, r4, r0
 8002bcc:	428b      	cmp	r3, r1
 8002bce:	bf01      	itttt	eq
 8002bd0:	6819      	ldreq	r1, [r3, #0]
 8002bd2:	685b      	ldreq	r3, [r3, #4]
 8002bd4:	1809      	addeq	r1, r1, r0
 8002bd6:	6021      	streq	r1, [r4, #0]
 8002bd8:	e7ed      	b.n	8002bb6 <_free_r+0x1e>
 8002bda:	461a      	mov	r2, r3
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	b10b      	cbz	r3, 8002be4 <_free_r+0x4c>
 8002be0:	42a3      	cmp	r3, r4
 8002be2:	d9fa      	bls.n	8002bda <_free_r+0x42>
 8002be4:	6811      	ldr	r1, [r2, #0]
 8002be6:	1850      	adds	r0, r2, r1
 8002be8:	42a0      	cmp	r0, r4
 8002bea:	d10b      	bne.n	8002c04 <_free_r+0x6c>
 8002bec:	6820      	ldr	r0, [r4, #0]
 8002bee:	4401      	add	r1, r0
 8002bf0:	1850      	adds	r0, r2, r1
 8002bf2:	4283      	cmp	r3, r0
 8002bf4:	6011      	str	r1, [r2, #0]
 8002bf6:	d1e0      	bne.n	8002bba <_free_r+0x22>
 8002bf8:	6818      	ldr	r0, [r3, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	6053      	str	r3, [r2, #4]
 8002bfe:	4401      	add	r1, r0
 8002c00:	6011      	str	r1, [r2, #0]
 8002c02:	e7da      	b.n	8002bba <_free_r+0x22>
 8002c04:	d902      	bls.n	8002c0c <_free_r+0x74>
 8002c06:	230c      	movs	r3, #12
 8002c08:	602b      	str	r3, [r5, #0]
 8002c0a:	e7d6      	b.n	8002bba <_free_r+0x22>
 8002c0c:	6820      	ldr	r0, [r4, #0]
 8002c0e:	1821      	adds	r1, r4, r0
 8002c10:	428b      	cmp	r3, r1
 8002c12:	bf04      	itt	eq
 8002c14:	6819      	ldreq	r1, [r3, #0]
 8002c16:	685b      	ldreq	r3, [r3, #4]
 8002c18:	6063      	str	r3, [r4, #4]
 8002c1a:	bf04      	itt	eq
 8002c1c:	1809      	addeq	r1, r1, r0
 8002c1e:	6021      	streq	r1, [r4, #0]
 8002c20:	6054      	str	r4, [r2, #4]
 8002c22:	e7ca      	b.n	8002bba <_free_r+0x22>
 8002c24:	bd38      	pop	{r3, r4, r5, pc}
 8002c26:	bf00      	nop
 8002c28:	200000ac 	.word	0x200000ac

08002c2c <_read_r>:
 8002c2c:	b538      	push	{r3, r4, r5, lr}
 8002c2e:	4d07      	ldr	r5, [pc, #28]	; (8002c4c <_read_r+0x20>)
 8002c30:	4604      	mov	r4, r0
 8002c32:	4608      	mov	r0, r1
 8002c34:	4611      	mov	r1, r2
 8002c36:	2200      	movs	r2, #0
 8002c38:	602a      	str	r2, [r5, #0]
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	f7fd fbf1 	bl	8000422 <_read>
 8002c40:	1c43      	adds	r3, r0, #1
 8002c42:	d102      	bne.n	8002c4a <_read_r+0x1e>
 8002c44:	682b      	ldr	r3, [r5, #0]
 8002c46:	b103      	cbz	r3, 8002c4a <_read_r+0x1e>
 8002c48:	6023      	str	r3, [r4, #0]
 8002c4a:	bd38      	pop	{r3, r4, r5, pc}
 8002c4c:	200000b4 	.word	0x200000b4

08002c50 <_fstat_r>:
 8002c50:	b538      	push	{r3, r4, r5, lr}
 8002c52:	4d07      	ldr	r5, [pc, #28]	; (8002c70 <_fstat_r+0x20>)
 8002c54:	2300      	movs	r3, #0
 8002c56:	4604      	mov	r4, r0
 8002c58:	4608      	mov	r0, r1
 8002c5a:	4611      	mov	r1, r2
 8002c5c:	602b      	str	r3, [r5, #0]
 8002c5e:	f7fd fc24 	bl	80004aa <_fstat>
 8002c62:	1c43      	adds	r3, r0, #1
 8002c64:	d102      	bne.n	8002c6c <_fstat_r+0x1c>
 8002c66:	682b      	ldr	r3, [r5, #0]
 8002c68:	b103      	cbz	r3, 8002c6c <_fstat_r+0x1c>
 8002c6a:	6023      	str	r3, [r4, #0]
 8002c6c:	bd38      	pop	{r3, r4, r5, pc}
 8002c6e:	bf00      	nop
 8002c70:	200000b4 	.word	0x200000b4

08002c74 <_isatty_r>:
 8002c74:	b538      	push	{r3, r4, r5, lr}
 8002c76:	4d06      	ldr	r5, [pc, #24]	; (8002c90 <_isatty_r+0x1c>)
 8002c78:	2300      	movs	r3, #0
 8002c7a:	4604      	mov	r4, r0
 8002c7c:	4608      	mov	r0, r1
 8002c7e:	602b      	str	r3, [r5, #0]
 8002c80:	f7fd fc22 	bl	80004c8 <_isatty>
 8002c84:	1c43      	adds	r3, r0, #1
 8002c86:	d102      	bne.n	8002c8e <_isatty_r+0x1a>
 8002c88:	682b      	ldr	r3, [r5, #0]
 8002c8a:	b103      	cbz	r3, 8002c8e <_isatty_r+0x1a>
 8002c8c:	6023      	str	r3, [r4, #0]
 8002c8e:	bd38      	pop	{r3, r4, r5, pc}
 8002c90:	200000b4 	.word	0x200000b4

08002c94 <_init>:
 8002c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c96:	bf00      	nop
 8002c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c9a:	bc08      	pop	{r3}
 8002c9c:	469e      	mov	lr, r3
 8002c9e:	4770      	bx	lr

08002ca0 <_fini>:
 8002ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ca2:	bf00      	nop
 8002ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ca6:	bc08      	pop	{r3}
 8002ca8:	469e      	mov	lr, r3
 8002caa:	4770      	bx	lr
 8002cac:	0000      	movs	r0, r0
	...
